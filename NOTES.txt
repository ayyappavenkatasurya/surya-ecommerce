.env :
// .env
NODE_ENV=development
PORT=5000
MONGO_URI=mongodb+srv://ecommerce:ecommerce@cluster0.jcfuk.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
SESSION_SECRET=e6142a6d230d0445c9b050af41bfd1e53ece6270797e546fbdaa97af20f3b77e
SESSION_MAX_AGE=86400000

# --- Frontend Origin URL (For CORS) ---
FRONTEND_URL=http://localhost:5173

# Email Configuration
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USER=ayyappanallamothu4@gmail.com
MAIL_PASS=yxor nmot lxmq skyc
MAIL_FROM='"miniapp" <ayyappanallamothu4@gmail.com>'

# --- Gemini API Key ---
GEMINI_API_KEY=AIzaSyCX31vkQ9Qf7t-ytSeDZUGR8hK4XZUHQT0

# --- Razorpay API Keys ---
RAZORPAY_KEY_ID=rzp_test_pqiinPMS00E9lu
RAZORPAY_KEY_SECRET=x7MZpBzxmuyH0opjy4RGg5r5

# --- Rate Limiting Config ---
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

config.js :
// config.js
const mongoose = require('mongoose');
const { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } = require("@google/generative-ai");
const nodemailer = require('nodemailer');
const Razorpay = require('razorpay'); // <<< ADDED

// --- From config/categories.js ---
const categoriesData = [
    { name: "Electronics", iconUrl: "https://cdn.iconscout.com/icon/premium/png-512-thumb/electronics-industry-4494765-3725864.png?f=webp&w=512" },
    { name: "Food", iconUrl: "https://cdn-icons-png.flaticon.com/128/737/737967.png" },
    { name: "Home & Kitchen", iconUrl: "https://cdn.iconscout.com/icon/free/png-512/free-kitchen-icon-download-in-svg-png-gif-file-formats--appliances-stove-digital-electric-cooking-online-store-pack-miscellaneous-icons-288069.png?f=webp&w=512" },
    { name: "Books", iconUrl: "https://cdn.iconscout.com/icon/premium/png-512-thumb/books-3166435-2641511.png?f=webp&w=512" },
    { name: "Sports & Outdoors", iconUrl: "https://cdn.iconscout.com/icon/premium/png-512-thumb/sports-3552379-2971891.png?f=webp&w=512" },
    { name: "Toys & Games", iconUrl: "https://cdn.iconscout.com/icon/premium/png-512-thumb/games-3407099-2833026.png?f=webp&w=512" },
    { name: "Grocery", iconUrl: "https://cdn.iconscout.com/icon/premium/png-512-thumb/grocery-9471761-7699268.png?f=webp&w=512" },
    { name: "Health & Beauty", iconUrl: "https://cdn.iconscout.com/icon/free/png-512/free-beauty-icon-download-in-svg-png-gif-file-formats--care-cosmetics-makeup-and-pack-icons-804.png?f=webp&w=512" },
];
const categoryNames = categoriesData.map(cat => cat.name);

// --- From config/database.js ---
const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGO_URI);
    console.log(`MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error(`Error connecting to MongoDB: ${error.message}`);
    process.exit(1);
  }
};

// --- From config/gemini.js ---
if (!process.env.GEMINI_API_KEY) {
    console.warn("GEMINI_API_KEY is not set in .env file. Gemini features will be disabled.");
}
const genAI = process.env.GEMINI_API_KEY ? new GoogleGenerativeAI(process.env.GEMINI_API_KEY) : null;
const textModel = genAI ? genAI.getGenerativeModel({ model: "gemini-pro"}) : null;
const visionModel = genAI ? genAI.getGenerativeModel({ model: "gemini-1.5-flash" }) : null;
const geminiSafetySettings = [
  { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
];

if (genAI && visionModel) {
    console.log("Gemini AI SDK Initialized successfully (Vision capable).");
} else {
     console.log("Gemini AI SDK could not be initialized (API Key missing or Vision model error?).");
}


// --- From config/mailer.js ---
const transporter = nodemailer.createTransport({
  host: process.env.MAIL_HOST,
  port: parseInt(process.env.MAIL_PORT, 10),
  secure: parseInt(process.env.MAIL_PORT, 10) === 465,
  auth: {
    user: process.env.MAIL_USER,
    pass: process.env.MAIL_PASS,
  },
});

transporter.verify((error, success) => {
  if (error) {
    console.error('Error with Nodemailer transporter configuration:', error);
  } else {
    console.log('Nodemailer transporter is ready to send emails');
  }
});

const sendEmail = async (to, subject, text, html) => {
  try {
    await transporter.sendMail({
      from: process.env.MAIL_FROM,
      to: to,
      subject: subject,
      text: text,
      html: html,
    });
    console.log(`Email sent successfully to ${to}`);
    return true;
  } catch (error) {
    console.error(`Error sending email to ${to}:`, error);
    return false;
  }
};

// --- Razorpay Configuration --- // <<< ADDED
let razorpayInstance = null;
if (process.env.RAZORPAY_KEY_ID && process.env.RAZORPAY_KEY_SECRET) {
    razorpayInstance = new Razorpay({
        key_id: process.env.RAZORPAY_KEY_ID,
        key_secret: process.env.RAZORPAY_KEY_SECRET,
    });
    console.log("Razorpay SDK Initialized successfully.");
} else {
    console.warn("RAZORPAY_KEY_ID or RAZORPAY_KEY_SECRET not set in .env file. Razorpay features will be disabled.");
}


// --- Consolidated Exports ---
module.exports = {
    // From categories.js
    categories: categoriesData,
    categoryNames: categoryNames,
    // From database.js
    connectDB,
    // From gemini.js
    textModel,
    visionModel,
    geminiSafetySettings,
    // From mailer.js
    sendEmail,
    // Razorpay
    razorpayInstance, // <<< ADDED
    RAZORPAY_KEY_ID: process.env.RAZORPAY_KEY_ID // <<< ADDED (to pass to frontend)
};

controllers.js :
// controllers.js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const crypto = require('crypto');
const axios = require('axios');

// Import consolidated modules
const Models = require('./models');
const Config = require('./config'); // Existing config require
const Services = require('./services');

const { User, Product, Order, BannerConfig } = Models;
const { sendEmail, categories, categoryNames, RAZORPAY_KEY_ID } = Config; // Added RAZORPAY_KEY_ID
const { generateOTP, setOTPExpiration, reviewProductWithGemini, generateEmailHtml, createRazorpayOrder, verifyRazorpayPayment } = Services; // Added Razorpay services

// Shared Constants (moved here from individual controllers for consolidation)
const passwordFormatErrorMsg = "Password must be at least 8 characters and include uppercase, lowercase, number, and special character.";
const minPasswordLength = 8;
const uppercaseRegex = /[A-Z]/;
const lowercaseRegex = /[a-z]/;
const numberRegex = /[0-9]/;
const specialCharRegex = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~`]/;

const adminCancellationReasons = [
    "📞 Unable to contact the customer", "❗ Out of stock/unavailable item", "🗺️ Address incorrect/incomplete",
    "🚫 Customer requested cancellation", "❓ Other (Admin)",
];
const sellerCancellationReasons = [
    "❗ Item Out of Stock", "🚚 Unable to Fulfill/Ship", "👤 Technical Issue", "❓ Other Reason",
];


// ============================
// Auth Controller Functions
// ============================
// ... (auth_getLoginPage, auth_getRegisterPage, etc. - NO CHANGES to these) ...
exports.auth_getLoginPage = (req, res) => {
    if (req.session.user) { return res.redirect('/'); }
    res.render('auth/login', { title: 'Login' });
};

exports.auth_getRegisterPage = (req, res) => {
    if (req.session.user) { return res.redirect('/'); }
    res.render('auth/register', {
        title: 'Register', name: req.flash('form_name')[0] || '', email: req.flash('form_email')[0] || ''
    });
};

exports.auth_getVerifyOtpPage = (req, res) => {
    const email = req.query.email;
    if (!email) { req.flash('error_msg', 'Email required for OTP verification.'); return res.redirect('/auth/register'); }
    if (req.session.user) { return res.redirect('/'); }
    res.render('auth/verify-otp', { title: 'Verify Email', email });
};

exports.auth_getForgotPasswordPage = (req, res) => {
    if (req.session.user) { return res.redirect('/'); }
    res.render('auth/forgot-password', { title: 'Forgot Password' });
};

exports.auth_getResetPasswordPage = async (req, res, next) => {
    if (req.session.user) { req.flash('info_msg', 'You are already logged in.'); return res.redirect('/'); }
    try {
        const user = await User.findOne({ resetPasswordToken: req.params.token, resetPasswordExpires: { $gt: Date.now() } });
        if (!user) { req.flash('error_msg', 'Password reset token is invalid or has expired.'); return res.redirect('/auth/forgot-password'); }
        res.render('auth/reset-password', { title: 'Reset Password', token: req.params.token });
    } catch (error) { next(error); }
};

exports.auth_getHomePage = async (req, res, next) => { 
  try {
    const searchTerm = req.query.search || '';
    const categoryFilter = req.query.category || '';
    let query = { reviewStatus: 'approved', stock: { $gt: 0 } };
    if (searchTerm) { query.$text = { $search: searchTerm }; }
    if (categoryFilter && categoryNames.includes(categoryFilter)) { query.category = categoryFilter; }
    else if (categoryFilter) { console.warn(`Invalid category filter: ${categoryFilter}`); }
    const projection = searchTerm ? { score: { $meta: "textScore" } } : {};
    const sort = searchTerm ? { score: { $meta: "textScore" } } : { createdAt: -1 };
    const [products, bannerConfig] = await Promise.all([
        Product.find(query, projection).sort(sort).lean(),
        BannerConfig.findOne({ configKey: 'mainBanners' }).lean()
    ]);
    const banners = bannerConfig?.banners || [];
    const validBanners = banners.filter(banner => banner.imageUrl);
    let pageTitle = 'Home';
    if (searchTerm) pageTitle = `Search: "${searchTerm}"`;
    else if (categoryFilter && categoryNames.includes(categoryFilter)) pageTitle = `Category: ${categoryFilter}`;
    res.render('products/index', {
      title: pageTitle, products, searchTerm, selectedCategory: categoryFilter,
      homepageBanners: validBanners, displayCategories: categories
    });
  } catch (error) { console.error("Error fetching homepage data:", error); next(error); }
};

exports.auth_registerUser = async (req, res, next) => {
     if (req.session.user) { return res.redirect('/'); }
     const { name, email, password, confirmPassword } = req.body;
     let errors = [];
     if (!name || !email || !password || !confirmPassword) errors.push('Please fill in all fields.');
     if (password !== confirmPassword) errors.push('Passwords do not match.');
     if (email && !/^\S+@\S+\.\S+$/.test(email)) errors.push('Valid email required.');
     if (password && (password.length < minPasswordLength || !uppercaseRegex.test(password) || !lowercaseRegex.test(password) || !numberRegex.test(password) || !specialCharRegex.test(password))) {
         if (!errors.includes(passwordFormatErrorMsg)) errors.push(passwordFormatErrorMsg);
     }
     if (errors.length > 0) {
         req.flash('error_msg', errors.join(' ')); req.flash('form_name', name); req.flash('form_email', email);
         return res.redirect('/auth/register');
     }
     try {
         const lowerCaseEmail = email.toLowerCase();
         let user = await User.findOne({ email: lowerCaseEmail });
         if (user?.isVerified) { req.flash('error_msg', 'Email registered & verified. Please login.'); return res.redirect('/auth/login'); }
         const otp = generateOTP(); const otpExpires = setOTPExpiration(10);
         if (user && !user.isVerified) {
             user.name = name; if (password) user.password = password;
             user.otp = otp; user.otpExpires = otpExpires; user.isVerified = false;
             await user.save({ validateBeforeSave: true }); console.log(`Updating unverified user: ${user.email}`);
         } else {
             user = new User({ name, email: lowerCaseEmail, password, otp, otpExpires, isVerified: false });
             await user.save(); console.log(`New user created: ${user.email}`);
         }
         const subject = 'Verify Your Email - miniapp';
         const text = `Your OTP is: ${otp}. Expires in 10 minutes.`;
         const html = generateEmailHtml({ recipientName: user.name, subject: subject, greeting: `Welcome, ${user.name}!`,
             bodyLines: [`Use this OTP to verify your email: <strong style="font-size: 20px;">${otp}</strong>`, `Expires in 10 minutes.` ],
             companyName: 'miniapp' });
         const emailSent = await sendEmail(user.email, subject, text, html);
         if (emailSent) {
             req.flash('success_msg', `OTP sent to ${user.email}. Please verify.`);
             res.redirect(`/auth/verify-otp?email=${encodeURIComponent(user.email)}`);
         } else {
             if(!user.createdAt || (Date.now() - user.createdAt.getTime()) < 5000) { 
                try { await User.deleteOne({ _id: user._id, isVerified: false }); console.log(`Cleaned up ${user.email} due to failed email.`); }
                catch (deleteError) { console.error(`Error cleaning up unverified user ${user.email}:`, deleteError); }
             }
             req.flash('error_msg', 'Could not send OTP email. Try again or contact support.'); res.redirect('/auth/register');
         }
     } catch (error) {
        if (error.code === 11000) { req.flash('error_msg', 'Email exists. Login or use another email.'); req.flash('form_name', name); req.flash('form_email', email); return res.redirect('/auth/register'); }
        if (error.name === 'ValidationError') {
            let validationErrors = Object.values(error.errors).map(el => el.message);
             if (validationErrors.some(msg => msg.includes('Password must be at least'))) { if (!errors.includes(passwordFormatErrorMsg)) errors.push(passwordFormatErrorMsg); validationErrors = validationErrors.filter(msg => !msg.includes('Password must be at least')); }
             req.flash('error_msg', [...new Set([...errors, ...validationErrors])].join(' ')); req.flash('form_name', name); req.flash('form_email', email); return res.redirect('/auth/register');
        } console.error("Registration Error:", error); next(error);
     }
 };

exports.auth_verifyOtp = async (req, res, next) => {
     const { email, otp } = req.body;
     if (req.session.user) { return res.redirect('/'); }
     if (!email || !otp) { req.flash('error_msg', 'Email and OTP required.'); return res.redirect(`/auth/verify-otp?email=${encodeURIComponent(email || '')}`); }
     try {
         const lowerCaseEmail = email.toLowerCase();
         const user = await User.findOne({ email: lowerCaseEmail, otp: otp.trim(), otpExpires: { $gt: Date.now() }, }).select('+password');
         if (!user) {
             const existingUser = await User.findOne({ email: lowerCaseEmail });
             let errorMessage = 'Invalid/expired OTP. Try again or resend.';
             if (existingUser?.isVerified) { errorMessage = 'Account verified. Please login.'; req.flash('error_msg', errorMessage); return res.redirect('/auth/login'); }
             if (!existingUser) { errorMessage = 'Verification failed. Account not found. Register again.'; req.flash('error_msg', errorMessage); return res.redirect('/auth/register'); }
             req.flash('error_msg', errorMessage); return res.redirect(`/auth/verify-otp?email=${encodeURIComponent(email)}`);
         }
         const isPasswordReset = user.resetPasswordToken && user.resetPasswordExpires > Date.now();
         user.isVerified = true; user.otp = undefined; user.otpExpires = undefined;
         if (isPasswordReset) {
             await user.save({ validateBeforeSave: false }); req.flash('success_msg', 'OTP Verified. Set your new password.');
             return res.redirect(`/auth/reset-password/${user.resetPasswordToken}`);
         } else {
             await user.save({ validateBeforeSave: false });
             req.session.regenerate(err => {
                 if (err) { console.error("Session regeneration error after OTP verify:", err); req.flash('error_msg', 'Verify success, auto-login fail. Login manually.'); return res.redirect('/auth/login'); }
                 req.session.user = { _id: user._id, name: user.name, email: user.email, role: user.role, address: user.address, cart: user.cart || [] };
                 req.session.save(err => {
                    if (err) { console.error("Session save error after OTP verify login:", err); req.flash('error_msg', 'Verify success, auto-login fail. Login manually.'); return res.redirect('/auth/login'); }
                    req.flash('success_msg', 'Email verified! Logged in.');
                    const returnTo = req.session.returnTo || '/'; delete req.session.returnTo; res.redirect(returnTo);
                  });
              });
          }
     } catch (error) { next(error); }
 };

exports.auth_resendOtp = async (req, res, next) => {
     const { email } = req.body;
     if (req.session.user) { return res.redirect('/'); }
     if (!email) { req.flash('error_msg', 'Email required.'); return res.redirect(`/auth/verify-otp?email=${encodeURIComponent(req.query.email || '')}`); }
     try {
         const lowerCaseEmail = email.toLowerCase();
         const user = await User.findOne({ email: lowerCaseEmail });
         if (!user) { console.log(`Resend OTP attempt non-existent email: ${lowerCaseEmail}`); req.flash('info_msg', 'If registered, new OTP sent.'); return res.redirect(`/auth/verify-otp?email=${encodeURIComponent(email)}`); }
         const isForReset = user.resetPasswordToken && user.resetPasswordExpires > Date.now();
         if(user.isVerified && !isForReset) { req.flash('error_msg', 'Account verified. Please login.'); return res.redirect('/auth/login'); }
         const otp = generateOTP(); const otpExpires = setOTPExpiration(10);
         user.otp = otp; user.otpExpires = otpExpires; await user.save({ validateBeforeSave: false });
         let subject, greeting, bodyLines; const textOtpLine = `Your OTP is: ${otp}. Expires in 10 minutes.`;
         if (isForReset) { subject = 'New Password Reset OTP'; greeting = 'Password Reset Request'; bodyLines = [`New OTP: <strong style="font-size:20px;">${otp}</strong>`, `Expires in 10 minutes.`]; }
         else { subject = 'New Verification OTP'; greeting = 'Verify Your Email'; bodyLines = [`New OTP: <strong style="font-size:20px;">${otp}</strong>`, `Expires in 10 minutes.`]; }
         const text = `${subject}\n${textOtpLine}\nIgnore if not requested.`;
         const html = generateEmailHtml({ recipientName: user.name, subject: subject, greeting: greeting, bodyLines: bodyLines, companyName: 'miniapp' });
         const emailSent = await sendEmail(user.email, subject, text, html);
         const redirectUrl = `/auth/verify-otp?email=${encodeURIComponent(user.email)}${isForReset ? '&reason=reset' : ''}`;
         if (emailSent) { req.flash('success_msg', `New OTP sent to ${user.email}.`); }
         else { console.error(`Failed to resend OTP email to ${user.email}`); req.flash('error_msg', 'Could not resend OTP email.'); }
         res.redirect(redirectUrl);
     } catch (error) { next(error); }
 };

exports.auth_loginUser = async (req, res, next) => {
      if (req.session.user) { return res.redirect('/'); }
      const { email, password } = req.body;
      if (!email || !password) { req.flash('error_msg', 'Email and password required.'); return res.render('auth/login', { title: 'Login', email: email }); }
      try {
          const lowerCaseEmail = email.toLowerCase();
          const user = await User.findOne({ email: lowerCaseEmail }).select('+password').populate('cart.productId', 'name price imageUrl');
          if (!user) { req.flash('error_msg', 'Invalid credentials.'); return res.render('auth/login', { title: 'Login', email: email }); }
          if (!user.isVerified) { req.flash('error_msg', 'Email not verified. Check inbox for OTP.'); return res.redirect(`/auth/verify-otp?email=${encodeURIComponent(user.email)}`); }
          const isMatch = await user.matchPassword(password);
          if (!isMatch) { req.flash('error_msg', 'Invalid credentials.'); return res.render('auth/login', { title: 'Login', email: email }); }
          req.session.regenerate(err => {
             if (err) { console.error("Session regeneration error during login:", err); req.flash('error_msg', 'Login failed: session error.'); return res.render('auth/login', { title: 'Login', email: email }); }
             req.session.user = { _id: user._id, name: user.name, email: user.email, role: user.role, address: user.address?.toObject(), cart: user.cart ? user.cart.map(item => ({ productId: item.productId?._id, quantity: item.quantity })) : [] };
             req.session.save(err => {
                  if (err) { console.error("Session save error after login:", err); req.flash('error_msg', 'Login ok, session save fail.'); return res.render('auth/login', { title: 'Login', email: email }); }
                  req.flash('success_msg', 'Login successful.');
                  const returnTo = req.session.returnTo || '/'; delete req.session.returnTo; res.redirect(returnTo);
             });
         });
     } catch (error) { next(error); }
 };

exports.auth_logoutUser = (req, res, next) => {
     const sessionUserEmail = req.session?.user?.email || 'User';
     req.flash('success_msg', 'Logout successful.');
     if (req.session) req.session.user = null;
     const cookieName = req.app.get('session cookie name') || 'connect.sid'; res.clearCookie(cookieName);
     console.log(`${sessionUserEmail} - Cleared session cookie: ${cookieName}`);
     if (req.session) {
         req.session.destroy(err => { console.log(`${sessionUserEmail} - Session destroyed ${err ? 'with error: ' + err : 'ok'}.`); });
     } else console.log(`${sessionUserEmail} - No active session found to destroy.`);
     res.redirect('/auth/login');
 };

exports.auth_forgotPassword = async (req, res, next) => {
      const { email } = req.body;
      if (!email) { req.flash('error_msg', 'Email required.'); return res.redirect('/auth/forgot-password'); }
      try {
          const lowerCaseEmail = email.toLowerCase(); const user = await User.findOne({ email: lowerCaseEmail });
          req.flash('info_msg', 'If account exists & verified, OTP sent.');
          if (!user || !user.isVerified) { console.log(`Pwd reset req for ${lowerCaseEmail}: User ${!user ? 'not found' : 'not verified'}.`); return res.redirect('/auth/forgot-password'); }
          const otp = generateOTP(); const resetToken = crypto.randomBytes(20).toString('hex');
          const otpExpires = setOTPExpiration(10); const resetExpires = setOTPExpiration(60);
          user.otp = otp; user.otpExpires = otpExpires; user.resetPasswordToken = resetToken; user.resetPasswordExpires = resetExpires;
          await user.save({ validateBeforeSave: false });
          const subject = 'Password Reset OTP - miniapp';
          const text = `Your password reset OTP is: ${otp}. Expires in 10 mins.`;
          const html = generateEmailHtml({ recipientName: user.name, subject: subject, greeting: 'Password Reset Request',
               bodyLines: [ `OTP to verify identity: <strong style="font-size: 20px;">${otp}</strong>`, `Valid for 10 minutes. Ignore if not requested.` ],
               companyName: 'miniapp' });
          const emailSent = await sendEmail(user.email, subject, text, html);
          if (emailSent) { console.log(`Password reset OTP sent to ${user.email}`); res.redirect(`/auth/verify-otp?email=${encodeURIComponent(user.email)}&reason=reset`); }
          else { console.error(`Failed sending reset OTP email to ${user.email}`); res.redirect('/auth/forgot-password'); }
      } catch (error) { console.error("Error in forgotPassword:", error); req.flash('error_msg', 'Request error. Try again.'); res.redirect('/auth/forgot-password'); }
 };

exports.auth_resetPassword = async (req, res, next) => {
     const { password, confirmPassword } = req.body; const token = req.params.token; let errors = [];
     if (!password || !confirmPassword) errors.push('Enter & confirm new password.');
     if (password !== confirmPassword) errors.push('Passwords do not match.');
     if (password && (password.length < minPasswordLength || !uppercaseRegex.test(password) || !lowercaseRegex.test(password) || !numberRegex.test(password) || !specialCharRegex.test(password))) {
          if (!errors.includes(passwordFormatErrorMsg)) errors.push(passwordFormatErrorMsg);
     }
     if (errors.length > 0) { req.flash('error_msg', errors.join(' ')); return res.redirect(`/auth/reset-password/${token}`); }
     try {
         const user = await User.findOne({ resetPasswordToken: token, resetPasswordExpires: { $gt: Date.now() } }).select('+password');
         if (!user) { req.flash('error_msg', 'Token invalid/expired. Request new link.'); return res.redirect('/auth/forgot-password'); }
         user.password = password; user.resetPasswordToken = undefined; user.resetPasswordExpires = undefined; user.otp = undefined; user.otpExpires = undefined; user.isVerified = true;
         await user.save();
         try { 
              const subject = 'Password Reset Success - miniapp'; const text = `Your account password for ${user.email} changed. Contact support if not you.`;
              const html = generateEmailHtml({ recipientName: user.name, subject: subject, greeting: 'Password Reset Successful', bodyLines: [`Password changed for miniapp account.`, `Contact support if not you.`], companyName: 'miniapp', buttonUrl: `${req.protocol}://${req.get('host')}/auth/login`, buttonText: 'Login' });
              await sendEmail(user.email, subject, text, html);
         } catch (emailError) { console.error("Error sending password change email:", emailError); }
         req.session.regenerate(err => {
              if (err) { console.error("Session regen error after pwd reset:", err); req.flash('success_msg', 'Reset success. Login manually.'); return res.redirect('/auth/login'); }
              req.session.user = { _id: user._id, name: user.name, email: user.email, role: user.role, address: user.address?.toObject(), cart: [] };
              req.session.save(err => {
                  if(err) { console.error("Session save error after pwd reset:", err); req.flash('success_msg', 'Reset success. Login manually.'); return res.redirect('/auth/login'); }
                  req.flash('success_msg', 'Password reset. Logged in.'); res.redirect('/');
              });
          });
     } catch (error) {
          if (error.name === 'ValidationError') {
             let validationErrors = Object.values(error.errors).map(el => el.message);
             if (validationErrors.some(msg => msg.includes('Password must be at least'))) { if (!errors.includes(passwordFormatErrorMsg)) errors.push(passwordFormatErrorMsg); validationErrors = validationErrors.filter(msg => !msg.includes('Password must be at least')); }
             req.flash('error_msg', [...new Set([...errors, ...validationErrors])].join(' ')); return res.redirect(`/auth/reset-password/${token}`);
          } console.error("Reset Password Error:", error); next(error);
     }
 };

// ============================
// Admin Controller Functions
// ============================
// ... (Existing Admin controllers - NO CHANGES to these specific functions) ...
exports.admin_getDashboard = (req, res) => {
    res.render('admin/dashboard', { title: 'Admin Dashboard' });
};
exports.admin_getUploadProductPage = (req, res) => {
    res.render('admin/upload-product', { title: 'Admin: Upload New Product', product: {}, categories: categories });
};
exports.admin_uploadProduct = async (req, res, next) => {
     const { name, category, price, stock, imageUrl, imageUrl2, specifications, shortDescription } = req.body;
     const adminUserId = req.session.user._id, adminUserEmail = req.session.user.email;
     const renderOptions = { title: 'Admin: Upload New Product', product: req.body, categories: categories };
     if (!name || !category || price === undefined || stock === undefined || !imageUrl) { req.flash('error_msg', 'Required: Name, Cat, Price, Stock, Image1.'); return res.render('admin/upload-product', renderOptions); }
     if (isNaN(Number(price)) || Number(price) < 0 || isNaN(Number(stock)) || Number(stock) < 0) { req.flash('error_msg', 'Price/Stock must be >= 0.'); return res.render('admin/upload-product', renderOptions); }
     if (!categoryNames.includes(category)) { req.flash('error_msg', 'Invalid category.'); return res.render('admin/upload-product', renderOptions); }
     try {
         const newProduct = new Product({ name: name.trim(), category: category.trim(), shortDescription: shortDescription?.trim(), price: Number(price), stock: Number(stock), imageUrl: imageUrl.trim(), imageUrl2: imageUrl2?.trim(), specifications: specifications?.trim(), sellerId: adminUserId, sellerEmail: adminUserEmail, reviewStatus: 'pending' });
         await newProduct.save(); console.log(`Product ${newProduct._id} saved initially by ADMIN ${adminUserEmail}.`);
         reviewProductWithGemini(newProduct).then(async reviewResult => {
             try {
                 const ptu = await Product.findById(newProduct._id); if (!ptu) return;
                 ptu.reviewStatus = reviewResult.status; ptu.rejectionReason = reviewResult.reason; await ptu.save();
                 console.log(`Product ${newProduct._id} (Admin Upload) review updated: ${reviewResult.status}.`);
             } catch (updateError) { console.error(`Error updating P.ID ${newProduct._id} (Admin) after Gemini review:`, updateError); }
         }).catch(reviewError => {
             console.error(`Error in Gemini chain for P.ID ${newProduct._id} (Admin):`, reviewError);
             Product.findByIdAndUpdate(newProduct._id, { reviewStatus: 'pending', rejectionReason: 'AI review process failed.' }, { new: false }).catch(err => console.error("Failed recovery mark admin-prod as pending:", err));
         });
         req.flash('success_msg', `Product "${newProduct.name}" uploaded, review pending.`); res.redirect('/admin/manage-products');
     } catch (error) {
        if (error.name === 'ValidationError') { req.flash('error_msg', `Validation Error: ${Object.values(error.errors).map(el => el.message).join(' ')}`); return res.render('admin/upload-product', renderOptions); }
        console.error("Error uploading product by Admin:", error); next(error);
     }
 };
exports.admin_getManageProductsPage = async (req, res, next) => {
    try {
        const products = await Product.find({}).populate('sellerId', 'name email').sort({ createdAt: -1 }).lean();
        res.render('admin/manage-products', { title: 'Manage All Products', products: products });
    } catch (error) { next(error); }
};
exports.admin_getEditProductPage = async (req, res, next) => {
    try {
        const product = await Product.findById(req.params.id).populate('sellerId', 'name email').lean();
        if (!product) { req.flash('error_msg', 'Product not found.'); return res.redirect('/admin/manage-products'); }
        res.render('admin/edit-product', { title: `Admin Edit: ${product.name}`, product: product, isAdminView: true, categories: categories });
    } catch (error) {
        if (error.name === 'CastError') { req.flash('error_msg', 'Invalid product ID.'); return res.redirect('/admin/manage-products'); }
        next(error);
    }
};
exports.admin_updateProduct = async (req, res, next) => {
     const productId = req.params.id;
     const { name, category, price, stock, imageUrl, imageUrl2, specifications, shortDescription, reviewStatus, rejectionReason } = req.body;
     let productDataForRender = { _id: productId, ...req.body };
     const renderOptions = { title: 'Admin Edit Error', product: productDataForRender, isAdminView: true, categories: categories };
     if (!name || !category || price === undefined || stock === undefined || !imageUrl) { req.flash('error_msg', 'Required: Name, Cat, Price, Stock, Image1.'); return res.render('admin/edit-product', renderOptions); }
     if (isNaN(Number(price)) || Number(price) < 0 || isNaN(Number(stock)) || Number(stock) < 0) { req.flash('error_msg', 'Price/Stock must be >= 0.'); return res.render('admin/edit-product', renderOptions); }
     if (!categoryNames.includes(category)) { req.flash('error_msg', 'Invalid category.'); return res.render('admin/edit-product', renderOptions); }
     const allowedStatus = ['pending', 'approved', 'rejected'];
     if (reviewStatus && !allowedStatus.includes(reviewStatus)) { req.flash('error_msg', 'Invalid review status.'); return res.render('admin/edit-product', renderOptions); }
     if (reviewStatus === 'rejected' && !rejectionReason?.trim()) { req.flash('error_msg', 'Rejection reason required for status Rejected.'); return res.render('admin/edit-product', renderOptions); }
     try {
         const product = await Product.findById(productId);
         if (!product) { req.flash('error_msg', 'Product not found.'); return res.status(404).redirect('/admin/manage-products'); }
         product.name = name.trim(); product.category = category.trim(); product.shortDescription = shortDescription?.trim(); product.price = Number(price); product.stock = Number(stock); product.imageUrl = imageUrl.trim(); product.imageUrl2 = imageUrl2?.trim(); product.specifications = specifications?.trim();
         if (reviewStatus) { product.reviewStatus = reviewStatus; product.rejectionReason = (reviewStatus === 'rejected') ? rejectionReason.trim() : undefined; }
         await product.save(); req.flash('success_msg', `Product "${product.name}" updated by admin.`); res.redirect('/admin/manage-products');
     } catch (error) {
          productDataForRender = await Product.findById(productId).lean() || productDataForRender;
          renderOptions.product = { ...productDataForRender, ...req.body }; 
          if (error.name === 'ValidationError') { req.flash('error_msg', `Validation Error: ${Object.values(error.errors).map(el => el.message).join(' ')}`); return res.render('admin/edit-product', renderOptions); }
          if (error.name === 'CastError') { req.flash('error_msg', 'Invalid product ID.'); return res.status(400).redirect('/admin/manage-products'); }
          console.error("Error updating product by Admin:", error); next(error);
     }
 };
exports.admin_removeProduct = async (req, res, next) => {
     const productId = req.params.id;
     try {
         const product = await Product.findByIdAndDelete(productId);
         if (!product) { req.flash('error_msg', 'Product not found.'); return res.status(404).redirect('/admin/manage-products'); }
         req.flash('success_msg', `Product "${product.name}" removed by admin.`); res.redirect('/admin/manage-products');
     } catch (error) {
         if (error.name === 'CastError') { req.flash('error_msg', 'Invalid product ID.'); return res.status(400).redirect('/admin/manage-products'); }
         console.error("Error removing product by Admin:", error); next(error);
     }
 };
exports.admin_getManageOrdersPage = async (req, res, next) => {
     try {
         const orders = await Order.find({}) .sort({ orderDate: -1 }).select('-__v -products.__v -shippingAddress._id').populate('products.productId', 'name imageUrl _id price sellerId').populate('userId', 'name email').lean();
         const now = Date.now();
         orders.forEach(order => {
             order.canBeCancelledByAdmin = order.status === 'Pending' || order.status === 'PaymentPending' || order.status === 'PaymentFailed'; // UPDATED
             order.canBeDirectlyDeliveredByAdmin = order.status === 'Pending';
             order.showDeliveryOtp = order.status === 'Pending' && !!order.orderOTP && !!order.orderOTPExpires && new Date(order.orderOTPExpires).getTime() > now;
             if (order.products?.length > 0) {
                 order.itemsSummary = order.products.map(p => `${p.productId?.name || p.name || '[?Name?]'} (Qty: ${p.quantity}) @ ₹${p.priceAtOrder?.toFixed(2) || '?.??'}`).join('<br>');
             } else order.itemsSummary = 'No items found';
         });
         res.render('admin/manage-orders', { title: 'Manage All Orders', orders: orders, cancellationReasons: adminCancellationReasons });
     } catch (error) { next(error); }
 };
exports.admin_sendDirectDeliveryOtpByAdmin = async (req, res, next) => {
     try {
         const result = await this.order_generateAndSendDirectDeliveryOTPByAdmin(req.params.orderId);
         req.flash('success_msg', result.message + ' Ask customer for OTP.');
     } catch (error) { req.flash('error_msg', `Admin OTP Send Failed: ${error.message}`); }
     res.redirect('/admin/manage-orders');
 };
exports.admin_confirmDirectDeliveryByAdmin = async (req, res, next) => {
     const { otp } = req.body;
     if (!otp || !/^\d{6}$/.test(otp.trim())) { req.flash('error_msg', 'Enter 6-digit OTP.'); return res.redirect('/admin/manage-orders'); }
     try {
         const { order } = await this.order_confirmDirectDeliveryByAdmin(req.params.orderId, req.session.user._id, otp.trim(), res);
         req.flash('success_msg', `Order ${req.params.orderId} confirmed delivered by Admin.`);
     } catch (error) { req.flash('error_msg', `Admin Delivery Confirm Failed: ${error.message}`); }
     res.redirect('/admin/manage-orders');
 };
exports.admin_cancelOrderByAdmin = async (req, res, next) => {
     const { orderId } = req.params; const { reason } = req.body; const adminUserId = req.session.user._id;
     if (!reason || !adminCancellationReasons.includes(reason)) { req.flash('error_msg', 'Select valid admin reason.'); return res.redirect('/admin/manage-orders'); }
     const sessionDB = await mongoose.startSession(); sessionDB.startTransaction();
     try {
         const order = await Order.findById(orderId).populate('products.productId', 'name _id').populate('userId', 'email name').session(sessionDB);
         if (!order) { await sessionDB.abortTransaction(); sessionDB.endSession(); req.flash('error_msg', 'Order not found.'); return res.status(404).redirect('/admin/manage-orders'); }
         
         if (!['Pending', 'PaymentPending', 'PaymentFailed'].includes(order.status)) { 
            await sessionDB.abortTransaction(); sessionDB.endSession(); 
            req.flash('error_msg', `Order is '${order.status}'. Cannot cancel.`); return res.redirect('/admin/manage-orders'); 
         }

         if (order.status === 'Pending') { 
            const restorePromises = order.products.map(item => {
                const qty = Number(item.quantity); if (!item.productId?._id || isNaN(qty) || qty <= 0) { console.warn(`Admin Cancel: Invalid item ${item.productId?._id}/Qty ${item.quantity} O.ID ${orderId}.`); return Promise.resolve(); }
                return Product.updateOne({ _id: item.productId._id }, { $inc: { stock: qty, orderCount: -1 } }, { session: sessionDB }).catch(err => console.error(`Admin Cancel: Fail stock P.ID ${item.productId._id} O.ID ${orderId}: ${err.message}`));
            });
            await Promise.allSettled(restorePromises);
         } 
         
         order.status = 'Cancelled'; order.cancellationReason = reason; 
         order.cancellationAllowedUntil = undefined; // Clear this if cancelling
         await order.save({ session: sessionDB }); await sessionDB.commitTransaction();
         
         try { 
              const customerEmail = order.userEmail || order.userId?.email; const customerName = order.shippingAddress.name || order.userId?.name || 'Customer';
              if(customerEmail) {
                  const subject = `Order Cancelled - miniapp`; const text = `Your order (${order._id}) cancelled by admin. Reason: ${reason}.`;
                  let bodyLines = [`Order (#${order._id}) cancelled by admin.`, `<strong>Reason:</strong> ${reason}`, `Contact support if needed.`];
                  if (order.paymentMethod === 'Razorpay' && order.paymentVerified) {
                     bodyLines.push(`For this pre-paid order, a refund will be processed to your original payment method shortly.`);
                     console.warn(`ADMIN NOTE: Order ${orderId} was Razorpay-paid. Manual refund needed from Razorpay dashboard. Amount: ${order.totalAmount}`);
                  } else if (order.paymentMethod === 'Razorpay' && !order.paymentVerified) {
                     bodyLines.push('No payment was processed for this online order attempt.');
                  }
                  const html = generateEmailHtml({ recipientName: customerName, subject: subject, greeting: `Regarding Order #${order._id}`,
                      bodyLines: bodyLines,
                      buttonUrl: `${req.protocol}://${req.get('host')}/orders/my-orders`, buttonText: 'My Orders', companyName: 'miniapp' });
                  await sendEmail(customerEmail, subject, text, html);
              }
         } catch (emailError) { console.error(`Failed cancel email O.ID ${order._id}:`, emailError); }
         req.flash('success_msg', `Order ${orderId} cancelled by admin. Reason: ${reason}.`); res.redirect('/admin/manage-orders');
     } catch (error) {
         await sessionDB.abortTransaction(); console.error(`Error admin cancelling O.ID ${orderId}:`, error); req.flash('error_msg', 'Internal cancel error.'); res.redirect('/admin/manage-orders');
     } finally { if (sessionDB) sessionDB.endSession(); }
 };
exports.admin_getManageUsersPage = async (req, res, next) => {
     try {
         const users = await User.find({ _id: { $ne: req.session.user._id } }).select('name email role createdAt isVerified address.phone').sort({ createdAt: -1 }).lean();
         res.render('admin/manage-users', { title: 'Manage Registered Users', users: users });
     } catch (error) { next(error); }
 };
exports.admin_updateUserRole = async (req, res, next) => {
      const userId = req.params.id; const { role } = req.body; const allowedRoles = ['user', 'admin', 'seller'];
      if (!role || !allowedRoles.includes(role)) { req.flash('error_msg', 'Invalid role.'); return res.status(400).redirect('/admin/manage-users'); }
      if (userId === req.session.user._id.toString()) { req.flash('error_msg', 'Cannot change own role.'); return res.redirect('/admin/manage-users'); }
      try {
          const user = await User.findById(userId); if (!user) { req.flash('error_msg', 'User not found.'); return res.status(404).redirect('/admin/manage-users'); }
          user.role = role; await user.save(); req.flash('success_msg', `User ${user.email} role -> ${role}.`); res.redirect('/admin/manage-users');
      } catch (error) {
          if (error.name === 'CastError') { req.flash('error_msg', 'Invalid user ID.'); return res.status(400).redirect('/admin/manage-users'); }
          console.error(`Error updating role user ${userId}:`, error); req.flash('error_msg', 'Error updating role.'); res.redirect('/admin/manage-users');
      }
  };
exports.admin_removeUser = async (req, res, next) => {
      const userId = req.params.id;
      if (userId === req.session.user._id.toString()) { req.flash('error_msg', 'Cannot remove self.'); return res.redirect('/admin/manage-users'); }
      try {
          const user = await User.findById(userId); if (!user) { req.flash('error_msg', 'User not found.'); return res.status(404).redirect('/admin/manage-users'); }
          if (user.role === 'admin') { const adminCount = await User.countDocuments({ role: 'admin' }); if (adminCount <= 1) { req.flash('error_msg', 'Cannot remove last admin.'); return res.redirect('/admin/manage-users'); } }
          await User.deleteOne({ _id: userId }); req.flash('success_msg', `User ${user.email} removed.`); res.redirect('/admin/manage-users');
      } catch (error) {
          if (error.name === 'CastError') { req.flash('error_msg', 'Invalid user ID.'); return res.status(400).redirect('/admin/manage-users'); }
          console.error(`Error removing user ${userId}:`, error); req.flash('error_msg', 'Error removing user.'); res.redirect('/admin/manage-users');
      }
  };
exports.admin_getManageBannersPage = async (req, res, next) => {
    try {
        let bannerConfig = await BannerConfig.findOne({ configKey: 'mainBanners' }).lean() || { configKey: 'mainBanners', banners: [] };
        const displayBanners = Array.from({ length: 4 }).map((_, i) => bannerConfig.banners[i] || { imageUrl: '', linkUrl: '', title: '' });
        res.render('admin/manage-banners', { title: 'Manage Homepage Banners', bannerConfig: { ...bannerConfig, banners: displayBanners } });
    } catch (error) { console.error("Error fetching banner config:", error); next(error); }
};
exports.admin_updateBanners = async (req, res, next) => {
    const { imageUrl1, linkUrl1, title1, imageUrl2, linkUrl2, title2, imageUrl3, linkUrl3, title3, imageUrl4, linkUrl4, title4 } = req.body;
    const bannerInputs = [ { imageUrl: imageUrl1, linkUrl: linkUrl1, title: title1 }, { imageUrl: imageUrl2, linkUrl: linkUrl2, title: title2 }, { imageUrl: imageUrl3, linkUrl: linkUrl3, title: title3 }, { imageUrl: imageUrl4, linkUrl: linkUrl4, title: title4 } ];
    const urlPattern = /^https?:\/\/.+/; let validationError = false; const newBanners = [];
    for (let i = 0; i < bannerInputs.length; i++) {
        const { imageUrl, linkUrl, title } = bannerInputs[i]; const imgUrl = imageUrl?.trim(); const lnkUrl = linkUrl?.trim(); const ttl = title?.trim();
        if (imgUrl) {
            if (!urlPattern.test(imgUrl)) { req.flash('error_msg', `Banner ${i+1}: Invalid Image URL.`); validationError = true; }
            if (lnkUrl && !urlPattern.test(lnkUrl)) { req.flash('error_msg', `Banner ${i+1}: Invalid Link URL.`); validationError = true; }
            if (!validationError) newBanners.push({ imageUrl: imgUrl, linkUrl: lnkUrl || undefined, title: ttl || undefined });
        } else if (lnkUrl || ttl) { req.flash('error_msg', `Banner ${i+1}: Image URL required if Link or Title provided.`); validationError = true; }
    }
    if (validationError) {
        const displayBannersForError = Array.from({ length: 4 }).map((_, i) => bannerInputs[i]);
        return res.render('admin/manage-banners', { title: 'Manage Homepage Banners', bannerConfig: { banners: displayBannersForError } });
    }
    try {
        await BannerConfig.findOneAndUpdate( { configKey: 'mainBanners' }, { banners: newBanners, lastUpdatedBy: req.session.user._id }, { new: true, upsert: true, runValidators: true } );
        req.flash('success_msg', 'Homepage banners updated.'); res.redirect('/admin/manage-banners');
    } catch (error) {
        if (error.name === 'ValidationError') { req.flash('error_msg', `Validation Error: ${Object.values(error.errors).map(el => el.message).join(', ')}`); const displayBannersForError = Array.from({ length: 4 }).map((_, i) => bannerInputs[i]); return res.render('admin/manage-banners', { title: 'Manage Homepage Banners', bannerConfig: { banners: displayBannersForError } }); }
        console.error("Error updating banners:", error); req.flash('error_msg', 'Failed update banners (server error).'); res.redirect('/admin/manage-banners');
    }
};


// ============================
// Order Controller Functions (called internally or by other controllers)
// ============================

// Place COD Order
exports.order_placeCODOrder = async (req, res, next) => {
     const userId = req.session.user._id;
     const sessionDB = await mongoose.startSession();
     sessionDB.startTransaction({ readConcern: { level: 'snapshot' }, writeConcern: { w: 'majority' } });
     try {
         const user = await User.findById(userId).populate('cart.productId', 'name price imageUrl stock reviewStatus sellerId').session(sessionDB);
         if (!user) { await sessionDB.abortTransaction(); sessionDB.endSession(); req.flash('error_msg', 'User session lost. Login.'); return res.redirect('/auth/login'); }
         if (!user.cart || user.cart.length === 0) { await sessionDB.abortTransaction(); sessionDB.endSession(); req.flash('error_msg', 'Cart is empty.'); return res.redirect('/user/cart'); }
         if (!user.address?.name || !user.address.phone || !user.address.pincode || !user.address.cityVillage || !user.address.locality) { await sessionDB.abortTransaction(); sessionDB.endSession(); req.flash('error_msg', 'Shipping address incomplete.'); return res.redirect('/user/checkout'); }
         let orderProducts = []; let totalAmount = 0; const stockUpdates = []; let validationFailed = false; let validationMessage = 'Cart issue, review & try again.'; const itemsToRemove = [];
         for (const item of user.cart) {
             const qty = Number(item.quantity);
             if (isNaN(qty) || !Number.isInteger(qty) || qty <= 0) { validationMessage = 'Invalid quantity removed.'; itemsToRemove.push(item._id); validationFailed = true; continue; }
             if (!item.productId?._id) { validationMessage = 'Invalid product removed.'; itemsToRemove.push(item._id); validationFailed = true; continue; }
             const product = item.productId;
             if (product.reviewStatus !== 'approved') { validationMessage = `"${product.name}" unavailable, removed.`; itemsToRemove.push(item._id); validationFailed = true; continue; }
             if (product.stock < qty) { validationMessage = `Insufficient stock: "${product.name}" (Available: ${product.stock}). Update qty.`; validationFailed = true; break; }
             orderProducts.push({ productId: product._id, name: product.name, priceAtOrder: product.price, quantity: qty, imageUrl: product.imageUrl, sellerId: product.sellerId });
             totalAmount += product.price * qty; stockUpdates.push({ productId: product._id, qtyDecr: qty });
         }
         if (validationFailed) {
             if (itemsToRemove.length > 0) { await User.updateOne({ _id: userId }, { $pull: { cart: { _id: { $in: itemsToRemove } } } }).session(sessionDB); console.log(`Removed ${itemsToRemove.length} invalid items from cart user ${userId}`); }
             await sessionDB.abortTransaction(); sessionDB.endSession();
             const updatedUser = await User.findById(userId).select('cart').populate('cart.productId').lean(); req.session.user.cart = updatedUser ? updatedUser.cart.filter(i => i.productId).map(i => ({ productId: i.productId._id, quantity: i.quantity })) : []; await req.session.save();
             req.flash('error_msg', validationMessage); return res.redirect('/user/cart');
         }
         for (const update of stockUpdates) {
             const result = await Product.updateOne({ _id: update.productId, stock: { $gte: update.qtyDecr } }, { $inc: { stock: -update.qtyDecr, orderCount: 1 } }, { session: sessionDB });
             if (result.modifiedCount === 0) { await sessionDB.abortTransaction(); sessionDB.endSession(); req.flash('error_msg', `Checkout failed: Stock changed. Try again.`); return res.redirect('/user/cart'); }
         }
         const order = new Order({ userId: userId, userEmail: user.email, products: orderProducts, totalAmount: totalAmount, shippingAddress: user.address, paymentMethod: 'COD', status: 'Pending' });
         await order.save({ session: sessionDB }); user.cart = []; await user.save({ session: sessionDB }); await sessionDB.commitTransaction(); req.session.user.cart = []; await req.session.save();
         try {
              const subject = `Order Placed (COD) - miniapp`; const text = `Thank you for your order!`;
              const prodListHTML = order.products.map(p => `<li>${p.name} (Qty: ${p.quantity}) - ₹${p.priceAtOrder.toFixed(2)}</li>`).join('');
              const html = generateEmailHtml({ recipientName: user.name, subject: subject, greeting: `Order Confirmation #${order._id}`,
                   bodyLines: [`COD Order placed successfully.`, `<strong>ID:</strong> ${order._id}`, `<strong>Total:</strong> ₹${order.totalAmount.toFixed(2)}`, `<strong>Shipping To:</strong> ${order.shippingAddress.name}, ${order.shippingAddress.locality}, ${order.shippingAddress.pincode}`, `<h3 style="margin-top:15px;">Summary:</h3><ul>${prodListHTML}</ul>`, `You will be contacted for delivery confirmation.`],
                   buttonUrl: `${req.protocol}://${req.get('host')}/orders/my-orders`, buttonText: 'View Order Status', companyName: 'miniapp' });
              await sendEmail(user.email, subject, text, html);
         } catch (emailError) { console.error(`Failed sending COD order confirm email O.ID ${order._id}:`, emailError); }
         req.flash('success_msg', 'COD Order placed successfully!'); res.redirect('/orders/my-orders');
     } catch (error) {
         if (sessionDB.inTransaction()) await sessionDB.abortTransaction(); console.error("COD Order Placement Error:", error);
         let userErrorMessage = 'COD Order failed: server error. Try again.'; if (error.message?.includes('Stock changed')) userErrorMessage = error.message;
         req.flash('error_msg', userErrorMessage); res.redirect('/user/cart');
     } finally { if (sessionDB) await sessionDB.endSession(); }
};

// Create Razorpay Order Intent
exports.order_createRazorpayOrderIntent = async (req, res, next) => {
    const userId = req.session.user._id;
    try {
        const user = await User.findById(userId).populate('cart.productId', 'name price imageUrl stock reviewStatus');
        if (!user) return res.status(401).json({ success: false, message: 'User session lost. Please login.' });
        if (!user.cart || user.cart.length === 0) return res.status(400).json({ success: false, message: 'Your cart is empty.' });
        if (!user.address?.name || !user.address.phone || !user.address.pincode) return res.status(400).json({ success: false, message: 'Shipping address is incomplete.' });

        let orderProducts = []; let totalAmount = 0;
        for (const item of user.cart) {
            const product = item.productId;
            if (!product || product.reviewStatus !== 'approved' || product.stock < item.quantity) {
                return res.status(400).json({ success: false, message: `Problem with item "${product?.name || 'Unknown'}": It might be out of stock or unavailable. Please review your cart.` });
            }
            orderProducts.push({ productId: product._id, name: product.name, priceAtOrder: product.price, quantity: item.quantity, imageUrl: product.imageUrl, sellerId: product.sellerId });
            totalAmount += product.price * item.quantity;
        }

        if (totalAmount <= 0) return res.status(400).json({ success: false, message: 'Total amount must be greater than zero.' });

        const internalOrder = new Order({
            userId: userId,
            userEmail: user.email,
            products: orderProducts,
            totalAmount: totalAmount,
            shippingAddress: user.address,
            paymentMethod: 'Razorpay',
            status: 'PaymentPending',
        });
        await internalOrder.save();

        const razorpayAmount = Math.round(totalAmount * 100);
        const razorpayOrderOptions = {
            amount: razorpayAmount,
            currency: 'INR',
            receipt: internalOrder._id.toString(),
            notes: {
                internal_order_id: internalOrder._id.toString(),
                customer_email: user.email
            }
        };
        const rzpOrder = await createRazorpayOrder(razorpayAmount, internalOrder._id.toString(), razorpayOrderOptions.notes);

        internalOrder.razorpayOrderId = rzpOrder.id;
        await internalOrder.save();
        
        res.status(200).json({
            success: true,
            message: 'Razorpay order created',
            orderId: internalOrder._id, 
            razorpayOrderId: rzpOrder.id,
            amount: rzpOrder.amount, 
            currency: rzpOrder.currency,
            keyId: RAZORPAY_KEY_ID,
            userName: user.name,
            userEmail: user.email,
            userPhone: user.address.phone
        });

    } catch (error) {
        console.error("Create Razorpay Order Intent Error:", error);
        if (error.message && error.message.includes("Razorpay not initialized")) {
             return res.status(503).json({ success: false, message: 'Payment service unavailable. Please try again later or select COD.' });
        }
        let userMessage = 'Could not initiate payment. Please try again.';
        if (error.statusCode && error.error && error.error.description) { 
            userMessage = `Payment Gateway Error: ${error.error.description}`;
            console.error("Razorpay API Error details:", error.error);
        } else if (error.response && error.response.data && error.response.data.message) { 
             userMessage = error.response.data.message;
        } else if (error.message) {
             userMessage = error.message;
        }
        return res.status(500).json({ success: false, message: userMessage });
    }
};

// Verify Razorpay Payment
exports.order_verifyRazorpayPayment = async (req, res, next) => {
    const { razorpay_order_id, razorpay_payment_id, razorpay_signature, internal_order_id } = req.body;
    const userId = req.session.user._id;

    if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature || !internal_order_id) {
        return res.status(400).json({ success: false, message: "Missing payment verification details." });
    }

    const sessionDB = await mongoose.startSession();
    sessionDB.startTransaction({ readConcern: { level: 'snapshot' }, writeConcern: { w: 'majority' } });

    try {
        const isSignatureValid = verifyRazorpayPayment(razorpay_order_id, razorpay_payment_id, razorpay_signature);

        if (!isSignatureValid) {
            await Order.findByIdAndUpdate(internal_order_id, 
                { 
                    status: 'PaymentFailed', 
                    paymentVerified: false, 
                    razorpayPaymentId: razorpay_payment_id, 
                    razorpayOrderId: razorpay_order_id, // Store Razorpay Order ID on failure too
                    razorpaySignature: "VERIFICATION_FAILED",
                    cancellationReason: "Payment signature verification failed."
                }, 
                { session: sessionDB }
            );
            await sessionDB.commitTransaction(); 
            return res.status(400).json({ success: false, message: "Payment verification failed. Invalid signature." });
        }

        const order = await Order.findOne({ _id: internal_order_id, razorpayOrderId: razorpay_order_id, userId: userId }).session(sessionDB);
        if (!order) {
            await sessionDB.abortTransaction();
            console.error(`Order not found for internal_order_id: ${internal_order_id} and rzp_order_id: ${razorpay_order_id}`);
            // Attempt to update the failed payment even if the order with user ID match fails
            await Order.findByIdAndUpdate(internal_order_id, { status: 'PaymentFailed', cancellationReason: 'Order mismatch during verification.'});
            return res.status(404).json({ success: false, message: "Order not found for verification." });
        }
        if (order.status === 'Pending' && order.paymentVerified) {
             await sessionDB.commitTransaction();
             console.log(`Razorpay payment for order ${order._id} already verified.`);
             return res.status(200).json({ success: true, message: "Payment already verified.", orderId: order._id });
        }
        if (order.status !== 'PaymentPending') {
            await sessionDB.abortTransaction();
            return res.status(400).json({ success: false, message: `Order status is ${order.status}, cannot verify payment.` });
        }
        
        order.status = 'Pending'; 
        order.razorpayPaymentId = razorpay_payment_id;
        order.razorpaySignature = razorpay_signature;
        order.paymentVerified = true;
        order.cancellationReason = undefined; // Clear any previous failure reasons

        const stockUpdates = order.products.map(item => ({ productId: item.productId, qtyDecr: item.quantity }));
        for (const update of stockUpdates) {
            const productResult = await Product.updateOne(
                { _id: update.productId, stock: { $gte: update.qtyDecr } },
                { $inc: { stock: -update.qtyDecr, orderCount: 1 } },
                { session: sessionDB }
            );
            if (productResult.modifiedCount === 0) {
                order.status = 'PaymentFailed'; // Set to PaymentFailed
                order.cancellationReason = `Stock unavailable for P.ID ${update.productId} after successful payment. REFUND REQUIRED.`;
                order.paymentVerified = true; // Payment was successful with Razorpay, but order failed due to stock.
                await order.save({ session: sessionDB });
                await sessionDB.commitTransaction(); // COMMIT transaction to save PaymentFailed status
                console.error(`CRITICAL: Stock unavailable for ${update.productId} after successful Razorpay payment for order ${order._id}. Order marked PaymentFailed. Manual refund needed.`);
                // This is critical and needs admin attention for refund
                // TODO: Send admin notification
                return res.status(500).json({ success: false, message: "Order processing failed due to stock issue post-payment. Please contact support immediately for refund."});
            }
        }
        await order.save({ session: sessionDB }); // This sets the cancellationAllowedUntil via pre-save hook
        
        const user = await User.findById(userId).session(sessionDB);
        if (user) {
            user.cart = [];
            await user.save({ session: sessionDB });
            req.session.user.cart = [];
            await req.session.save();
        }
        
        await sessionDB.commitTransaction();

        try {
            const subject = `Payment Successful - Order Placed - miniapp`;
            const prodListHTML = order.products.map(p => `<li>${p.name} (Qty: ${p.quantity}) - ₹${p.priceAtOrder.toFixed(2)}</li>`).join('');
            const html = generateEmailHtml({
                recipientName: order.shippingAddress.name, subject: subject,
                greeting: `Order Confirmed #${order._id}`,
                bodyLines: [
                    `Your payment for order #${order._id} was successful.`,
                    `<strong>Total Amount:</strong> ₹${order.totalAmount.toFixed(2)} (Paid via Razorpay)`,
                    `<strong>Razorpay Payment ID:</strong> ${razorpay_payment_id}`,
                    `<strong>Shipping To:</strong> ${order.shippingAddress.name}, ${order.shippingAddress.locality}, ${order.shippingAddress.pincode}`,
                    `<h3 style="margin-top:15px;">Order Summary:</h3><ul>${prodListHTML}</ul>`,
                    `Your order is now being processed.`
                ],
                buttonUrl: `${req.protocol}://${req.get('host')}/orders/my-orders`, buttonText: 'View Your Orders',
                companyName: 'miniapp'
            });
            await sendEmail(order.userEmail, subject, `Payment for order ${order._id} successful. Total: Rs.${order.totalAmount.toFixed(2)}`, html);
        } catch (emailError) {
            console.error(`Failed sending Razorpay order confirm email O.ID ${order._id}:`, emailError);
        }
        res.status(200).json({ success: true, message: "Payment verified successfully. Order placed!", orderId: order._id });
    } catch (error) {
        if (sessionDB.inTransaction()) await sessionDB.abortTransaction();
        console.error("Verify Razorpay Payment Error:", error);
        try {
           await Order.findByIdAndUpdate(internal_order_id, { 
               status: 'PaymentFailed', 
               paymentVerified: false,
               cancellationReason: "Payment verification system error." 
            });
        } catch (updateError) {
           console.error("Failed to mark order as PaymentFailed during Razorpay verification error:", updateError);
        }
        res.status(500).json({ success: false, message: "Error verifying payment. " + (error.message || "Internal Server Error") });
    } finally {
        if(sessionDB) await sessionDB.endSession();
    }
};

// --- NEW: Mark Payment as Failed (called by frontend on Razorpay payment.failed event) ---
exports.order_markPaymentFailed = async (req, res, next) => {
    const { internal_order_id } = req.params; // ID from route parameter
    const { razorpay_payment_id, razorpay_order_id, reason = "Payment failed on Razorpay client-side." } = req.body;
    const userId = req.session.user._id;

    if (!internal_order_id) {
        return res.status(400).json({ success: false, message: "Internal order ID is required." });
    }

    try {
        const order = await Order.findOne({ _id: internal_order_id, userId: userId });

        if (!order) {
            console.warn(`Payment Failed Hook: Order ${internal_order_id} not found for user ${userId}.`);
            return res.status(404).json({ success: false, message: "Order not found." });
        }

        // Only update if it's in PaymentPending, to avoid overwriting other states like already 'Cancelled'
        if (order.status === 'PaymentPending') {
            order.status = 'PaymentFailed';
            order.razorpayPaymentId = razorpay_payment_id || order.razorpayPaymentId; // Keep existing if new not provided
            order.razorpayOrderId = razorpay_order_id || order.razorpayOrderId;     // Keep existing if new not provided
            order.paymentVerified = false;
            order.cancellationReason = reason;
            await order.save();
            console.log(`Order ${internal_order_id} marked as PaymentFailed by user ${userId}. Razorpay Order ID: ${order.razorpayOrderId}`);
            return res.status(200).json({ success: true, message: "Order status updated to PaymentFailed." });
        } else {
            console.log(`Payment Failed Hook: Order ${internal_order_id} status is already '${order.status}'. Not updating.`);
            return res.status(200).json({ success: false, message: `Order is already in '${order.status}' state.` });
        }
    } catch (error) {
        console.error(`Error in order_markPaymentFailed for order ${internal_order_id}:`, error);
        return res.status(500).json({ success: false, message: "Server error while updating order status." });
    }
};

exports.order_cancelOrder = async (req, res, next) => {
     const orderId = req.params.id; const userId = req.session.user._id; const sessionDB = await mongoose.startSession(); sessionDB.startTransaction({ writeConcern: { w: 'majority' }});
     try {
        const order = await Order.findOne({
             _id: orderId,
             userId: userId,
             status: { $in: ['Pending', 'PaymentPending', 'PaymentFailed'] }, // User can cancel PaymentFailed too
             $or: [ 
                 { cancellationAllowedUntil: { $exists: false } }, 
                 { cancellationAllowedUntil: { $gt: Date.now() } }
             ]
         }).populate('products.productId', '_id name').populate('userId', 'name').session(sessionDB);

         if (!order) {
            await sessionDB.abortTransaction(); sessionDB.endSession();
            const checkOrder = await Order.findById(orderId).select('status cancellationAllowedUntil').lean();
            let reasonMsg = 'Order not found or cannot be cancelled at this stage.';
            if (checkOrder && checkOrder.status === 'Pending' && checkOrder.cancellationAllowedUntil && new Date(checkOrder.cancellationAllowedUntil).getTime() <= Date.now()) {
                reasonMsg = 'Cancellation window has expired for this order.';
            }
            req.flash('error_msg', reasonMsg); return res.redirect('/orders/my-orders');
         }

        if (order.status === 'Pending') { // Only for 'Pending' as stock was debited.
            console.log(`User Cancel (Order ID ${orderId}): Restoring stock for order in 'Pending' status.`);
            const restorePromises = order.products.map(item => {
                const qty = Number(item.quantity); if (!item.productId?._id || isNaN(qty) || qty <= 0) { console.warn(`User Cancel: Invalid item ${item.productId?._id}/Qty ${item.quantity} O.ID ${orderId}.`); return Promise.resolve(); }
                return Product.updateOne({ _id: item.productId._id }, { $inc: { stock: qty, orderCount: -1 } }, { session: sessionDB }).catch(err => console.error(`User Cancel: Fail stock P.ID ${item.productId._id} O.ID ${orderId}: ${err.message}`));
            });
            await Promise.allSettled(restorePromises); console.log(`User Cancel: Stock restore complete O.ID ${orderId}.`);
        } else { // For PaymentPending or PaymentFailed, stock wasn't debited or was already handled if previously failed.
            console.log(`User Cancel (Order ID ${orderId}): Order was in ${order.status}, no stock restoration needed.`);
        }

        order.status = 'Cancelled';
        order.cancellationReason = "Cancelled by customer";
        order.cancellationAllowedUntil = undefined;
        await order.save({ session: sessionDB }); await sessionDB.commitTransaction();

         try {
              const subject = `Order Cancelled - miniapp`; let text = `Your order (#${order._id}) has been cancelled.`;
              let emailBodyLines = [
                  `Your order (#${order._id}) has been cancelled as per your request.`,
                  `Hope to serve you soon!`
                ];
              // Add refund note only if it was a successfully paid order now being cancelled.
              if (order.paymentMethod === 'Razorpay' && order.paymentVerified && order.status !== 'Pending') { // status becomes Cancelled here, check original verify state
                 text += ' A refund for this pre-paid order will be processed by site administrators if applicable.';
                 emailBodyLines.splice(1,0, 'If this was a pre-paid order, any applicable refund will be processed by site administrators.');
                 console.warn(`USER CANCELLATION NOTE: Order ${orderId} was Razorpay-paid and verified. Manual refund potentially needed if cancellation occurred after payment but before fulfillment via admin processing.`);
              }
              const html = generateEmailHtml({ recipientName: order.userId?.name || req.session.user.name, subject: subject, greeting: 'Order Cancellation Confirmation', bodyLines: emailBodyLines, buttonUrl: `${req.protocol}://${req.get('host')}/`, buttonText: 'Continue Shopping', companyName: 'miniapp' });
             await sendEmail(order.userEmail, subject, text, html);
          } catch (emailError){ console.error(`Failed sending cancel confirm email O.ID ${order._id}:`, emailError); }
         req.flash('success_msg', 'Order cancelled successfully.'); res.redirect('/orders/my-orders');
     } catch (error) {
          if (sessionDB.inTransaction()) await sessionDB.abortTransaction(); console.error("User Order Cancellation Error:", error); req.flash('error_msg', 'Failed to cancel order (internal error).'); res.redirect('/orders/my-orders');
     } finally { if (sessionDB) await sessionDB.endSession(); }
 };

exports.order_getMyOrders = async (req, res, next) => {
     try {
         const orders = await Order.find({ userId: req.session.user._id }).select('-__v').sort({ orderDate: -1 }).populate('products.productId', 'name imageUrl _id price').lean();
         const now = Date.now();
         orders.forEach(order => {
             order.isCancellable = (order.status === 'Pending' && order.cancellationAllowedUntil && now < new Date(order.cancellationAllowedUntil).getTime()) ||
                                   (order.paymentMethod === 'Razorpay' && ['PaymentPending', 'PaymentFailed'].includes(order.status));
             order.showDeliveryOtp = order.status === 'Pending' && !!order.orderOTP && !!order.orderOTPExpires && new Date(order.orderOTPExpires).getTime() > now;
         });
         res.render('user/my-orders', { title: 'My Orders', orders: orders });
     } catch (error) { console.error("Error fetching user orders:", error); next(error); }
 };

// ... (order_generateAndSendDirectDeliveryOTPByAdmin and other admin/seller order helpers - NO CHANGES to these internal logic functions)
exports.order_getMyOrders = async (req, res, next) => {
     try {
         const orders = await Order.find({ userId: req.session.user._id }).select('-__v').sort({ orderDate: -1 }).populate('products.productId', 'name imageUrl _id price').lean();
         const now = Date.now();
         orders.forEach(order => {
             order.isCancellable = (order.status === 'Pending' && order.cancellationAllowedUntil && now < new Date(order.cancellationAllowedUntil).getTime()) ||
                                   (order.paymentMethod === 'Razorpay' && ['PaymentPending', 'PaymentFailed'].includes(order.status));
             order.showDeliveryOtp = order.status === 'Pending' && !!order.orderOTP && !!order.orderOTPExpires && new Date(order.orderOTPExpires).getTime() > now;
         });

         // --- MODIFIED: Pass query parameters to the template ---
         const paymentStatus = req.query.payment; // e.g., "success"
         const processedOrderId = req.query.order_id; // The ID of the order processed

         res.render('user/my-orders', { 
             title: 'My Orders', 
             orders: orders,
             paymentStatus: paymentStatus,     // Pass paymentStatus
             processedOrderId: processedOrderId  // Pass processedOrderId
         });
         // --- END MODIFICATION ---

     } catch (error) { console.error("Error fetching user orders:", error); next(error); }
 };

exports.order_generateAndSendDirectDeliveryOTPBySeller = async (orderId, sellerId) => {
    try {
        const order = await Order.findById(orderId).populate('products.productId', 'sellerId');
        if (!order) throw new Error('Order not found.'); if (order.status !== 'Pending') throw new Error(`OTP only for 'Pending' status (is ${order.status}).`);
        if (!order.products.some(p => p.productId?.sellerId?.toString() === sellerId.toString())) throw new Error('Permission Denied: Order irrelevant.');
        const otp = generateOTP(); const otpExpires = setOTPExpiration(5); order.orderOTP = otp; order.orderOTPExpires = otpExpires; await order.save();
        const user = await User.findById(order.userId).select('email');
        console.log(`SELLER (${sellerId}) generated OTP O.ID ${orderId}: ${otp} (User: ${user?.email || '[NA]'}).`);
        return { success: true, message: `OTP generated for order ${orderId}.` };
    } catch (error) { console.error(`Seller OTP Gen Error O.ID ${orderId} by Seller ${sellerId}:`, error); throw error; }
};
exports.order_confirmDirectDeliveryByAdmin = async (orderId, adminUserId, providedOtp, resForHelper = null) => { 
     try {
         const order = await Order.findOne({ _id: orderId, status: 'Pending', orderOTP: providedOtp, orderOTPExpires: { $gt: Date.now() } });
         if (!order) { const check = await Order.findById(orderId).select('status orderOTP orderOTPExpires'); if (!check) throw new Error('Order not found.'); if (check.status !== 'Pending') throw new Error(`Order is ${check.status}.`); if (check.orderOTP !== providedOtp) throw new Error('Invalid OTP.'); if (!check.orderOTPExpires || check.orderOTPExpires <= Date.now()) throw new Error('Expired OTP.'); throw new Error('OTP verify failed.'); }
         order.status = 'Delivered'; order.receivedByDate = new Date(); order.orderOTP = undefined; order.orderOTPExpires = undefined; order.cancellationAllowedUntil = undefined; await order.save();
         console.log(`O.ID ${orderId} confirmed delivered by ADMIN ${adminUserId}`);
         try { 
            const subject = `Order Delivered - miniapp!`; const deliveredDate = resForHelper?.locals?.formatDateIST(order.receivedByDate) || new Date(order.receivedByDate).toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' });
            const text = `Order ${order._id} delivered on ${deliveredDate}. Confirmed by Admin.`;
            const html = generateEmailHtml({ recipientName: order.shippingAddress.name, subject: subject, greeting: `Order Delivered!`, bodyLines: [`Order #${order._id} delivered.`, `<strong>Delivered On:</strong> ${deliveredDate}. Confirmed by admin.`], buttonUrl: `${resForHelper?.req?.protocol || 'http'}://${resForHelper?.req?.get('host') || 'localhost'}/orders/my-orders`, buttonText: 'View Order Details', companyName: 'miniapp' });
            await sendEmail(order.userEmail, subject, text, html);
         } catch (emailError){ console.error(`Admin Confirm: Fail send email O.ID ${order._id}:`, emailError); }
         return { success: true, order: order };
     } catch (error) { console.error(`Admin Confirm OTP Error O.ID ${orderId} by Admin ${adminUserId}:`, error); throw error; }
  };
exports.order_confirmDirectDeliveryBySeller = async (orderId, sellerId, providedOtp, resForHelper = null) => {
     try {
         const order = await Order.findOne({ _id: orderId, status: 'Pending', orderOTP: providedOtp, orderOTPExpires: { $gt: Date.now() } }).populate('products.productId', 'sellerId');
         if (!order) { const check = await Order.findById(orderId).select('status orderOTP orderOTPExpires'); if (!check) throw new Error('Order not found.'); if (check.status !== 'Pending') throw new Error(`Order is ${check.status}.`); if (check.orderOTP !== providedOtp) throw new Error('Invalid OTP.'); if (!check.orderOTPExpires || check.orderOTPExpires <= Date.now()) throw new Error('Expired OTP.'); throw new Error('OTP verify failed.'); }
         if (!order.products.some(p => p.productId?.sellerId?.toString() === sellerId.toString())) { console.warn(`Seller ${sellerId} attempt confirm unrelated O.ID ${orderId}.`); throw new Error('Permission Denied: Irrelevant order.'); }
         order.status = 'Delivered'; order.receivedByDate = new Date(); order.orderOTP = undefined; order.orderOTPExpires = undefined; order.cancellationAllowedUntil = undefined; await order.save();
         console.log(`O.ID ${orderId} confirmed delivered by SELLER ${sellerId}`);
         try { 
            const subject = `Order Delivered - miniapp`; const deliveredDate = resForHelper?.locals?.formatDateIST(order.receivedByDate) || new Date(order.receivedByDate).toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' });
            const text = `Order ${order._id} delivered on ${deliveredDate}. Confirmed by Seller.`;
            const html = generateEmailHtml({ recipientName: order.shippingAddress.name, subject: subject, greeting: `Order Delivered!`, bodyLines: [`Order #${order._id} delivered.`, `<strong>Delivered On:</strong> ${deliveredDate}. Confirmed by seller.`], buttonUrl: `${resForHelper?.req?.protocol || 'http'}://${resForHelper?.req?.get('host') || 'localhost'}/orders/my-orders`, buttonText: 'View Order Details', companyName: 'miniapp' });
            await sendEmail(order.userEmail, subject, text, html);
         } catch (emailError){ console.error(`Seller Confirm: Fail send email O.ID ${order._id}:`, emailError); }
         return { success: true, order: order };
     } catch (error) { console.error(`Seller Confirm OTP Error O.ID ${orderId} by Seller ${sellerId}:`, error); throw error; }
 };


// ============================
// Product Controller Functions
// ============================
// ... (product_getProducts, product_getProductDetails, etc. - NO CHANGES to these) ...
const escapeRegex = (string) => string.replace(/[-\[\]{}()*+?.,\\^$|#\s]/g, '\\$&');

exports.product_getProducts = async (req, res, next) => { 
  try {
    const searchTerm = req.query.search || ''; const categoryFilter = req.query.category || '';
    let query = { reviewStatus: 'approved', stock: { $gt: 0 } }; let sort = { createdAt: -1 }; const projection = {};
    if (searchTerm) { const regex = new RegExp(escapeRegex(searchTerm), 'i'); query.$or = [ { name: regex }, { category: regex } ]; console.log(`Regex Search Query: ${JSON.stringify(query)}`); }
    else if (categoryFilter && categoryNames.includes(categoryFilter)) { query.category = categoryFilter; }
    else if (categoryFilter) { console.warn(`Invalid cat filter on /products: ${categoryFilter}`); }
    const products = await Product.find(query, projection).sort(sort).lean();
    let pageTitle = 'Products';
    if (searchTerm) pageTitle = `Search: "${searchTerm}"`;
    else if (categoryFilter && categoryNames.includes(categoryFilter)) pageTitle = `Category: ${categoryFilter}`;
    res.render('products/index', { title: pageTitle, products: products, searchTerm: searchTerm, selectedCategory: categoryFilter, displayCategories: categories });
  } catch (error) { console.error("Error fetching products:", error); next(error); }
};

exports.product_getProductDetails = async (req, res, next) => {
  try {
    const product = await Product.findById(req.params.id).populate('sellerId', 'name email').lean();
    if (!product) { const err = new Error('Product not found'); err.status = 404; return next(err); }
    const isApproved = product.reviewStatus === 'approved'; const user = req.session.user;
    const isAdmin = user?.role === 'admin'; const isOwner = user && product.sellerId?._id && user._id.toString() === product.sellerId._id.toString();
    if (!isApproved && !isAdmin && !isOwner) { const err = new Error('Product unavailable'); err.status = 404; return next(err); }
    let userRating = null; if (user) userRating = product.ratings?.find(r => r.userId?.toString() === user._id.toString())?.rating || null;
    const ratingCounts = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 }; let totalRatings = 0;
    if (product.ratings?.length > 0) { totalRatings = product.ratings.length; product.ratings.forEach(r => { if (r.rating && ratingCounts[r.rating] !== undefined) ratingCounts[r.rating]++; }); }
    res.render('products/detail', { title: product.name, product: product, isApproved: isApproved, isAdminView: isAdmin, isOwnerView: isOwner, userRating: userRating, userCanRate: !!user, ratingCounts: ratingCounts, totalRatings: product.numReviews || totalRatings });
  } catch (error) { if (error.name === 'CastError') { const err = new Error('Invalid Product ID'); err.status = 404; return next(err); } next(error); }
};

exports.product_rateProduct = async (req, res, next) => {
     const { rating } = req.body; const productId = req.params.id; const userId = req.session.user._id;
     if (!rating || isNaN(Number(rating)) || rating < 1 || rating > 5) { req.flash('error_msg', 'Valid rating 1-5 required.'); return res.redirect('back'); }
     try {
         const product = await Product.findById(productId); if (!product) { req.flash('error_msg', 'Product not found.'); return res.status(404).redirect('/'); }
         const existingIndex = product.ratings.findIndex(r => r.userId?.toString() === userId.toString());
         if (existingIndex > -1) product.ratings[existingIndex].rating = Number(rating);
         else product.ratings.push({ userId, rating: Number(rating) });
         await product.save(); req.flash('success_msg', 'Rating submitted!'); res.redirect(`/products/${productId}`);
     } catch (error) { if (error.name === 'CastError') { req.flash('error_msg', 'Invalid product ID.'); return res.status(400).redirect('/'); } console.error("Error rating product:", error); next(error); }
 };

exports.product_getProductSuggestions = async (req, res, next) => {
     const searchTerm = req.query.q; const limit = 8;
     if (!searchTerm || searchTerm.trim().length < 2) return res.json([]);
     try {
         const regex = new RegExp(escapeRegex(searchTerm), 'i');
         const query = { $or: [ { name: regex }, { category: regex } ], reviewStatus: 'approved', stock: { $gt: 0 } };
         const suggestions = await Product.find(query).select('_id name imageUrl').limit(limit).sort({ name: 1 }).lean();
         res.json(suggestions);
     } catch (error) { console.error("Error fetching suggestions:", error); res.status(500).json({ error: 'Failed to fetch' }); }
 };


// ============================
// User Controller Functions
// ============================
// ... (user_getUserProfilePage, user_updateUserName, etc. - NO CHANGES to these) ...
exports.user_getUserProfilePage = async (req, res, next) => {
    try {
        const user = await User.findById(req.session.user._id).select('name email role address createdAt').lean();
        if (!user) { console.warn(`User not in DB, active session: ${req.session.user._id}`); req.flash('error_msg', 'Invalid session. Login.'); return req.session.destroy(() => res.redirect('/auth/login')); }
        res.render('user/profile', { title: 'My Profile', user: user });
    } catch (error) { next(error); }
};
exports.user_updateUserName = async (req, res, next) => {
     const { name } = req.body; const userId = req.session.user._id;
     if (!name || typeof name !== 'string' || name.trim().length < 2) { req.flash('error_msg', 'Valid name >= 2 chars required.'); return res.redirect('/user/profile'); }
     try {
         const user = await User.findById(userId); if (!user) { req.flash('error_msg', 'User not found. Login.'); return res.redirect('/auth/login'); }
         user.name = name.trim(); await user.save(); req.session.user.name = user.name; await req.session.save();
         req.flash('success_msg', 'Name updated.'); res.redirect('/user/profile');
     } catch (error) {
         if (error.name === 'ValidationError') { req.flash('error_msg', `Validation: ${Object.values(error.errors).map(el => el.message).join(' ')}`); return res.redirect('/user/profile'); }
         console.error("Error updating name:", error); next(error);
     }
 };
exports.user_saveAddress = async (req, res, next) => {
     const { name, phone, pincode, locality, cityVillage, landmarkNearby, source, state, district, mandal } = req.body; const userId = req.session.user._id;
     const redirectPath = (source === 'profile') ? '/user/profile' : '/user/checkout';
     let errors = [];
     if (!name || !phone || !pincode || !locality || !cityVillage) errors.push('Req: Name, Phone, Pincode, Locality, House/Area.');
     if (phone && !/^\d{10,15}$/.test(phone.trim())) errors.push('Valid Phone (10-15 digits).');
     if (pincode && !/^\d{6}$/.test(pincode.trim())) errors.push('Valid 6-digit Pincode.');
     if (!state || !district || !mandal) errors.push('State/Dist/Mandal unknown. Verify Pincode.');
     if (state && !locality?.trim()) errors.push('Select Locality after entering Pincode.');
     if (errors.length > 0) { req.flash('error_msg', errors.join(' ')); req.session.addressFormData = req.body; return res.redirect(redirectPath); }
     try {
         const user = await User.findById(userId); if (!user) { req.flash('error_msg', 'User not found.'); delete req.session.addressFormData; return res.redirect('/auth/login'); }
         user.address = { name: name.trim(), phone: phone.trim(), pincode: pincode.trim(), locality: locality.trim(), cityVillage: cityVillage.trim(), landmarkNearby: landmarkNearby?.trim(), mandal: mandal?.trim(), district: district?.trim(), state: state?.trim() };
         await user.save(); req.session.user.address = user.address.toObject(); await req.session.save(); delete req.session.addressFormData;
         req.flash('success_msg', 'Address saved.'); res.redirect(redirectPath);
     } catch (error) {
         delete req.session.addressFormData;
         if (error.name === 'ValidationError') { let valErrors = Object.values(error.errors).map(el => el.message); if (!state || !district || !mandal || !locality) valErrors.unshift('Pincode/Locality missing.'); req.flash('error_msg', `Validation: ${valErrors.join(' ')}`); req.session.addressFormData = req.body; return res.redirect(redirectPath); }
         next(error);
     }
 };
exports.user_getCart = async (req, res, next) => {
     try {
         const user = await User.findById(req.session.user._id).populate('cart.productId', 'name price imageUrl stock _id reviewStatus').lean();
         if (!user) { console.warn(`User not found getCart: ${req.session.user._id}`); req.flash('error_msg', 'User not found.'); return req.session.destroy(() => res.redirect('/auth/login')); }
         let cartTotal = 0; let populatedCart = []; let cartUpdated = false;
         if (user.cart?.length > 0) {
              populatedCart = user.cart.map(item => {
                  if (!item.productId?._id) { console.warn(`Cart invalid prod ID user: ${user.email}`); cartUpdated = true; return null; }
                  if (item.productId.reviewStatus !== 'approved') { console.warn(`Prod ${item.productId.name} (${item.productId._id}) not approved.`); cartUpdated = true; return null; }
                 const subtotal = item.productId.price * item.quantity; cartTotal += subtotal;
                 return { productId: item.productId._id, name: item.productId.name, price: item.productId.price, imageUrl: item.productId.imageUrl, stock: item.productId.stock, quantity: item.quantity, subtotal: subtotal };
              }).filter(item => item !== null);
              if (cartUpdated) {
                  req.session.user.cart = populatedCart.map(item => ({ productId: item.productId, quantity: item.quantity }));
                  await req.session.save(); console.log(`Session cart updated user ${user.email}.`);
              }
          }
         res.render('user/cart', { title: 'Your Shopping Cart', cart: populatedCart, cartTotal: cartTotal });
       } catch (error) { next(error); }
 };
exports.user_addToCart = async (req, res, next) => { 
     const { productId, quantity = 1 } = req.body; const userId = req.session.user._id; const numQuantity = parseInt(quantity, 10);
     if (!productId || !mongoose.Types.ObjectId.isValid(productId) || isNaN(numQuantity) || numQuantity < 1) { req.flash('error_msg', 'Invalid product/quantity.'); return res.redirect(req.headers.referer || '/'); }
     try {
         const [user, product] = await Promise.all([ User.findById(userId), Product.findById(productId).select('name stock reviewStatus') ]);
         if (!user) { req.flash('error_msg', 'User session error.'); return res.redirect('/auth/login'); }
         if (!product) { req.flash('error_msg', 'Product not found.'); return res.redirect(req.headers.referer || '/'); }
         if (product.reviewStatus !== 'approved') { req.flash('error_msg', `"${product.name}" unavailable.`); return res.redirect(req.headers.referer || '/'); }
         if (product.stock <= 0) { req.flash('error_msg', `${product.name} out of stock.`); return res.redirect(req.headers.referer || '/'); }
         const existIndex = user.cart.findIndex(i => i.productId.toString() === productId);
         if (existIndex > -1) {
             const newQty = user.cart[existIndex].quantity + numQuantity;
             if (product.stock < newQty) { req.flash('error_msg', `Cannot add ${numQuantity} more ${product.name}. Max stock: ${product.stock} (You have ${user.cart[existIndex].quantity}).`); return res.redirect(req.headers.referer || `/products/${productId}`); }
             user.cart[existIndex].quantity = newQty;
         } else {
             if (product.stock < numQuantity) { req.flash('error_msg', `Insufficient stock: ${product.name}. Only ${product.stock} avail.`); return res.redirect(req.headers.referer || `/products/${productId}`); }
             user.cart.push({ productId, quantity: numQuantity });
         }
         await user.save(); req.session.user.cart = user.cart.map(i => ({ productId: i.productId, quantity: i.quantity })); await req.session.save();
         req.flash('success_msg', `${product.name} added to cart!`);
         if(req.query.redirectTo === 'checkout') { return res.redirect('/user/checkout'); } 
         else { return res.redirect('/user/cart'); } 
     } catch (error) { if (error.name === 'CastError') { req.flash('error_msg', 'Invalid product ID.'); return res.redirect('/'); } console.error("Add Cart Error:", error); next(error); }
 };
exports.user_addToCartAjax = async (req, res, next) => { 
     const { productId, quantity = 1 } = req.body; const userId = req.session.user._id; const numQuantity = parseInt(quantity, 10);
     if (!productId || !mongoose.Types.ObjectId.isValid(productId)) return res.status(400).json({ success: false, message: 'Invalid product ID.' });
     if (isNaN(numQuantity) || numQuantity < 1) return res.status(400).json({ success: false, message: 'Invalid quantity.' });
     try {
         const [user, product] = await Promise.all([ User.findById(userId), Product.findById(productId).select('name stock reviewStatus') ]);
         if (!user) return res.status(401).json({ success: false, message: 'User session error.' });
         if (!product) return res.status(404).json({ success: false, message: 'Product not found.' });
         if (product.reviewStatus !== 'approved') return res.status(400).json({ success: false, message: `"${product.name}" unavailable.` });
         if (product.stock <= 0) return res.status(400).json({ success: false, message: `${product.name} out of stock.` });
         const existIndex = user.cart.findIndex(i => i.productId.toString() === productId);
         let finalQty = 0;
         if (existIndex > -1) {
             const newQty = user.cart[existIndex].quantity + numQuantity;
             if (product.stock < newQty) return res.status(400).json({ success: false, message: `Max stock: ${product.stock} (You have ${user.cart[existIndex].quantity}).` });
             user.cart[existIndex].quantity = newQty; finalQty = newQty;
         } else {
             if (product.stock < numQuantity) return res.status(400).json({ success: false, message: `Insufficient stock: ${product.stock} avail.` });
             user.cart.push({ productId, quantity: numQuantity }); finalQty = numQuantity;
         }
         await user.save(); req.session.user.cart = user.cart.map(i => ({ productId: i.productId, quantity: i.quantity })); await req.session.save();
         const updatedCartItemCount = user.cart.reduce((sum, i) => sum + i.quantity, 0);
         return res.status(200).json({ success: true, message: `${product.name} added!`, cartItemCount: updatedCartItemCount });
     } catch (error) { console.error("AJAX Add Cart Error:", error); let status = 500; let msg = 'Error adding item.'; if (error.name === 'CastError') { status = 400; msg = 'Invalid product ID.'; } return res.status(status).json({ success: false, message: msg }); }
 };
exports.user_updateCartQuantity = async (req, res, next) => {
    const { productId, quantity } = req.body;
    const userId = req.session.user._id;
    const numQuantity = parseInt(quantity, 10);
    if (!productId || !mongoose.Types.ObjectId.isValid(productId) || isNaN(numQuantity) || numQuantity < 0) {
        return res.status(400).json({ success: false, message: 'Invalid product/quantity.' });
    }
    try {
        const [user, product] = await Promise.all([
            User.findById(userId),
            Product.findById(productId).select('stock price reviewStatus name')
        ]);
        if (!user || !product) {
            return res.status(404).json({ success: false, message: 'User/Product not found.' });
        }
        if (product.reviewStatus !== 'approved') {
            const index = user.cart.findIndex(i => i.productId.toString() === productId);
            if (index > -1) {
                user.cart.splice(index, 1);
                await user.save();
                req.session.user.cart = user.cart.map(i => ({ productId: i.productId, quantity: i.quantity }));
                await req.session.save(); 
            }
            const updatedCartItemCountAfterRemoval = user.cart.reduce((sum, item) => sum + item.quantity, 0);
            return res.status(400).json({
                success: false,
                message: `Product "${product.name}" unavailable, removed.`,
                removal: true,
                cartItemCount: updatedCartItemCountAfterRemoval
            });
        }
        const index = user.cart.findIndex(i => i.productId.toString() === productId);
        if (numQuantity === 0) {
            if (index > -1) {
                user.cart.splice(index, 1);
            }
        } else {
            if (product.stock < numQuantity) {
                const currentCartItemCount = user.cart.reduce((sum, item) => sum + item.quantity, 0);
                return res.status(400).json({
                    success: false,
                    message: `Stock low: ${product.name} (${product.stock} avail).`,
                    cartItemCount: currentCartItemCount
                });
            }
            if (index > -1) {
                user.cart[index].quantity = numQuantity;
            } else {
                user.cart.push({ productId, quantity: numQuantity });
            }
        }
        await user.save();
        req.session.user.cart = user.cart.map(i => ({ productId: i.productId, quantity: i.quantity }));
        let cartTotal = 0;
        let itemSubtotal = 0;
        const updatedUser = await User.findById(userId).populate('cart.productId', 'price').lean();
        updatedUser.cart.forEach(i => {
            if (i.productId?.price) {
                const currentSub = i.productId.price * i.quantity;
                cartTotal += currentSub;
                if (i.productId._id.toString() === productId) {
                    itemSubtotal = currentSub;
                }
            }
        });
        const updatedCartItemCount = updatedUser.cart.reduce((sum, item) => sum + item.quantity, 0);
        await req.session.save(); 
        res.json({
            success: true,
            message: 'Cart updated.',
            newQuantity: user.cart.find(i => i.productId.toString() === productId)?.quantity ?? 0,
            itemSubtotal,
            cartTotal,
            cartItemCount: updatedCartItemCount,
            itemId: productId
        });
    } catch (error) {
        console.error("Cart Update Error:", error);
        let currentCartItemCountOnError = 0;
        if (req.session.user?.cart) {
            currentCartItemCountOnError = req.session.user.cart.reduce((sum, item) => sum + item.quantity, 0);
        }
        res.status(500).json({
            success: false,
            message: 'Error updating quantity.',
            cartItemCount: currentCartItemCountOnError 
        });
    }
};
exports.user_removeFromCart = async (req, res, next) => {
     const { productId } = req.params; const userId = req.session.user._id;
     if (!productId || !mongoose.Types.ObjectId.isValid(productId)) { req.flash('error_msg', 'Invalid Product ID.'); return res.redirect('/user/cart'); }
     try {
         const userBefore = await User.findById(userId).lean(); const initialLength = userBefore?.cart?.length || 0;
         const user = await User.findOneAndUpdate({ _id: userId }, { $pull: { cart: { productId: productId } } }, { new: true });
         if (!user) { req.flash('error_msg', 'User not found.'); return res.redirect('/auth/login'); }
         req.session.user.cart = user.cart.map(i => ({ productId: i.productId, quantity: i.quantity })); await req.session.save();
         if (user.cart.length < initialLength) req.flash('success_msg', 'Item removed.');
         else req.flash('info_msg', 'Item not found in cart.');
         res.redirect('/user/cart');
     } catch (error) { console.error("Remove Cart Error:", error); next(error); }
 };
exports.user_getCheckoutPage = async (req, res, next) => {
    try {
       const user = await User.findById(req.session.user._id).populate('cart.productId', 'name price imageUrl stock reviewStatus sellerId _id').lean();
       if (!user) { req.flash('error_msg', 'Session expired.'); return res.redirect('/auth/login'); }
       if (!user.cart || user.cart.length === 0) { req.flash('error_msg', 'Cart empty.'); return res.redirect('/user/cart'); }
       let subTotal = 0; let items = []; let issuesFound = false; let issueMessages = []; let itemsToRemove = [];
       for (const item of user.cart) {
           const prodName = item.productId?.name || '[Unknown]'; const stock = item.productId?.stock ?? 0; const status = item.productId?.reviewStatus ?? 'unavailable';
           if (!item.productId?._id) { issueMessages.push('Invalid item detected.'); issuesFound = true; itemsToRemove.push(item._id); continue; }
           if(status !== 'approved') { issueMessages.push(`"${prodName}" unavailable.`); issuesFound = true; itemsToRemove.push(item._id); continue; }
           if(stock < item.quantity) { issueMessages.push(`Stock low: "${prodName}" (${stock} left).`); issuesFound = true; continue; }
           const price = item.productId.price || 0; const itemTotal = price * item.quantity; subTotal += itemTotal;
           items.push({ productId: item.productId._id, name: prodName, price: price, imageUrl: item.productId.imageUrl || '/images/placeholder.png', quantity: item.quantity, stock: stock, itemTotal: itemTotal });
       }
       if (issuesFound) {
             if (itemsToRemove.length > 0) { await User.updateOne({ _id: user._id }, { $pull: { cart: { _id: { $in: itemsToRemove } } } }); const updated = await User.findById(user._id).select('cart').lean(); req.session.user.cart = updated?.cart.map(i => ({ productId: i.productId, quantity: i.quantity })) || []; await req.session.save(); issueMessages.push('Removed problematic items.'); }
             req.flash('error_msg', "Resolve cart issues: " + issueMessages.join(' ')); return res.redirect('/user/cart');
        }
       res.render('user/checkout', { title: 'Checkout', userAddress: user.address, items: items, subTotal: subTotal, totalAmount: subTotal,
       RAZORPAY_KEY_ID: Config.RAZORPAY_KEY_ID
        });
   } catch (error) { next(error); }
 };
exports.user_lookupPincode = async (req, res) => {
    const { pincode } = req.params; const API_URL = `https://api.postalpincode.in/pincode/${pincode}`;
    if (!pincode || !/^\d{6}$/.test(pincode)) return res.status(400).json({ success: false, message: 'Invalid Pincode (6 digits).' });
    try {
        console.log(`Pincode Lookup Req: ${pincode}`);
        const response = await axios.get(API_URL, { timeout: 7000 });
        if (response.status !== 200) { console.error(`Pincode API fail ${pincode}. Status: ${response.status}`); return res.status(502).json({ success: false, message: `API unavailable (${response.statusText})` }); }
        const data = response.data; if (!Array.isArray(data) || !data[0]) { console.error(`Pincode API weird format ${pincode}. Data:`, JSON.stringify(data)); return res.status(500).json({ success: false, message: 'Unexpected API format.' }); }
        const result = data[0]; if (result.Status !== 'Success') { console.log(`Pincode ${pincode} API status: ${result.Status} msg: ${result.Message}`); return res.status(404).json({ success: false, message: `Pincode not found (${result.Message || 'No records'})` }); }
        if (!result.PostOffice || !Array.isArray(result.PostOffice) || result.PostOffice.length === 0) { console.warn(`Pincode ${pincode} OK but no PostOffice data.`); return res.json({ success: true, location: { pinCode: pincode, mandalName: '', districtName: '', stateName: '', localities: [] } }); }
        const postOffices = result.PostOffice; const firstPO = postOffices[0];
        const localitiesList = [...new Set(postOffices.map(po => po.Name).filter(Boolean).filter(name => name.toUpperCase() !== 'NA').sort())];
        const location = { pinCode: firstPO.Pincode || pincode, mandalName: firstPO.Block !== 'NA' ? firstPO.Block : (firstPO.Taluk !== 'NA' ? firstPO.Taluk : firstPO.Division || ''), districtName: firstPO.District || '', stateName: firstPO.State || '', localities: localitiesList };
        console.log(`Pincode Lookup OK ${pincode}. Loc:`, location); res.json({ success: true, location });
    } catch (error) { console.error(`Pincode lookup Net/Req Error ${pincode}:`, error.message); let status = 500; let msg = 'Error looking up pincode.'; if (axios.isAxiosError(error)) { if (error.code === 'ECONNABORTED') { msg = 'Lookup timeout.'; status = 504; } else if (error.response) { msg = `API error (${error.response.status}).`; status = 502; } else if (error.request) { msg = 'Net error.'; status = 502; } } res.status(status).json({ success: false, message: msg }); }
};


// ============================
// Seller Controller Functions
// ============================
// ... (Existing Seller controllers - NO CHANGES for these product/dashboard ones)
exports.seller_getDashboard = (req, res) => {
    res.render('seller/dashboard', { title: 'Seller Dashboard' });
};
exports.seller_getUploadProductPage = (req, res) => {
    res.render('seller/upload-product', { title: 'Upload New Product', product: {}, categories: categories });
};
exports.seller_uploadProduct = async (req, res, next) => {
     const { name, category, price, stock, imageUrl, imageUrl2, specifications, shortDescription } = req.body;
     const sellerId = req.session.user._id; const sellerEmail = req.session.user.email;
     const renderOptions = { title: 'Upload New Product', product: req.body, categories: categories };
     if (!name || !category || price === undefined || stock === undefined || !imageUrl) { req.flash('error_msg', 'Req: Name, Cat, Price, Stock, Image1.'); return res.render('seller/upload-product', renderOptions); }
     if (isNaN(Number(price)) || Number(price) < 0 || isNaN(Number(stock)) || Number(stock) < 0) { req.flash('error_msg', 'Price/Stock >= 0.'); return res.render('seller/upload-product', renderOptions); }
     if (!categoryNames.includes(category)) { req.flash('error_msg', 'Invalid category.'); return res.render('seller/upload-product', renderOptions); }
     try {
         const newProduct = new Product({ name: name.trim(), category: category.trim(), shortDescription: shortDescription?.trim(), price: Number(price), stock: Number(stock), imageUrl: imageUrl.trim(), imageUrl2: imageUrl2?.trim(), specifications: specifications?.trim(), sellerId: sellerId, sellerEmail: sellerEmail, reviewStatus: 'pending' });
         await newProduct.save(); console.log(`P.ID ${newProduct._id} saved initially by seller ${sellerEmail}.`);
         reviewProductWithGemini(newProduct).then(async reviewResult => {
             try {
                 const ptu = await Product.findById(newProduct._id); if (!ptu) { console.warn(`P.ID ${newProduct._id} missing for status update.`); return; }
                 ptu.reviewStatus = reviewResult.status; ptu.rejectionReason = reviewResult.reason; await ptu.save();
                 console.log(`P.ID ${newProduct._id} review updated to ${reviewResult.status}.`);
             } catch (updateError) { console.error(`Error updating P.ID ${newProduct._id} after Gemini:`, updateError); }
         }).catch(reviewError => {
             console.error(`Error in Gemini chain for P.ID ${newProduct._id}:`, reviewError);
             Product.findByIdAndUpdate(newProduct._id, { reviewStatus: 'pending', rejectionReason: 'AI review process failed.' }).catch(err => console.error("Fail recovery mark prod pending:", err));
         });
         req.flash('success_msg', `Product "${newProduct.name}" submitted for review.`); res.redirect('/seller/products');
     } catch (error) {
         if (error.name === 'ValidationError') { req.flash('error_msg', `Validation: ${Object.values(error.errors).map(el => el.message).join(' ')}`); return res.render('seller/upload-product', renderOptions); }
         console.error("Seller Upload Error:", error); next(error);
     }
 };
exports.seller_getManageProductsPage = async (req, res, next) => {
    try {
        const products = await Product.find({ sellerId: req.session.user._id }).sort({ createdAt: -1 }).lean();
        res.render('seller/manage-products', { title: 'Manage Your Products', products: products });
    } catch (error) { next(error); }
};
exports.seller_getEditProductPage = async (req, res, next) => {
      try {
         const product = await Product.findOne({ _id: req.params.id, sellerId: req.session.user._id }).lean();
         if (!product) { req.flash('error_msg', 'Product not found/access denied.'); return res.redirect('/seller/products'); }
         res.render('seller/edit-product', { title: `Edit Product: ${product.name}`, product: product, categories: categories });
    } catch (error) { if (error.name === 'CastError') { req.flash('error_msg', 'Invalid product ID.'); return res.redirect('/seller/products'); } next(error); }
 };
exports.seller_updateProduct = async (req, res, next) => {
      const productId = req.params.id; const sellerId = req.session.user._id; const { name, category, price, stock, imageUrl, imageUrl2, specifications, shortDescription } = req.body;
      let productData = { _id: productId, ...req.body }; const renderOpts = { title: `Edit Error`, product: productData, categories: categories };
      const fetchProductForRender = async () => await Product.findOne({ _id: productId, sellerId: sellerId }).lean() || productData;
      if (!name || !category || price === undefined || stock === undefined || !imageUrl) { req.flash('error_msg', 'Req: Name, Cat, Price, Stock, Image1.'); renderOpts.product = { ...(await fetchProductForRender()), ...req.body }; return res.render('seller/edit-product', renderOpts); }
      if (isNaN(Number(price)) || Number(price) < 0 || isNaN(Number(stock)) || Number(stock) < 0) { req.flash('error_msg', 'Price/Stock >= 0.'); renderOpts.product = { ...(await fetchProductForRender()), ...req.body }; return res.render('seller/edit-product', renderOpts); }
      if (!categoryNames.includes(category)) { req.flash('error_msg', 'Invalid category.'); renderOpts.product = { ...(await fetchProductForRender()), ...req.body }; return res.render('seller/edit-product', renderOpts); }
      try {
          const product = await Product.findOne({ _id: productId, sellerId: sellerId });
          if (!product) { req.flash('error_msg', 'Product not found/access denied.'); return res.status(404).redirect('/seller/products'); }
          product.name = name.trim(); product.category = category.trim(); product.shortDescription = shortDescription?.trim(); product.price = Number(price); product.stock = Number(stock); product.imageUrl = imageUrl.trim(); product.imageUrl2 = imageUrl2?.trim(); product.specifications = specifications?.trim(); product.reviewStatus = 'pending'; product.rejectionReason = undefined;
          await product.save(); console.log(`P.ID ${productId} updated by seller, pending review.`);
          reviewProductWithGemini(product).then(async reviewResult => {
              try {
                  const ptu = await Product.findById(product._id); if (ptu) { ptu.reviewStatus = reviewResult.status; ptu.rejectionReason = reviewResult.reason; await ptu.save(); console.log(`P.ID ${product._id} review updated: ${reviewResult.status} after edit.`); }
              } catch (updateError) { console.error(`Error update P.ID ${product._id} after Gemini (post-edit):`, updateError); }
          }).catch(reviewError => {
              console.error(`Error in Gemini chain for edited P.ID ${product._id}:`, reviewError);
              Product.findByIdAndUpdate(product._id, { reviewStatus: 'pending', rejectionReason: 'AI review fail post-edit.' }).catch(err => console.error("Fail recovery mark edited pending:", err));
          });
          req.flash('success_msg', `Product "${product.name}" updated & resubmitted.`); res.redirect('/seller/products');
      } catch (error) {
           if (error.name === 'ValidationError') { req.flash('error_msg', `Validation: ${Object.values(error.errors).map(el => el.message).join(' ')}`); renderOpts.product = { ...(await fetchProductForRender()), ...req.body }; return res.render('seller/edit-product', renderOpts); }
           console.error("Seller Update Error:", error); next(error);
      }
  };
exports.seller_removeProduct = async (req, res, next) => {
     const productId = req.params.id; const sellerId = req.session.user._id;
     try {
          const product = await Product.findOneAndDelete({ _id: productId, sellerId: sellerId });
         if (!product) { req.flash('error_msg', 'Product not found/removed.'); return res.status(404).redirect('/seller/products'); }
         req.flash('success_msg', `Product "${product.name}" removed.`); res.redirect('/seller/products');
     } catch (error) {
         if (error.name === 'CastError') { req.flash('error_msg', 'Invalid product ID.'); return res.status(400).redirect('/seller/products'); }
         console.error("Seller Remove Error:", error); req.flash('error_msg', 'Error removing.'); res.redirect('/seller/products');
     }
 };
exports.seller_getManageOrdersPage = async (req, res, next) => {
     try {
         const sellerId = req.session.user._id;
         const sellerProdIds = (await Product.find({ sellerId: sellerId }).select('_id').lean()).map(p => p._id);
         if (sellerProdIds.length === 0) { return res.render('seller/manage-orders', { title: 'Manage Your Orders', orders: [], message: 'No products listed, no orders yet.', sellerCancellationReasons: sellerCancellationReasons }); }
         const orders = await Order.find({ 'products.productId': { $in: sellerProdIds } }).sort({ orderDate: -1 }).populate('products.productId', 'name imageUrl _id price sellerId').populate('userId', 'name email').lean();
         const now = Date.now();
         orders.forEach(order => {
              order.isRelevantToSeller = true; 
              order.canBeDirectlyDeliveredBySeller = order.status === 'Pending'; 
              order.canBeCancelledBySeller = ['Pending', 'PaymentPending', 'PaymentFailed'].includes(order.status); 
              order.showDeliveryOtp = order.status === 'Pending' && !!order.orderOTP && !!order.orderOTPExpires && new Date(order.orderOTPExpires).getTime() > now;
              if (order.products?.length > 0) {
                  order.itemsSummary = order.products.map(p => { const isSellerItem = p.productId?.sellerId?.toString() === sellerId.toString(); const price = p.priceAtOrder ?? p.productId?.price ?? 0; const name = p.productId?.name || p.name || '[?Name?]'; return `${isSellerItem ? '<strong>' : ''}${name} (Qty: ${p.quantity}) @ ₹${price.toFixed(2)}${isSellerItem ? ' (Yours)</strong>' : ''}`; }).join('<br>');
              } else order.itemsSummary = 'No items found';
         });
         res.render('seller/manage-orders', { title: 'Manage Your Orders', orders: orders, message: null, sellerCancellationReasons: sellerCancellationReasons });
     } catch (error) { next(error); }
 };
exports.seller_sendDirectDeliveryOtpBySeller = async (req, res, next) => {
     const orderId = req.params.orderId; const sellerId = req.session.user._id;
     try { 
         const orderCheck = await Order.findById(orderId).select('status').lean(); 
         if (!orderCheck) throw new Error("Order not found.");
         if (orderCheck.status !== 'Pending') throw new Error(`Cannot send OTP for status ${orderCheck.status}.`);
         const result = await this.order_generateAndSendDirectDeliveryOTPBySeller(orderId, sellerId);
         req.flash('success_msg', result.message + ' Ask customer for OTP.');
     } catch (error) { req.flash('error_msg', `OTP Send Failed: ${error.message}`); }
     res.redirect('/seller/orders');
 };
exports.seller_confirmDirectDeliveryBySeller = async (req, res, next) => {
      const orderId = req.params.orderId; const { otp } = req.body; const sellerId = req.session.user._id;
      if (!otp || !/^\d{6}$/.test(otp.trim())) { req.flash('error_msg', 'Enter 6-digit OTP.'); return res.redirect('/seller/orders'); }
      try { 
          const { order } = await this.order_confirmDirectDeliveryBySeller(orderId, sellerId, otp.trim(), res);
         req.flash('success_msg', `Order ${orderId} confirmed delivered by you.`);
      } catch (error) { req.flash('error_msg', `Confirm Failed: ${error.message}`); }
      res.redirect('/seller/orders');
  };
exports.seller_cancelOrderBySeller = async (req, res, next) => {
     const { orderId } = req.params; const { reason } = req.body; const sellerId = req.session.user._id;
     if (!reason || !sellerCancellationReasons.includes(reason)) { req.flash('error_msg', 'Select valid seller reason.'); return res.redirect('/seller/orders'); }
     const sessionDB = await mongoose.startSession(); sessionDB.startTransaction();
     try {
         const order = await Order.findById(orderId).populate('products.productId', 'sellerId name _id').populate('userId', 'email name').session(sessionDB);
         if (!order) { await sessionDB.abortTransaction(); sessionDB.endSession(); req.flash('error_msg', 'Order not found.'); return res.status(404).redirect('/seller/orders'); }
         if (!['Pending', 'PaymentPending', 'PaymentFailed'].includes(order.status)) { 
            await sessionDB.abortTransaction(); sessionDB.endSession(); 
            req.flash('error_msg', `Order is '${order.status}'. Cannot cancel items.`); return res.redirect('/seller/orders'); 
         }
         console.log(`Seller Cancel: Order ${orderId}, Seller ${sellerId}. Current order status: ${order.status}`);

         let sellerItemsCancelled = false;
         let orderBecomesFullyCancelled = true; // Assume it will be fully cancelled

         if (order.status === 'Pending') {
             const restorePromises = [];
             order.products.forEach(item => {
                 if (item.productId?.sellerId?.toString() === sellerId.toString()) {
                     sellerItemsCancelled = true;
                     const qty = Number(item.quantity); 
                     if (!item.productId?._id || isNaN(qty) || qty <= 0) { 
                         console.warn(`Seller Cancel: Invalid item ${item.productId?._id}/Qty ${item.quantity} O.ID ${orderId}.`); 
                         return;
                     }
                     console.log(`Seller Cancel: Restore ${qty} stock P.ID ${item.productId._id}`);
                     restorePromises.push(Product.updateOne({ _id: item.productId._id }, { $inc: { stock: qty, orderCount: -1 } }, { session: sessionDB }).catch(err => console.error(`Seller Cancel: Fail stock P.ID ${item.productId._id} O.ID ${orderId}: ${err.message}`)));
                 } else {
                     orderBecomesFullyCancelled = false; // There are items from other sellers or no-seller items
                 }
             });
             if (restorePromises.length > 0) await Promise.allSettled(restorePromises);
         } else { 
            order.products.forEach(item => {
                if(item.productId?.sellerId?.toString() === sellerId.toString()) {
                    sellerItemsCancelled = true;
                } else {
                     orderBecomesFullyCancelled = false;
                }
            });
         }

         if (!sellerItemsCancelled) { 
             await sessionDB.abortTransaction(); sessionDB.endSession(); req.flash('info_msg', 'No items from your store to cancel in this order.'); return res.redirect('/seller/orders');
         }
         
         // Logic for setting order status
         if (orderBecomesFullyCancelled) {
             order.status = 'Cancelled'; 
             order.cancellationReason = (order.cancellationReason ? order.cancellationReason + " | " : "") + `Seller (${req.session.user.email}) cancelled all item(s): ${reason}`;
         } else {
             // Order remains 'Pending' or its original pre-cancellation status if other items exist
             // but we need to record that some items were cancelled by this seller.
             order.cancellationReason = (order.cancellationReason ? order.cancellationReason + " | " : "") + `Seller (${req.session.user.email}) cancelled some items: ${reason}. Order may still proceed with other items.`;
             // If it was PaymentPending/Failed, it should probably become Cancelled if this seller had the *only* items, or 'PaymentFailed' if others remain.
             // This area can be complex. For now: if not fully cancelled, keep original status if it was 'Pending', otherwise use a general "PartiallyCancelled" status if available, or just add to reason.
             // Sticking to simplicity: if NOT all items cancelled by THIS action, it just updates the reason string, and order status isn't changed by this seller, admin should review complex cases.
             // For current schema, 'Cancelled' is the only available terminal state besides 'Delivered'.
             // A better system might have "Partially Cancelled" or similar.
             // For now: If order is NOT fully cancelled, it doesn't change the status unless admin changes it.
             // *However*, if the order WAS PaymentPending/Failed, and seller cancels their items, the order effectively becomes 'Cancelled'
             // if those were the only items.
             if (['PaymentPending', 'PaymentFailed'].includes(order.status) && orderBecomesFullyCancelled) {
                 order.status = 'Cancelled';
             } else if (!orderBecomesFullyCancelled) {
                console.log(`Order ${orderId} not fully cancelled by seller. Original status ${order.status} may be retained or reviewed by admin.`);
                // No status change from this seller alone unless they were the only one.
             }
         }
         
         order.orderOTP = undefined; order.orderOTPExpires = undefined; order.cancellationAllowedUntil = undefined;
         await order.save({ session: sessionDB }); await sessionDB.commitTransaction();

         try {
              const customerEmail = order.userEmail || order.userId?.email; const customerName = order.shippingAddress.name || order.userId?.name || 'Customer';
              if(customerEmail) {
                  const subject = `Items Cancelled in Order #${order._id} - miniapp`;
                  const text = `Some items in your order (${order._id}) were cancelled by a seller. Reason: ${reason}.`;
                  let bodyLines = [`One or more items in your order (#${order._id}) have been cancelled by a seller.`, `<strong>Reason:</strong> ${reason}`, `View order details for more information.`];

                  if (order.paymentMethod === 'Razorpay' && order.paymentVerified) {
                     bodyLines.push(`If your order was pre-paid, an applicable refund for these items will be processed by site administrators.`);
                     console.warn(`SELLER CANCELLATION NOTE: Items in Order ${orderId} were Razorpay-paid. Manual refund may be needed by admin from Razorpay dashboard if not automatically handled for partial cancellations. Amount related to cancelled items needs review.`);
                  }
                  const html = generateEmailHtml({ recipientName: customerName, subject: subject, greeting: `Update for Order #${order._id}`, bodyLines: bodyLines, buttonUrl: `${req.protocol}://${req.get('host')}/orders/my-orders`, buttonText: 'My Orders', companyName: 'miniapp' });
                  await sendEmail(customerEmail, subject, text, html);
              } else console.warn(`Seller Cancel: Cannot find customer email O.ID ${orderId}.`);
         } catch (emailError) { console.error(`Seller Cancel: Fail send email O.ID ${order._id}:`, emailError); }
         req.flash('success_msg', `Your items in order ${orderId} have been cancelled. Reason: ${reason}. Customer notified.`); res.redirect('/seller/orders');
     } catch (error) {
         if(sessionDB.inTransaction()) await sessionDB.abortTransaction(); console.error(`Error seller cancelling O.ID ${orderId}:`, error); req.flash('error_msg', 'Internal cancel error.'); res.redirect('/seller/orders');
     } finally { if (sessionDB) await sessionDB.endSession(); }
 };

middleware.js :
// middleware.js
const mongoose = require('mongoose');
const { User, Product, Order } = require('./models'); // Import from consolidated models

// --- From middleware/authMiddleware.js ---
const isAuthenticated = (req, res, next) => {
    if (req.session && req.session.user) {
        User.findById(req.session.user._id).then(user => {
            if (!user) {
                req.session.destroy(err => {
                    if (err) { console.error('Session destruction error:', err); return next(err); }
                    req.flash('error_msg', 'Session expired or user not found. Please login again.');
                    res.redirect('/auth/login');
                });
            } else {
                req.user = user; // Attach full user object if needed
                res.locals.currentUser = user; // Ensure locals are updated (redundant if set in server.js)
                next();
            }
        }).catch(err => {
            console.error("Error checking user authentication:", err);
            req.flash('error_msg', 'An error occurred during authentication.');
            res.redirect('/auth/login');
        });
    } else {
        req.flash('error_msg', 'You must be logged in to view this page.');
        req.session.returnTo = req.originalUrl;
        res.redirect('/auth/login');
    }
};

// --- From middleware/errorMiddleware.js ---
const notFound = (req, res, next) => {
  const error = new Error(`Not Found - ${req.originalUrl}`);
  res.status(404);
  next(error);
};

const errorHandler = (err, req, res, next) => {
  let statusCode = res.statusCode === 200 ? 500 : res.statusCode;
  let message = err.message;

  if (err.name === 'CastError' && err.kind === 'ObjectId') { statusCode = 404; message = 'Resource not found (Invalid ID format)'; }
  if (err.name === 'ValidationError') { statusCode = 400; message = `Validation Error: ${Object.values(err.errors).map(el => el.message).join(', ')}`; }
  if (err.code === 11000) { statusCode = 400; message = `Duplicate field value: ${Object.keys(err.keyValue)} already exists.`; }

  console.error("ERROR STACK: ", err.stack);

  if (req.accepts('html')) {
      res.status(statusCode).render('error', { // Assuming error.ejs exists
          title: 'Error', message: message,
          stack: process.env.NODE_ENV === 'development' ? err.stack : null,
          statusCode: statusCode
      });
  } else {
      res.status(statusCode).json({
          message: message, stack: process.env.NODE_ENV === 'development' ? err.stack : null
      });
  }
};

// --- From middleware/roleMiddleware.js ---
const isAdmin = (req, res, next) => {
  if (req.session.user?.role === 'admin') {
    return next();
  }
  req.flash('error_msg', 'Access Denied: Admin privileges required.');
  return res.status(403).redirect('/');
};

const isSeller = (req, res, next) => {
  if (req.session.user?.role === 'seller') {
    return next();
  }
  req.flash('error_msg', 'Access Denied: Seller privileges required.');
  return res.status(403).redirect('/');
};

const isAdminOrSeller = (req, res, next) => {
   if (req.session.user && (req.session.user.role === 'admin' || req.session.user.role === 'seller')) {
     return next();
   }
   req.flash('error_msg', 'Access Denied: Admin or Seller privileges required.');
   return res.status(403).redirect('/');
};

const isProductOwner = async (req, res, next) => {
    const productId = req.params.id || req.params.productId;
    const sellerId = req.session.user._id;
    if (!mongoose.Types.ObjectId.isValid(productId)) {
         req.flash('error_msg', 'Invalid Product ID format.');
         return res.status(400).redirect('back');
    }
    try {
        const product = await Product.findById(productId).select('sellerId').lean();
        if (!product) { req.flash('error_msg', 'Product not found.'); return res.status(404).redirect('back'); }
        if (product.sellerId.toString() !== sellerId.toString()) {
            req.flash('error_msg', 'Access Denied: You do not own this product.');
            return res.status(403).redirect('/seller/products');
        }
        next();
    } catch (error) {
         console.error("Error in isProductOwner middleware:", error);
         if (error.name === 'CastError') { req.flash('error_msg', 'Invalid Product ID format.'); return res.status(400).redirect('back'); }
         req.flash('error_msg', 'Error verifying product ownership.');
         return res.status(500).redirect('back');
    }
};

const isOrderRelevantToSeller = async (req, res, next) => {
    const orderId = req.params.orderId || req.params.id;
    const sellerId = req.session.user._id;
     if (!mongoose.Types.ObjectId.isValid(orderId)) {
         req.flash('error_msg', 'Invalid Order ID format.');
         return res.status(400).redirect('back');
    }
    try {
        const sellerProductIds = await Product.find({ sellerId: sellerId }, '_id').lean();
        const sellerProductIdStrings = sellerProductIds.map(p => p._id.toString());
        if (sellerProductIdStrings.length === 0) {
             req.flash('error_msg', 'Access Denied: You have no products listed.');
             return res.status(403).redirect('/seller/orders');
        }
        const order = await Order.findOne({
            _id: orderId,
            'products.productId': { $in: sellerProductIdStrings.map(id => new mongoose.Types.ObjectId(id)) }
        }).select('_id').lean();
        if (!order) {
            req.flash('error_msg', 'Order not found or does not contain your products.');
            return res.status(404).redirect('/seller/orders');
        }
        next();
    } catch (error) {
        console.error("Error in isOrderRelevantToSeller middleware:", error);
        if (error.name === 'CastError') { req.flash('error_msg', 'Invalid ID format.'); return res.status(400).redirect('back'); }
        req.flash('error_msg', 'Error verifying order relevance.');
        return res.status(500).redirect('back');
    }
};


// --- Consolidated Exports ---
module.exports = {
    // Auth
    isAuthenticated,
    // Error
    notFound,
    errorHandler,
    // Roles
    isAdmin,
    isSeller,
    isAdminOrSeller,
    isProductOwner,
    isOrderRelevantToSeller
};

models.js :
// models.js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const config = require('./config'); // Import the consolidated config

// --- From models/BannerConfig.js ---
const BannerSchema = new mongoose.Schema({
  imageUrl: { type: String, trim: true, required: true },
  linkUrl: { type: String, trim: true },
  title: { type: String, trim: true },
}, { _id: false });

function bannerArrayLimit(val) {
  return val.length <= 4;
}

const BannerConfigSchema = new mongoose.Schema({
  configKey: {
    type: String,
    default: 'mainBanners',
    unique: true,
    required: true,
  },
  banners: {
    type: [BannerSchema],
    validate: [bannerArrayLimit, '{PATH} exceeds the limit of 4 banners']
  },
  lastUpdatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }
}, { timestamps: true });

const BannerConfig = mongoose.model('BannerConfig', BannerConfigSchema);


// --- From models/User.js ---
const AddressSchema = new mongoose.Schema({
    name: { type: String, trim: true },
    phone: { type: String, trim: true },
    pincode: { type: String, trim: true },
    locality: { type: String, trim: true },
    cityVillage: { type: String, trim: true },
    landmarkNearby: { type: String, trim: true },
    mandal: { type: String, trim: true },
    district: { type: String, trim: true },
    state: { type: String, trim: true },
}, { _id: false });

const CartItemSchema = new mongoose.Schema({
    productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
    quantity: { type: Number, required: true, min: 1, default: 1 },
}, { _id: false });

const UserSchema = new mongoose.Schema({
    name: { type: String, required: [true, 'Please provide your name'], trim: true },
    email: {
        type: String,
        required: [true, 'Please provide your email'],
        unique: true,
        match: /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/,
        lowercase: true,
        trim: true,
    },
    password: {
        type: String,
        required: [true, 'Please provide a password'],
        minlength: [8, 'Password must be at least 8 characters long'],
        select: false,
    },
    role: { type: String, enum: ['user', 'admin', 'seller'], default: 'user' },
    isVerified: { type: Boolean, default: false },
    otp: { type: String },
    otpExpires: { type: Date },
    address: AddressSchema,
    cart: [CartItemSchema],
    resetPasswordToken: String,
    resetPasswordExpires: Date,
}, { timestamps: true });

UserSchema.pre('save', async function(next) {
    if (!this.isModified('password')) return next();
    try {
        const salt = await bcrypt.genSalt(10);
        this.password = await bcrypt.hash(this.password, salt);
        next();
    } catch (error) {
        next(error);
    }
});

UserSchema.methods.matchPassword = async function(enteredPassword) {
    if (!this.password) {
        const userWithPassword = await User.findById(this._id).select('+password').exec();
        if (!userWithPassword || !userWithPassword.password) return false;
        return await bcrypt.compare(enteredPassword, userWithPassword.password);
    }
    return await bcrypt.compare(enteredPassword, this.password);
};

const User = mongoose.model('User', UserSchema);


// --- From models/Product.js ---
const RatingSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    rating: { type: Number, required: true, min: 1, max: 5 },
    comment: { type: String, trim: true },
}, { _id: false, timestamps: true });

const ProductSchema = new mongoose.Schema({
    name: { type: String, required: [true, 'Please provide a product name'], trim: true, index: true },
    shortDescription: { type: String, trim: true, maxlength: 200 },
    category: {
        type: String,
        required: [true, 'Please select a product category'],
        trim: true,
        index: true,
        enum: {
            values: config.categoryNames,
            message: '{VALUE} is not a supported category.'
        }
    },
    price: { type: Number, required: [true, 'Please provide a product price'], min: 0 },
    stock: { type: Number, required: [true, 'Please provide product stock quantity'], min: 0, default: 0 },
    imageUrl: { type: String, required: [true, 'Please provide a product image URL'], trim: true },
    imageUrl2: { type: String, trim: true },
    specifications: { type: String, trim: true },
    sellerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true, index: true },
    sellerEmail: { type: String, required: true, lowercase: true, trim: true },
    ratings: [RatingSchema],
    averageRating: { type: Number, default: 0 },
    numReviews: { type: Number, default: 0 },
    orderCount: { type: Number, default: 0 },
    reviewStatus: { type: String, enum: ['pending', 'approved', 'rejected'], default: 'pending', index: true },
    rejectionReason: { type: String, trim: true }
}, { timestamps: true });

ProductSchema.pre('save', function(next) {
    if (this.isModified('ratings')) {
        this.numReviews = this.ratings ? this.ratings.length : 0;
        this.averageRating = this.numReviews > 0 ? this.ratings.reduce((acc, item) => item.rating + acc, 0) / this.numReviews : 0;
    }
    if (this.isModified('reviewStatus') && this.reviewStatus !== 'rejected') {
        this.rejectionReason = undefined;
    }
    next();
});

ProductSchema.index({ name: 'text', category: 'text', specifications: 'text' });

const Product = mongoose.model('Product', ProductSchema);


// --- From models/Order.js ---
const OrderProductSchema = new mongoose.Schema({
    productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
    name: { type: String, required: true },
    priceAtOrder: { type: Number, required: true },
    quantity: { type: Number, required: true, min: 1 },
    imageUrl: { type: String },
    sellerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
}, { _id: false });

const OrderAddressSchema = new mongoose.Schema({
    name: { type: String, trim: true, required: true },
    phone: { type: String, trim: true, required: true },
    pincode: { type: String, trim: true, required: true },
    locality: { type: String, trim: true, required: true },
    cityVillage: { type: String, trim: true, required: true },
    landmarkNearby: { type: String, trim: true },
    mandal: { type: String, trim: true },
    district: { type: String, trim: true },
    state: { type: String, trim: true },
}, { _id: false });

const OrderSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    userEmail: { type: String, required: true, lowercase: true, trim: true },
    products: [OrderProductSchema],
    totalAmount: { type: Number, required: true, min: 0 },
    shippingAddress: { type: OrderAddressSchema, required: true },
    paymentMethod: {
        type: String,
        enum: ['COD', 'Razorpay'], // <<< UPDATED
        required: true,
        default: 'COD'
    },
    status: {
        type: String,
        // <<< UPDATED Enum
        enum: ['Pending', 'PaymentPending', 'PaymentFailed', 'Delivered', 'Cancelled'],
        default: 'PaymentPending' // Default for online payments before confirmation
    },
    orderDate: { type: Date, default: Date.now },
    receivedByDate: { type: Date },
    orderOTP: String,
    orderOTPExpires: Date,
    cancellationAllowedUntil: { type: Date },
    cancellationReason: { type: String, trim: true },
    // --- Razorpay Specific Fields --- // <<< ADDED
    razorpayOrderId: { type: String, trim: true },
    razorpayPaymentId: { type: String, trim: true },
    razorpaySignature: { type: String, trim: true },
    paymentVerified: { type: Boolean, default: false } // To confirm Razorpay webhook/callback processed

}, { timestamps: true });

OrderSchema.pre('save', function(next) {
    // Original logic for COD related fields
    if (this.paymentMethod === 'COD') {
        if (this.isNew && !this.cancellationAllowedUntil && this.status === 'Pending') {
            const now = this.orderDate || Date.now();
            this.cancellationAllowedUntil = new Date(now.getTime() + 60 * 60 * 1000); // 1 hour for COD
        }
    } else { // For Razorpay or other online payments, cancellation window might be different or not applicable pre-payment
        this.cancellationAllowedUntil = undefined; // Or handle as per your business logic
    }


    if (this.isModified('status') && (this.status === 'Cancelled' || this.status === 'Delivered')) {
        this.orderOTP = undefined;
        this.orderOTPExpires = undefined;
        this.cancellationAllowedUntil = undefined; // Clear this on final states
        if (this.status === 'Cancelled') this.receivedByDate = undefined;
    }
    if (this.isModified('status') && this.status !== 'Pending') { // Clear OTP if not pending for COD delivery
         this.orderOTP = undefined;
         this.orderOTPExpires = undefined;
    }
    // If order becomes Pending (COD confirmed or Razorpay verified), then set cancellation window if not COD
    if (this.isModified('status') && this.status === 'Pending' && this.paymentMethod !== 'COD' && !this.cancellationAllowedUntil) {
        const now = Date.now();
        this.cancellationAllowedUntil = new Date(now + 15 * 60 * 1000); // Shorter window for paid orders, e.g., 15 mins
    }

    next();
});

const Order = mongoose.model('Order', OrderSchema);


// --- Consolidated Exports ---
module.exports = {
    BannerConfig,
    User,
    Product,
    Order
};

package.json :
{
  "name": "professional-ecommerce",
  "version": "1.0.0",
  "description": "Professional Responsive Ecommerce Application",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "keywords": [
    "ecommerce",
    "nodejs",
    "express",
    "mongodb",
    "ejs"
  ],
  "author": "AI Assistant",
  "license": "MIT",
  "dependencies": {
    "@google/generative-ai": "^0.24.0",
    "axios": "^1.9.0",
    "bcryptjs": "^2.4.3",
    "connect-flash": "^0.1.1",
    "connect-mongo": "^5.1.0",
    "dotenv": "^16.4.5",
    "ejs": "^3.1.10",
    "express": "^4.19.2",
    "express-session": "^1.18.0",
    "method-override": "^3.0.0",
    "mongoose": "^8.4.0",
    "node-cache": "^5.1.2",
    "nodemailer": "^6.9.13",
    "pincode": "^1.0.0",
    "razorpay": "^2.9.6",
    "slugify": "^1.6.6"
  },
  "devDependencies": {
    "nodemon": "^3.1.10"
  }
}


routes.js :
// routes.js
const express = require('express');
const controllers = require('./controllers'); 
const middleware = require('./middleware');

// Destructure imported modules for convenience
const {
    isAuthenticated, isAdmin, isSeller, isAdminOrSeller, isProductOwner, isOrderRelevantToSeller
} = middleware;

const {
    // Auth Controllers
    auth_getLoginPage, auth_registerUser, auth_getRegisterPage, auth_verifyOtp, auth_getVerifyOtpPage,
    auth_resendOtp, auth_forgotPassword, auth_getForgotPasswordPage, auth_resetPassword, auth_getResetPasswordPage,
    auth_loginUser, auth_logoutUser, auth_getHomePage,

    // Product Controllers
    product_getProducts, product_getProductDetails, product_rateProduct, product_getProductSuggestions,

    // User Controllers 
    user_getUserProfilePage, user_updateUserName, user_saveAddress, user_getCart, user_addToCart,
    user_addToCartAjax, user_updateCartQuantity, user_removeFromCart, user_getCheckoutPage, user_lookupPincode,

    // Order Controllers
    order_placeCODOrder, 
    order_createRazorpayOrderIntent, 
    order_verifyRazorpayPayment,  
    order_markPaymentFailed, // <<< NEW
    order_getMyOrders, order_cancelOrder,

    // Admin Controllers
    admin_getDashboard, admin_uploadProduct, admin_getUploadProductPage, admin_getManageProductsPage,
    admin_getEditProductPage, admin_updateProduct, admin_removeProduct, admin_getManageOrdersPage,
    admin_sendDirectDeliveryOtpByAdmin, admin_confirmDirectDeliveryByAdmin, admin_cancelOrderByAdmin,
    admin_getManageUsersPage, admin_updateUserRole, admin_removeUser,
    admin_getManageBannersPage, admin_updateBanners,

    // Seller Controllers
    seller_getDashboard, seller_getUploadProductPage, seller_uploadProduct, seller_getManageProductsPage,
    seller_getEditProductPage, seller_updateProduct, seller_removeProduct, seller_getManageOrdersPage,
    seller_sendDirectDeliveryOtpBySeller, seller_confirmDirectDeliveryBySeller, seller_cancelOrderBySeller
} = controllers; 

const router = express.Router();

// --- Public/Base Routes ---
router.get('/', auth_getHomePage); 


// --- Auth Routes ---
const authRouter = express.Router();
// ... (Existing Auth Routes - no change)
authRouter.get('/login', auth_getLoginPage);
authRouter.get('/register', auth_getRegisterPage);
authRouter.get('/verify-otp', auth_getVerifyOtpPage);
authRouter.get('/forgot-password', auth_getForgotPasswordPage);
authRouter.get('/reset-password/:token', auth_getResetPasswordPage);
authRouter.post('/register', auth_registerUser);
authRouter.post('/login', auth_loginUser);
authRouter.post('/logout', isAuthenticated, auth_logoutUser);
authRouter.post('/verify-otp', auth_verifyOtp);
authRouter.post('/resend-otp', auth_resendOtp);
authRouter.post('/forgot-password', auth_forgotPassword);
authRouter.post('/reset-password/:token', auth_resetPassword);
router.use('/auth', authRouter);


// --- Product Routes (Public Facing) ---
const productRouter = express.Router();
// ... (Existing Product Routes - no change)
productRouter.get('/suggestions', product_getProductSuggestions);
productRouter.get('/', product_getProducts); 
productRouter.get('/:id', product_getProductDetails); 
productRouter.post('/:id/rate', isAuthenticated, product_rateProduct); 
router.use('/products', productRouter);


// --- User Routes (Authenticated) ---
const userRouter = express.Router();
// ... (Existing User Routes - no change)
userRouter.get('/pincode-lookup/:pincode', user_lookupPincode);
userRouter.use(isAuthenticated); 
userRouter.get('/profile', user_getUserProfilePage); 
userRouter.post('/profile/update-name', user_updateUserName);
userRouter.post('/address/save', user_saveAddress);
userRouter.get('/cart', user_getCart);
userRouter.post('/cart/add', user_addToCart); 
userRouter.post('/cart/add-ajax', user_addToCartAjax); 
userRouter.post('/cart/update', user_updateCartQuantity);
userRouter.post('/cart/remove/:productId', user_removeFromCart);
userRouter.get('/checkout', user_getCheckoutPage);
router.use('/user', userRouter);


// --- Order Routes (Authenticated) ---
const orderRouter = express.Router();
orderRouter.use(isAuthenticated);
orderRouter.post('/place-cod', order_placeCODOrder);
orderRouter.post('/create-razorpay-order', order_createRazorpayOrderIntent); 
orderRouter.post('/verify-razorpay-payment', order_verifyRazorpayPayment);
orderRouter.post('/payment-failed/:internal_order_id', order_markPaymentFailed); // <<< NEW
orderRouter.get('/my-orders', order_getMyOrders);
orderRouter.post('/cancel/:id', order_cancelOrder); 
router.use('/orders', orderRouter);


// --- Admin Routes (Authenticated + Admin Role) ---
const adminRouter = express.Router();
// ... (Existing Admin Routes - no change)
adminRouter.use(isAuthenticated, isAdmin);
adminRouter.get('/dashboard', admin_getDashboard);
adminRouter.get('/upload-product', admin_getUploadProductPage);
adminRouter.post('/upload-product', admin_uploadProduct);
adminRouter.get('/manage-products', admin_getManageProductsPage);
adminRouter.get('/manage-products/edit/:id', admin_getEditProductPage);
adminRouter.post('/manage-products/update/:id', admin_updateProduct);
adminRouter.post('/manage-products/remove/:id', admin_removeProduct);
adminRouter.get('/manage-orders', admin_getManageOrdersPage);
adminRouter.post('/orders/:orderId/send-direct-delivery-otp', admin_sendDirectDeliveryOtpByAdmin); 
adminRouter.post('/orders/:orderId/confirm-direct-delivery', admin_confirmDirectDeliveryByAdmin); 
adminRouter.post('/orders/:orderId/cancel', admin_cancelOrderByAdmin); 
adminRouter.get('/manage-users', admin_getManageUsersPage);
adminRouter.post('/users/:id/update-role', admin_updateUserRole);
adminRouter.post('/users/:id/remove', admin_removeUser);
adminRouter.get('/manage-banners', admin_getManageBannersPage);
adminRouter.post('/manage-banners', admin_updateBanners);
router.use('/admin', adminRouter);


// --- Seller Routes (Authenticated + Seller Role) ---
const sellerRouter = express.Router();
// ... (Existing Seller Routes - no change for most)
sellerRouter.use(isAuthenticated, isSeller);
sellerRouter.get('/dashboard', seller_getDashboard);
sellerRouter.get('/products/upload', seller_getUploadProductPage);
sellerRouter.post('/products/upload', seller_uploadProduct);
sellerRouter.get('/products', seller_getManageProductsPage); 
sellerRouter.get('/products/edit/:id', isProductOwner, seller_getEditProductPage); 
sellerRouter.post('/products/update/:id', isProductOwner, seller_updateProduct); 
sellerRouter.post('/products/remove/:id', isProductOwner, seller_removeProduct); 
sellerRouter.get('/orders', seller_getManageOrdersPage); 
sellerRouter.post('/orders/:orderId/send-otp', isOrderRelevantToSeller, seller_sendDirectDeliveryOtpBySeller); 
sellerRouter.post('/orders/:orderId/confirm-delivery', isOrderRelevantToSeller, seller_confirmDirectDeliveryBySeller); 
sellerRouter.post('/orders/:orderId/cancel', isOrderRelevantToSeller, seller_cancelOrderBySeller); 
router.use('/seller', sellerRouter);


module.exports = router; 

server.js :
// server.js
require('dotenv').config();
const express = require('express');
const path = require('path');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const flash = require('connect-flash');
const methodOverride = require('method-override');

// Import consolidated modules
const Config = require('./config');
const routes = require('./routes'); // Import the single router file
const middleware = require('./middleware');

// Destructure for clarity
const { connectDB, categories: siteCategories } = Config;
const { notFound, errorHandler } = middleware;

connectDB();

const app = express();

// --- View Engine ---
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// --- Base Middleware ---
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));
app.use(methodOverride('_method'));

// --- Session Middleware ---
app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    store: MongoStore.create({
        mongoUrl: process.env.MONGO_URI,
        collectionName: 'sessions'
    }),
    cookie: {
        maxAge: parseInt(process.env.SESSION_MAX_AGE || '86400000', 10),
        httpOnly: true
        // secure: process.env.NODE_ENV === 'production', // Enable in production
        // sameSite: 'lax' // Recommended for security
    }
  })
);

// --- Flash Middleware ---
app.use(flash());

// --- Res Locals Middleware (Uses consolidated config) ---
app.use((req, res, next) => {
  // Flash messages
  res.locals.success_msg = req.flash('success_msg');
  res.locals.error_msg = req.flash('error_msg');
  res.locals.error = req.flash('error');

  // User info
  res.locals.currentUser = req.session.user || null;
  res.locals.cartItemCount = req.session.user?.cart?.reduce((count, item) => count + (item.quantity || 0), 0) || 0;
  let userInitials = '??';
  if (req.session.user?.name) {
    try {
      const nameParts = req.session.user.name.trim().split(' ');
      if (nameParts.length > 1 && nameParts[0] && nameParts[nameParts.length - 1]) userInitials = (nameParts[0][0] + nameParts[nameParts.length - 1][0]).toUpperCase();
      else if (nameParts.length === 1 && nameParts[0].length >= 2) userInitials = nameParts[0].substring(0, 2).toUpperCase();
      else if (nameParts.length === 1 && nameParts[0].length === 1) userInitials = (nameParts[0][0] + nameParts[0][0]).toUpperCase();
    } catch (e) { userInitials = '??'; } // Fallback remains '??'
  }
   else if (req.session.user?.email) { // Fallback to email if name fails/missing
     const emailPrefix = req.session.user.email.split('@')[0];
     if (emailPrefix.length >= 2) { userInitials = emailPrefix.substring(0, 2).toUpperCase(); }
     else if (emailPrefix.length === 1) { userInitials = emailPrefix.toUpperCase() + emailPrefix.toUpperCase(); }
   }
  res.locals.userInitials = userInitials;


  // URL and Date Formatting
  res.locals.currentUrl = req.originalUrl;
  res.locals.fullUrl = `${req.protocol}://${req.get('host')}${req.originalUrl}`;
  res.locals.formatDateIST = (dateInput) => {
      if (!dateInput) return 'N/A';
      try { const date = new Date(dateInput); return date.toLocaleString('en-IN', { timeZone: 'Asia/Kolkata', year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: '2-digit', hour12: true }); }
      catch (error) { console.error("Date Format Error:", error, dateInput); return 'Date Error'; }
  };

  // Site Config from consolidated config
  res.locals.defaultSiteName = 'miniapp'; // Or read from config if moved there
  res.locals.NODE_ENV = process.env.NODE_ENV;
  res.locals.siteCategories = siteCategories; // Use imported categories

   // Pincode Address Form Data Handling (Retain original logic)
   res.locals.addressFormData = req.session?.addressFormData || null;
   if (req.session?.addressFormData) { delete req.session.addressFormData; }

  next();
});

// --- Mount the consolidated router ---
app.use('/', routes);

// --- Error Handling (Uses consolidated middleware) ---
app.use(notFound);
app.use(errorHandler);

// --- Server Start ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running in ${process.env.NODE_ENV} mode on port ${PORT}`);
});

services.js :
// services.js
const crypto = require('crypto');
const axios = require('axios');
const config = require('./config'); // Import the consolidated config
const { razorpayInstance } = config; // <<< Destructure razorpayInstance


// --- From services/emailTemplateService.js ---
const generateEmailHtml = (options) => {
    // ... (existing generateEmailHtml function - no changes needed here for now)
    const {
      recipientName = 'Valued Customer',
      subject = 'Notification',
      greeting = `Hello ${recipientName},`,
      bodyLines = [],
      buttonUrl,
      buttonText,
      footerText = `© ${new Date().getFullYear()} miniapp. All rights reserved.`,
      companyName = 'miniapp',
      companyAddress = 'Your Company Address Here',
    } = options;

    const styles = {
      body: `margin: 0; padding: 0; -webkit-text-size-adjust: 100%; background-color: #f0f5fd;`,
      wrapper: `width: 100%; table-layout: fixed; -webkit-text-size-adjust: 100%;`,
      main: `background-color: #ffffff; margin: 0 auto; width: 100%; max-width: 600px; border-spacing: 0; font-family: Arial, sans-serif; color: #333333; box-shadow: 0 2px 10px rgba(0,0,0,0.1); border-radius: 8px; overflow: hidden;`,
      header: `background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: #ffffff; padding: 25px 20px; text-align: center; border-radius: 8px 8px 0 0; background-color: #007bff;`,
      headerH1: `margin: 0; font-size: 24px; font-weight: bold;`,
      content: `padding: 30px 25px; text-align: left; font-size: 16px; line-height: 1.6;`,
      greeting: `font-size: 18px; font-weight: bold; margin-bottom: 15px;`,
      paragraph: `margin: 0 0 15px 0;`,
      buttonWrapper: `padding: 15px 0; text-align: center;`,
      buttonLink: `background-color: #28a745; color: #ffffff; padding: 12px 25px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block; border: none; cursor: pointer; font-size: 16px;`,
      footer: `background-color: #e9ecef; color: #6c757d; padding: 20px 25px; text-align: center; font-size: 12px; line-height: 1.4; border-radius: 0 0 8px 8px;`,
      footerLink: `color: #007bff; text-decoration: none;`,
      preheader: `display: none !important; visibility: hidden; mso-hide: all; font-size: 1px; color: #ffffff; line-height: 1px; max-height: 0px; max-width: 0px; opacity: 0; overflow: hidden;`,
    };
     const bodyHtml = bodyLines
        .map(line => `<p style="${styles.paragraph}">${String(line).replace(/</g, "<").replace(/>/g, ">")}</p>`)
        .map(line => line.replace(/<strong>/g, '<strong>').replace(/<\/strong>/g, '</strong>')
                       .replace(/<br>/g, '<br>')
                       .replace(/<h3 style="(.*?)">/g, '<h3 style="$1">').replace(/<\/h3>/g, '</h3>')
                       .replace(/<ul style="(.*?)">/g, '<ul style="$1">').replace(/<\/ul>/g, '</ul>')
                       .replace(/<li style="(.*?)">/g, '<li style="$1">').replace(/<\/li>/g, '</li>')
                       .replace(/<a href="(.*?)"(.*?)>/g, '<a href="$1"$2>').replace(/<\/a>/g, '</a>')
         )
         .join('');
    let buttonHtml = '';
    if (buttonUrl && buttonText) {
      const safeButtonUrl = String(buttonUrl).replace(/</g, "<").replace(/>/g, ">").startsWith('http') ? buttonUrl : '#';
      const safeButtonText = String(buttonText).replace(/</g, "<").replace(/>/g, ">");
      buttonHtml = `
        <table border="0" cellpadding="0" cellspacing="0" width="100%">
          <tr>
            <td style="${styles.buttonWrapper}">
              <a href="${safeButtonUrl}" target="_blank" style="${styles.buttonLink}">${safeButtonText}</a>
            </td>
          </tr>
        </table>`;
    }
    const safeSubject = String(subject).replace(/</g, "<");
    const safeCompanyName = String(companyName).replace(/</g, "<");
    const safeFooterText = String(footerText).replace(/</g, "<");
    const safeCompanyAddress = String(companyAddress).replace(/</g, "<");
    const safeGreeting = String(greeting).replace(/</g, "<");
    const html = `
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>${safeSubject}</title>
    <style type="text/css">
      body { ${styles.body} }
      .wrapper { ${styles.wrapper} }
      .main { ${styles.main} }
      @media screen and (max-width: 600px) {
        .main { width: 95% !important; max-width: 95%; }
        .content { padding: 20px 15px !important; }
        .header h1 { font-size: 20px !important; }
        .buttonLink { padding: 10px 20px !important; font-size: 15px !important; }
      }
    </style>
  </head>
  <body style="${styles.body}">
    <span style="${styles.preheader}">${safeSubject} - ${bodyLines.length > 0 ? String(bodyLines[0]).substring(0, 50).replace(/<[^>]*>?/gm, '') + '...' : ''}</span>
    <center class="wrapper" style="${styles.wrapper}">
      <table class="main" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation" style="${styles.main}">
        <tr>
          <td class="header" style="${styles.header}">
            <h1 style="${styles.headerH1}">${safeCompanyName}</h1>
          </td>
        </tr>
        <tr>
          <td class="content" style="${styles.content}">
            <p style="${styles.greeting}">${safeGreeting}</p>
            ${bodyHtml}
            ${buttonHtml}
            <p style="${styles.paragraph}">If you have any questions, feel free to contact our support team.</p>
            <p style="${styles.paragraph}">Thanks,<br>The ${safeCompanyName} Team</p>
          </td>
        </tr>
        <tr>
          <td class="footer" style="${styles.footer}">
            <p style="margin:0 0 5px 0;">${safeFooterText}</p>
             ${companyAddress ? `<p style="margin:0 0 5px 0;">${safeCompanyAddress}</p>` : ''}
          </td>
        </tr>
      </table>
    </center>
  </body>
  </html>`;
    return html;
};

// --- From services/geminiService.js ---
const urlToGenerativePart = async (url) => {
    // ... (existing urlToGenerativePart function)
    console.log(`Fetching image from: ${url}`);
    try {
        const response = await axios.get(url, {
            responseType: 'arraybuffer',
            timeout: 10000
        });
        if (response.status !== 200) throw new Error(`HTTP error! status: ${response.status}`);
        const contentType = response.headers['content-type'];
         if (!contentType || !contentType.toLowerCase().startsWith('image/')) {
             console.warn(`Potentially unsupported image Content-Type: ${contentType} from URL: ${url}. Proceeding.`);
         } else if (!['image/jpeg', 'image/png', 'image/webp', 'image/gif', 'image/heic', 'image/heif'].includes(contentType.toLowerCase())) {
             console.warn(`Content-Type ${contentType} is less common for Gemini Vision.`);
         }

        const base64Data = Buffer.from(response.data).toString('base64');
        return { inlineData: { data: base64Data, mimeType: contentType || 'application/octet-stream' } };
    } catch (error) {
         console.error(`Error fetching image from ${url}: ${error.message}`);
         if (axios.isAxiosError(error)) {
             if (error.response) throw new Error(`Failed to fetch image: Server responded with status ${error.response.status}`);
             else if (error.request) throw new Error(`Failed to fetch image: No response received`);
             else throw new Error(`Failed to fetch image: Request setup error (${error.message})`);
         } else throw error;
    }
};
const reviewProductWithGemini = async (product) => {
    // ... (existing reviewProductWithGemini function)
    const visionModel = config.visionModel;
    if (!visionModel) {
        console.log("Gemini Vision model not available. Skipping review, defaulting to 'pending'.");
        return { status: 'pending', reason: 'Gemini Vision service unavailable' };
    }
    const { name, category, price, specifications, imageUrl, imageUrl2, shortDescription } = product;
    let imagePart, imagePart2 = null;
    try {
        imagePart = await urlToGenerativePart(imageUrl);
        if (!imagePart) throw new Error("Primary image processing failed.");
        console.log(`Prepared primary image for ${name} from ${imageUrl}`);
        if (imageUrl2) {
            try {
                imagePart2 = await urlToGenerativePart(imageUrl2);
                if (!imagePart2) throw new Error("Second image processing failed.");
                console.log(`Prepared second image for ${name} from ${imageUrl2}`);
            } catch (image2Error) {
                console.warn(`Could not process second image for "${name}" (${imageUrl2}): ${image2Error.message}.`);
            }
        }
    } catch (imageError) {
        console.error(`Critical image processing error for "${name}": ${imageError.message}`);
        return { status: 'rejected', reason: `Image Error: ${imageError.message}` };
    }
    const textPrompt = `
        Analyze the following product details AND the provided image(s) for an e-commerce store. Act as a strict content moderator.
        Instructions: Examine IMAGE(s) and TEXT. Verify if image(s) VISUALLY MATCH text description (name, category, short desc). Check BOTH image(s) and text for explicit content, weapons (unless category 'Toys' and clearly stated), illegal items, hate symbols/speech, unsafe content. Check if text details are legitimate (sensible name/desc, reasonable price for category, category matches image). SAFETY IS PARAMOUNT: If unsure, lean towards REJECTION. Use ONLY the required response format.
        Product Details: Name: ${name}, Category: ${category}, Short Desc: ${shortDescription || 'N/A'}, Price: ₹${price?.toFixed(2) || 'N/A'}, Specs: ${specifications || 'N/A'}, Image1: ${imageUrl}, Image2: ${imageUrl2 || 'N/A'}.
        Analysis Task: Based on text AND image(s), respond with "APPROVE" if legitimate, safe, matches description. Respond with "REJECT: [BRIEF REASON]" if ANY issues (safety violation, mismatch, misleading text, nonsensical entry/price).
        Your response:`;
    const textPart = { text: textPrompt };
    const contentParts = [textPart, imagePart];
    if (imagePart2) {
        contentParts.push(imagePart2);
    }
    try {
        console.log(`Sending "${name}" (${imagePart2 ? '2 images' : '1 image'}) for Gemini Vision review...`);
        const result = await visionModel.generateContent(
            contentParts,
            { safetySettings: config.geminiSafetySettings }
        );
        const response = result?.response;
        if (!response || response.promptFeedback?.blockReason) {
           const blockReason = response?.promptFeedback?.blockReason || 'Unknown safety reason';
           console.warn(`Gemini review blocked for "${name}". Reason: ${blockReason}.`);
           return { status: 'rejected', reason: `Content blocked by AI safety filters (${blockReason}).` };
        }
        const reviewText = response?.text()?.trim().toUpperCase() || '';
        console.log(`Gemini Vision Raw Response for "${name}": ${reviewText}`);
        if (reviewText.startsWith('APPROVE')) {
            console.log(`Gemini Vision approved: ${name}`);
            return { status: 'approved', reason: null };
        } else if (reviewText.startsWith('REJECT')) {
            const reason = reviewText.split(':')[1]?.trim() || 'Rejected by AI (no specific reason).';
            console.log(`Gemini Vision rejected: ${name}. Reason: ${reason}`);
            return { status: 'rejected', reason: reason };
        } else {
            console.warn(`Unexpected Gemini Vision response format for "${name}": ${reviewText}. Defaulting to pending.`);
            return { status: 'pending', reason: 'AI review result unclear.' };
        }
    } catch (error) {
        console.error(`Error during Gemini Vision API call for "${name}":`, error);
        let reason = 'AI review failed due to API error.';
        if (error.message && (error.message.includes('SAFETY') || error.message.includes('blocked'))) {
            reason = 'Content potentially blocked by safety filters during API call.';
        } else if (error.message) {
            reason = `AI API Error: ${error.message.substring(0, 100)}...`;
        }
        return { status: 'rejected', reason: reason };
    }
};


// --- From services/otpService.js ---
const generateOTP = (length = 6) => {
  // ... (existing generateOTP function)
  if (length <= 0) throw new Error('OTP length must be positive');
  const chars = '0123456789';
  let otp = '';
  const randomBytes = crypto.randomBytes(length);
  for (let i = 0; i < length; i++) {
    otp += chars[randomBytes[i] % chars.length];
  }
  return otp;
};

const setOTPExpiration = (minutes = 10) => {
  return new Date(Date.now() + minutes * 60 * 1000);
};

// --- Razorpay Service Functions --- // <<< ADDED
const createRazorpayOrder = async (amountInPaise, receiptId, notes = {}) => {
    if (!razorpayInstance) {
        throw new Error("Razorpay not initialized. Check API keys.");
    }
    const options = {
        amount: amountInPaise, // amount in the smallest currency unit (e.g., 50000 for ₹500.00)
        currency: "INR",
        receipt: receiptId, // Your internal order ID or a unique receipt string
        notes: notes // Optional notes object
    };
    try {
        const order = await razorpayInstance.orders.create(options);
        console.log("Razorpay order created:", order.id);
        return order; // Contains order_id, amount, currency etc.
    } catch (error) {
        console.error("Error creating Razorpay order:", error);
        throw error;
    }
};

const verifyRazorpayPayment = (razorpayOrderId, razorpayPaymentId, razorpaySignature) => {
    if (!process.env.RAZORPAY_KEY_SECRET) {
        console.error("RAZORPAY_KEY_SECRET not found for verification.");
        return false;
    }
    const body = razorpayOrderId + "|" + razorpayPaymentId;
    const expectedSignature = crypto
        .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)
        .update(body.toString())
        .digest('hex');
    
    return expectedSignature === razorpaySignature;
};


// --- Consolidated Exports ---
module.exports = {
    generateEmailHtml,
    reviewProductWithGemini,
    generateOTP,
    setOTPExpiration,
    createRazorpayOrder, // <<< ADDED
    verifyRazorpayPayment // <<< ADDED
};

vercel.json :
{
    "version": 2,
    "builds": [
      {
        "src": "server.js",
        "use": "@vercel/node"
      }
    ],
    "routes": [
      {
        "src": "/(.*)",
        "dest": "server.js"
      }
    ]
  }

public/css/style.css :
/* public/css/style.css */

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

:root {
  /* Core Color Palette */
  --primary-color: #007bff;
  --primary-hover: #0056b3;
  --secondary-color: #6c757d;
  --secondary-hover: #5a6268;
  --success-color: #28a745;
  --success-hover: #218838;
  --danger-color: #dc3545;
  --danger-hover: #c82333;
  --warning-color: #ffc107;
  --warning-hover: #e0a800;
  --info-color: #17a2b8;
  --info-hover: #138496;
  --light-color: #f8f9fa;
  --dark-color: #343a40;

  /* Text & Links */
  --text-color: #333;
  --link-color: var(--primary-color);

  /* Layout & Components */
  --card-bg: #ffffff;
  --card-shadow: 0 2px 5px rgba(0, 0, 0, 0.12);
  --border-color: #dee2e6;
  --border-radius: 0.6rem; /* Smoother corners */
  --spacing-unit: 1rem;

  /* Gradient Background Colors */
  --gradient-start: #e9f1ff;
  --gradient-mid1: #d0e0ff;
  --gradient-mid2: #e0ebf7;
  --gradient-end: #f0f5fd;
}

html {
  font-size: 16px;
  scroll-behavior: smooth;
}

body {
  font-family: 'Roboto', sans-serif;
  line-height: 1.6;
  color: var(--text-color);
  background: linear-gradient(135deg,
      var(--gradient-start) 0%,
      var(--gradient-mid1) 25%,
      var(--gradient-mid2) 55%,
      var(--gradient-end) 100%
    );
  background-attachment: fixed;
  background-size: cover;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

a {
  color: var(--link-color);
  text-decoration: none;
  transition: color 0.2s ease-in-out;
}

a:hover {
  color: var(--primary-hover);
  text-decoration: underline;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
}

h1, h2, h3, h4, h5, h6 {
  margin-bottom: calc(var(--spacing-unit) * 0.75);
  line-height: 1.3;
  font-weight: 500;
}

p {
  margin-bottom: var(--spacing-unit);
}

ul, ol {
    margin-bottom: var(--spacing-unit);
    padding-left: calc(var(--spacing-unit) * 1.5);
}

/* Utility Classes */
.hidden { display: none !important; }
.hide { display: none !important; } /* Alias */
.text-center { text-align: center; }
.text-danger { color: var(--danger-color) !important; }
.text-success { color: var(--success-color) !important; }
.text-warning { color: var(--warning-color) !important; }
.text-info { color: var(--info-color) !important; }
.text-muted { color: var(--secondary-color) !important; }
.mb-1 { margin-bottom: calc(var(--spacing-unit) * 0.25) !important; }
.mb-2 { margin-bottom: calc(var(--spacing-unit) * 0.5) !important; }
.mb-3 { margin-bottom: var(--spacing-unit) !important; }
.mb-4 { margin-bottom: calc(var(--spacing-unit) * 1.5) !important; }
.mt-1 { margin-top: calc(var(--spacing-unit) * 0.25) !important; }
.mt-2 { margin-top: calc(var(--spacing-unit) * 0.5) !important; }
.mt-3 { margin-top: var(--spacing-unit) !important; }
.mt-4 { margin-top: calc(var(--spacing-unit) * 1.5) !important; }
.ms-1 { margin-left: calc(var(--spacing-unit) * 0.25) !important; } /* Margin start */
.ms-2 { margin-left: calc(var(--spacing-unit) * 0.5) !important; }
.me-1 { margin-right: calc(var(--spacing-unit) * 0.25) !important; }
.me-2 { margin-right: calc(var(--spacing-unit) * 0.5) !important; } /* Margin end */
.me-3 { margin-right: var(--spacing-unit) !important; }
.p-1 { padding: calc(var(--spacing-unit) * 0.25) !important; }
.p-2 { padding: calc(var(--spacing-unit) * 0.5) !important; }
.p-3 { padding: var(--spacing-unit) !important; }
.pt-1 { padding-top: calc(var(--spacing-unit) * 0.25) !important; }
.pt-2 { padding-top: calc(var(--spacing-unit) * 0.5) !important; }
.pt-3 { padding-top: var(--spacing-unit) !important; }
.pb-1 { padding-bottom: calc(var(--spacing-unit) * 0.25) !important; }
.pb-2 { padding-bottom: calc(var(--spacing-unit) * 0.5) !important; }
.pb-3 { padding-bottom: var(--spacing-unit) !important; }
.d-flex { display: flex !important; }
.d-inline-flex { display: inline-flex !important; }
.d-block { display: block !important; }
.d-inline-block { display: inline-block !important; }
.align-items-center { align-items: center !important; }
.justify-content-between { justify-content: space-between !important; }
.justify-content-center { justify-content: center !important; }
.flex-wrap { flex-wrap: wrap !important; }
.flex-grow-1 { flex-grow: 1 !important; }
.gap-1 { gap: calc(var(--spacing-unit) * 0.25) !important; }
.gap-2 { gap: calc(var(--spacing-unit) * 0.5) !important; }
.gap-3 { gap: var(--spacing-unit) !important; }
.small { font-size: 0.875em; }
.fs-5 { font-size: 1.25rem !important; }
.w-100 { width: 100% !important; }
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}
.fw-bold { font-weight: bold !important; }
.fw-normal { font-weight: normal !important; }
.fw-light { font-weight: lighter !important; }
.text-capitalize { text-transform: capitalize !important; }
.border { border: 1px solid var(--border-color) !important; }
.border-top { border-top: 1px solid var(--border-color) !important; }
.border-bottom { border-bottom: 1px solid var(--border-color) !important; }
.rounded { border-radius: var(--border-radius) !important; }


/* Forms */
.inline-form {
    display: inline-block;
    margin-bottom: 0;
    vertical-align: middle;
}
.inline-form > * {
    margin-bottom: 0;
    vertical-align: middle;
}
.inline-form + .inline-form {
    margin-left: calc(var(--spacing-unit) * 0.3);
}


.form-group {
  margin-bottom: calc(var(--spacing-unit) * 0.8);
}

label:not(.form-label-inline) {
  display: block;
  margin-bottom: calc(var(--spacing-unit) * 0.3);
  font-weight: 500;
}
label.form-label-inline {
    margin-bottom: 0;
    margin-right: calc(var(--spacing-unit) * 0.4);
    font-weight: normal;
}

/* --- ADDED: Position relative for password wrapper --- */
.password-wrapper {
    position: relative;
}

input[type="text"],
input[type="email"],
input[type="password"],
input[type="tel"],
input[type="url"],
input[type="number"],
input[type="search"],
textarea,
select {
  width: 100%;
  padding: calc(var(--spacing-unit) * 0.6) calc(var(--spacing-unit) * 0.75);
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  font-size: 1rem;
  line-height: 1.5;
  background-color: #fff;
  color: var(--text-color);
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

/* --- ADDED: Padding-right for password input when toggle is present --- */
.password-wrapper input[type="password"],
.password-wrapper input[type="text"] {
    /* Adjust padding-right to make space for the icon */
    padding-right: calc(var(--spacing-unit) * 2.5) !important;
}


.form-control {
    display: block;
    width: 100%;
    padding: calc(var(--spacing-unit) * 0.6) calc(var(--spacing-unit) * 0.75);
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: var(--text-color);
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid var(--border-color);
    appearance: none;
    border-radius: var(--border-radius);
    transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
}

/* Helper text style */
.form-text {
    display: block;
    margin-top: .25rem;
    font-size: .8em; /* Smaller font size */
    color: var(--secondary-color); /* Muted color */
}


input[type="number"] {
    appearance: textfield;
    -moz-appearance: textfield;
}
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

textarea {
  resize: vertical;
  min-height: 80px;
}

input:focus,
textarea:focus,
select:focus,
.form-control:focus {
  border-color: var(--primary-color);
  outline: 0;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.form-control-sm {
  min-height: calc(1.5em + 0.5rem + 2px);
  height: auto;
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
  line-height: 1.5;
  border-radius: calc(var(--border-radius) * 0.75);
}
select.form-control-sm {
  height: calc(1.8125rem + 2px);
}

/* --- ADDED: Password Toggle Icon Button --- */
.password-toggle-btn {
    position: absolute;
    right: 10px; /* Adjust as needed */
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    color: var(--secondary-color); /* Icon color */
    font-size: 1rem; /* Adjust icon size */
    line-height: 1;
    z-index: 10; /* Ensure it's clickable */
}
.password-toggle-btn:hover,
.password-toggle-btn:focus {
    color: var(--primary-color);
    outline: none;
}
.password-toggle-btn i {
    display: block; /* Helps with vertical alignment if needed */
    width: 1em; /* Ensure consistent width for icon change */
    text-align: center;
}


/* Buttons */
.btn {
  display: inline-block;
  font-weight: 400;
  color: #fff;
  text-align: center;
  vertical-align: middle;
  cursor: pointer;
  user-select: none;
  background-color: var(--primary-color);
  border: 1px solid var(--primary-color);
  padding: calc(var(--spacing-unit) * 0.5) var(--spacing-unit);
  font-size: 1rem;
  line-height: 1.5;
  border-radius: var(--border-radius);
  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, opacity 0.15s ease-in-out; /* Added opacity transition */
  text-transform: capitalize;
}

.btn:hover {
  color: #fff;
  text-decoration: none;
  background-color: var(--primary-hover);
  border-color: var(--primary-hover);
}

.btn:focus {
  outline: 0;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);
}

.btn:disabled {
  opacity: 0.65;
  cursor: not-allowed;
  pointer-events: none;
}
.btn.loading {
    opacity: 0.75;
    cursor: wait;
    pointer-events: none;
}

/* --- ADDED: AJAX Add to Cart Button States --- */
.btn-ajax-add-to-cart.loading {
    opacity: 0.7;
    cursor: wait;
    pointer-events: none;
}
.btn-ajax-add-to-cart.success {
    background-color: var(--success-color);
    border-color: var(--success-color);
    color: white;
    pointer-events: none; /* Optionally disable clicks while showing success */
}


.btn-primary { background-color: var(--primary-color); border-color: var(--primary-color); color: #fff;}
.btn-primary:hover { background-color: var(--primary-hover); border-color: var(--primary-hover); }
.btn-secondary { background-color: var(--secondary-color); border-color: var(--secondary-color); color: #fff; }
.btn-secondary:hover { background-color: var(--secondary-hover); border-color: var(--secondary-hover); }
.btn-success { background-color: var(--success-color); border-color: var(--success-color); color: #fff;}
.btn-success:hover { background-color: var(--success-hover); border-color: var(--success-hover); }
.btn-danger { background-color: var(--danger-color); border-color: var(--danger-color); color: #fff;}
.btn-danger:hover { background-color: var(--danger-hover); border-color: var(--danger-hover); }
.btn-warning { background-color: var(--warning-color); border-color: var(--warning-color); color: #212529;}
.btn-warning:hover { background-color: var(--warning-hover); border-color: var(--warning-hover); }
.btn-info { background-color: var(--info-color); border-color: var(--info-color); color: #fff;}
.btn-info:hover { background-color: var(--info-hover); border-color: var(--info-hover); }
.btn-light { background-color: var(--light-color); border-color: var(--light-color); color: #212529;}
.btn-light:hover { background-color: #e2e6ea; border-color: #dae0e5; }
.btn-dark { background-color: var(--dark-color); border-color: var(--dark-color); color: #fff;}
.btn-dark:hover { background-color: #23272b; border-color: #1d2124; }

.btn-outline-secondary { color: var(--secondary-color); border-color: var(--secondary-color); background-color: transparent;}
.btn-outline-secondary:hover { color: #fff; background-color: var(--secondary-color); }
.btn-outline-primary { color: var(--primary-color); border-color: var(--primary-color); background-color: transparent;}
.btn-outline-primary:hover { color: #fff; background-color: var(--primary-color); }

.btn-text {
    background-color: transparent;
    border-color: transparent;
    color: var(--link-color);
    padding: calc(var(--spacing-unit) * 0.25) calc(var(--spacing-unit) * 0.4);
    border-radius: var(--border-radius);
    vertical-align: middle;
}
.btn-text:hover,
.btn-text:focus {
    background-color: rgba(0, 0, 0, 0.05);
    color: var(--primary-hover);
    text-decoration: none;
    outline: none;
    box-shadow: none;
}
.btn-text.btn-danger { color: var(--danger-color); }
.btn-text.btn-danger:hover,
.btn-text.btn-danger:focus { color: var(--danger-hover); background-color: rgba(220, 53, 69, 0.1); }

.btn-sm {
  padding: calc(var(--spacing-unit) * 0.25) calc(var(--spacing-unit) * 0.5);
  font-size: 0.875rem;
  line-height: 1.5;
  border-radius: calc(var(--border-radius) * 0.8);
}
.btn-lg {
    padding: calc(var(--spacing-unit) * 0.75) calc(var(--spacing-unit) * 1.25);
    font-size: 1.1rem;
}

.btn-block {
    display: block;
    width: 100%;
}

.btn .fa-spinner {
    margin-right: calc(var(--spacing-unit) * 0.25);
    animation: fa-spin 1s infinite linear;
}
@keyframes fa-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Alerts */
.alert {
  padding: calc(var(--spacing-unit) * 0.8) var(--spacing-unit);
  margin-bottom: var(--spacing-unit);
  border: 1px solid transparent;
  border-radius: var(--border-radius);
  position: relative;
}
.alert-success { color: #155724; background-color: #d4edda; border-color: #c3e6cb; }
.alert-danger { color: #721c24; background-color: #f8d7da; border-color: #f5c6cb; }
.alert-warning { color: #856404; background-color: #fff3cd; border-color: #ffeeba; }
.alert-info { color: #0c5460; background-color: #d1ecf1; border-color: #bee5eb; }
.alert-link { font-weight: bold; color: inherit; text-decoration: underline; }

.close-alert {
  position: absolute;
  top: 50%;
  right: 10px;
  transform: translateY(-50%);
  font-size: 1.2rem;
  line-height: 1;
  background: none;
  border: none;
  color: inherit;
  opacity: 0.7;
  cursor: pointer;
  padding: 0.2rem 0.4rem;
}
.close-alert:hover { opacity: 1; }

/* Toast Notifications */
.toast-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1055;
  width: auto;
  max-width: 350px;
  pointer-events: none;
}

.toast {
  background-color: var(--card-bg);
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: var(--border-radius);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  margin-bottom: var(--spacing-unit);
  padding: calc(var(--spacing-unit) * 0.75);
  padding-right: calc(var(--spacing-unit) * 2.5);
  position: relative;
  opacity: 0;
  transform: translateX(110%);
  transition: opacity 0.4s ease-in-out, transform 0.4s ease-in-out;
  width: 100%;
  pointer-events: auto;
  min-height: 50px;
  display: flex;
  align-items: center;
  overflow: hidden;
}

.toast.show {
  opacity: 1;
  transform: translateX(0);
}

.toast.hide {
    opacity: 0;
    transition: opacity 0.3s ease-in, transform 0.3s ease-in;
}

.toast-body {
  flex-grow: 1;
  font-size: 0.9rem;
  line-height: 1.4;
}

.toast-close-btn {
  position: absolute;
  top: 50%;
  right: 15px;
  transform: translateY(-50%);
  background: transparent;
  border: none;
  font-size: 1.4rem;
  line-height: 1;
  font-weight: bold;
  color: inherit;
  opacity: 0.6;
  cursor: pointer;
  padding: 0.1rem 0.4rem;
}
.toast-close-btn:hover {
  opacity: 1;
  text-decoration: none;
}

.toast-success { background-color: #d4edda; color: #155724; border-left: 5px solid var(--success-color); }
.toast-success .toast-close-btn { color: #155724; }
.toast-danger { background-color: #f8d7da; color: #721c24; border-left: 5px solid var(--danger-color); }
.toast-danger .toast-close-btn { color: #721c24; }
.toast-warning { background-color: #fff3cd; color: #856404; border-left: 5px solid var(--warning-color); }
.toast-warning .toast-close-btn { color: #856404; }
.toast-info { background-color: #d1ecf1; color: #0c5460; border-left: 5px solid var(--info-color); }
.toast-info .toast-close-btn { color: #0c5460; }


/* ============================ */
/* Header Styles                */
/* ============================ */

.app-header {
  background-color: var(--primary-color);
  color: var(--light-color);
  padding: calc(var(--spacing-unit) * 0.4) var(--spacing-unit);
  position: sticky;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 1000;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 1200px;
  margin: 0 auto;
  gap: calc(var(--spacing-unit) * 0.5);
  min-height: 40px;
}

/* Left Side (Logo) */
.nav-left {
  display: flex;
  align-items: center;
  flex-shrink: 0;
  margin-right: auto;
}

.app-logo {
  display: flex;
  align-items: center;
  color: var(--light-color);
  font-size: 1.1rem;
  font-weight: 500;
  text-decoration: none;
  margin-right: calc(var(--spacing-unit) * 0.5);
}
.app-logo:hover,
.app-logo:focus {
  color: var(--warning-color);
  text-decoration: none;
}
.app-logo i {
  margin-right: calc(var(--spacing-unit) * 0.3);
  font-size: 1.2em;
}

/* Center Section (Search Container) */
.search-container-dynamic {
  flex-grow: 0;
  max-width: none;
  order: 1;
  margin: 0;
  position: static;
}

/* --- Search Bar Black & White Styling (Shared) --- */
.search-form-dynamic {
  display: flex;
  align-items: center;
  width: 100%;
  height: 38px;
  background-color: #ffffff;
  border: 1px solid #ccc;
  border-radius: var(--border-radius);
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
  overflow: hidden;
  color: var(--dark-color);
}
#search-input-dynamic {
  flex-grow: 1;
  padding: 0 calc(var(--spacing-unit) * 0.75);
  border: none;
  background-color: transparent;
  color: var(--dark-color);
  font-size: 0.9rem;
  height: 100%;
  outline: none;
}
#search-input-dynamic::placeholder {
  color: #6c757d;
  opacity: 1;
}
.search-submit-btn-dynamic {
  background: transparent;
  border: none;
  color: var(--dark-color);
  padding: 0 calc(var(--spacing-unit) * 0.75);
  cursor: pointer;
  font-size: 1rem;
  height: 100%;
  display: flex;
  align-items: center;
  flex-shrink: 0;
  transition: background-color 0.15s ease-in-out;
}
.search-submit-btn-dynamic:hover {
  background-color: rgba(0, 0, 0, 0.05);
}
/* --- End Shared Search Bar Styling --- */

/* Suggestions Dropdown (Shared) */
.suggestions-dropdown {
    display: none;
    position: absolute;
    left: 0;
    right: 0;
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    border-top: none;
    border-radius: 0 0 var(--border-radius) var(--border-radius);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    max-height: 400px;
    overflow-y: auto;
    z-index: 1010;
}
.suggestions-dropdown.active { display: block; }
.suggestion-item {
    display: flex;
    align-items: center;
    padding: calc(var(--spacing-unit) * 0.5) calc(var(--spacing-unit) * 0.75);
    cursor: pointer;
    color: var(--text-color);
    text-decoration: none;
    border-bottom: 1px solid var(--border-color);
    gap: calc(var(--spacing-unit) * 0.5);
}
.suggestion-item:last-child { border-bottom: none; }
.suggestion-item:hover,
.suggestion-item:focus {
    background-color: var(--light-color);
    text-decoration: none;
    color: var(--text-color);
}
.suggestion-item img {
    width: 35px;
    height: 35px;
    object-fit: cover;
    border-radius: calc(var(--border-radius) * 0.75);
    flex-shrink: 0;
}
.suggestion-item span {
    font-size: 0.9rem;
    line-height: 1.3;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}
.suggestion-item i {
    font-style: normal;
    color: var(--secondary-color);
}


/* Right Side (Nav Links, Profile, Login) */
.nav-right {
  display: flex;
  align-items: center;
  flex-shrink: 0;
  gap: calc(var(--spacing-unit) * 0.4);
}

/* General Nav Link Styling (Mobile Base) */
.nav-link {
  color: var(--light-color);
  padding: calc(var(--spacing-unit) * 0.5) calc(var(--spacing-unit) * 0.6);
  border-radius: var(--border-radius);
  display: flex;
  flex-direction: column;
  align-items: center;
  font-size: 0.7rem;
  text-decoration: none;
  background: none;
  border: none;
  cursor: pointer;
  transition: background-color 0.2s ease;
  line-height: 1.2;
}
.nav-link span { display: none; }
.nav-link i { font-size: 1.2rem; margin-bottom: 2px; }

.nav-link:hover,
.nav-link.active,
.nav-link:focus {
  background-color: rgba(255, 255, 255, 0.15);
  color: #fff;
  text-decoration: none;
  outline: none;
}

/* Cart Badge */
.nav-link-cart { position: relative; }
.cart-badge {
  position: absolute;
  top: 0px;
  right: 0px;
  background-color: var(--danger-color);
  color: white;
  border-radius: 50%;
  padding: 1px 5px;
  font-size: 0.7rem;
  font-weight: bold;
  line-height: 1;
  pointer-events: none;
}
.cart-badge.hide { display: none; }

/* Login/Register Button */
.btn-login-register {
    font-size: 0.85rem;
    padding: calc(var(--spacing-unit) * 0.4) calc(var(--spacing-unit) * 0.8);
    background-color: rgba(255, 255, 255, 0.9);
    color: var(--primary-color);
    border: none;
    font-weight: 500;
}
.btn-login-register:hover,
.btn-login-register:focus {
    background-color: #fff;
    color: var(--primary-hover);
}
.btn-login-register i {
    margin-right: calc(var(--spacing-unit) * 0.3);
}


/* Profile Avatar */
.profile-avatar-link {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background-color: var(--light-color);
    color: var(--primary-color);
    font-weight: 500;
    font-size: 0.9rem;
    text-decoration: none;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    border: 1px solid transparent;
    margin-left: calc(var(--spacing-unit) * 0.2);
}
.profile-avatar-link:hover,
.profile-avatar-link:focus,
.profile-avatar-link.active {
    text-decoration: none;
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3);
    outline: none;
}
.profile-avatar-initials { line-height: 1; }

/* Mobile Search Toggle Button */
.search-toggle-btn {
    display: flex;
    order: 0;
}

/* Container and Footer */
.container {
  width: 100%;
  padding: var(--spacing-unit);
  margin: 0 auto;
  flex-grow: 1;
}

.app-footer {
  display: none;
  padding: var(--spacing-unit);
  text-align: center;
  font-size: 0.85rem;
  color: var(--secondary-color);
  background-color: rgba(248, 249, 250, 0.9);
  border-top: 1px solid var(--border-color);
  margin-top: auto;
}


/* Product Index */
.product-index-container h1 { font-size: 1.5rem; }

.product-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: calc(var(--spacing-unit) * 0.75);
}

.product-card {
  background-color: var(--card-bg);
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  box-shadow: var(--card-shadow);
  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}
.product-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.product-link {
  color: inherit;
  text-decoration: none;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}
.product-link:hover{
  color: inherit;
  text-decoration: none;
}

.product-image {
  width: 100%;
  aspect-ratio: 1 / 1;
  object-fit: cover;
}

.product-info {
  padding: calc(var(--spacing-unit) * 0.6);
  flex-grow: 1;
}

.product-name {
  font-size: 0.95rem;
  font-weight: 500;
  margin-bottom: calc(var(--spacing-unit) * 0.25);
  line-height: 1.3;
  height: 2.6em;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}

.product-price {
  font-weight: 500;
  color: var(--success-color);
  margin-bottom: calc(var(--spacing-unit) * 0.2);
  font-size: 1rem;
}

.product-stock,
.product-rating {
  font-size: 0.8rem;
  color: var(--secondary-color);
  margin-bottom: calc(var(--spacing-unit) * 0.2);
}
.product-rating .fa-star, .product-rating .fa-star-half-alt { color: #f8d347; }
.product-rating .fa-star-regular { color: #e4e5e9; }

/* --- UPDATED: Add to Cart Form (AJAX) Container --- */
.product-card-actions {
    padding: 0 calc(var(--spacing-unit) * 0.6) calc(var(--spacing-unit) * 0.6);
}
/* --- UPDATED: Styling for AJAX Add Button --- */
.btn-ajax-add-to-cart {
  width: 100%;
  padding: calc(var(--spacing-unit) * 0.5);
  font-size: 0.9rem;
}
.btn-ajax-add-to-cart i {
    margin-right: calc(var(--spacing-unit) * 0.25);
    /* Ensure spinner aligns well */
    vertical-align: middle;
}


/* Product Detail */
.product-detail-container {
  background-color: var(--card-bg);
  padding: var(--spacing-unit);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
}
.product-detail-main {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-unit);
}
.product-detail-image { /* This styles the actual img tag */
    display: block; /* Remove extra space below image */
    width: 100%;
    height: 100%;
    object-fit: cover; /* Cover the area, might crop */
    /* object-fit: contain; */ /* Uncomment if you prefer to see the whole image */
    object-position: center center; /* Center the image */
    border-radius: inherit; /* Inherit border-radius from container */
}
.product-detail-info h1 {
    font-size: 1.6rem;
    margin-bottom: calc(var(--spacing-unit) * 0.5);
}
.detail-price {
    font-size: 1.4rem;
    font-weight: bold;
    color: var(--success-color);
    margin-bottom: calc(var(--spacing-unit) * 0.3);
}
.detail-stock {
    font-size: 0.9rem;
    color: var(--secondary-color);
    margin-bottom: calc(var(--spacing-unit) * 0.3);
}
.detail-rating {
    margin-bottom: calc(var(--spacing-unit) * 0.75);
    color: var(--secondary-color);
}
.detail-rating i { color: #f8d347; }
.detail-rating .fa-star-regular { color: #e4e5e9; }

.product-actions {
    margin: calc(var(--spacing-unit) * 1.2) 0;
    display: flex;
    flex-direction: column;
    gap: calc(var(--spacing-unit) * 0.5);
}
.quantity-selector {
    display: flex;
    align-items: center;
    margin-bottom: calc(var(--spacing-unit) * 0.5);
    max-width: 150px;
}
.quantity-selector label {
    margin: 0 calc(var(--spacing-unit) * 0.4) 0 0;
    font-size: 0.9rem;
}
.quantity-selector input {
    text-align: center;
    font-size: 1rem;
    padding: calc(var(--spacing-unit) * 0.4);
}
.product-actions .btn {
    width: 100%;
    padding: calc(var(--spacing-unit) * 0.6) var(--spacing-unit);
    font-size: 1rem;
}

.share-section { margin: calc(var(--spacing-unit) * 1.2) 0; }
.fallback-share-links { margin-top: 0.5rem; }
.fallback-share-links a { margin: 0 0.3rem; font-size: 1.5rem; }

.product-specifications { margin-top: calc(var(--spacing-unit) * 1.5); }
.product-specifications h3 { font-size: 1.1rem; border-bottom: 1px solid var(--border-color); padding-bottom: 0.3rem; margin-bottom: 0.5rem;}
.product-specifications pre {
    white-space: pre-wrap;
    font-size: 0.9rem;
    background-color: #f8f8f8;
    padding: calc(var(--spacing-unit) * 0.5);
    border-radius: var(--border-radius);
    max-height: 200px;
    overflow-y: auto;
}

/* Rating Section */
.product-rating-section {
    margin-top: var(--spacing-unit);
    border-top: 1px solid var(--border-color);
    padding-top: var(--spacing-unit);
}
.product-rating-section h3 {
    margin-bottom: calc(var(--spacing-unit) * 0.6);
    font-size: 1.2em;
}

.rating-stars { display: inline-flex; flex-direction: row-reverse; justify-content: flex-end; margin-bottom: calc(var(--spacing-unit) * 0.8); }
.rating-stars input[type="radio"] { display: none; }
.rating-stars label { display: inline-block; cursor: pointer; font-size: 1.8rem; color: lightgray; padding: 0 0.1em; margin: 0; transition: color 0.2s ease-in-out; }
.rating-stars label:hover, .rating-stars label:hover ~ label { color: #f8d347; }
.rating-stars input[type="radio"]:checked ~ label { color: #f8d347; }

.rating-stats-container { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; }
.rating-stats-container h3 { margin-bottom: 15px; font-size: 1.4em; color: #333; }
.rating-summary { display: flex; align-items: center; margin-bottom: 20px; gap: 15px; }
.rating-average { display: flex; align-items: center; }
.rating-average-value { font-size: 2.5em; font-weight: 500; margin-right: 5px; color: #222; }
.rating-average .fa-star { font-size: 1.2em; color: #666; margin-bottom: 8px; }
.rating-total { font-size: 0.95em; color: #555; }
.rating-bars { max-width: 400px; margin: 0 auto; }
.rating-bar-row { display: flex; align-items: center; margin-bottom: 8px; gap: 10px; }
.rating-bar-label { width: 45px; font-size: 0.9em; color: #444; text-align: right; flex-shrink: 0; }
.rating-bar-label .fa-star { color: #f8c107; font-size: 0.9em; }
.rating-bar-progress { flex-grow: 1; height: 8px; background-color: #e0e0e0; border-radius: 4px; overflow: hidden; }
.progress { background-color: #e9ecef; border-radius: 4px; display: flex; height: 1rem; overflow: hidden; font-size: .75rem;}
.progress-bar { background-color: var(--primary-color); color: #fff; display: flex; flex-direction: column; justify-content: center; overflow: hidden; text-align: center; white-space: nowrap; transition: width .6s ease;}
.rating-bar-fill { height: 100%; background-color: #28a745; border-radius: 4px; transition: width 0.3s ease-in-out; }
.rating-bar-row:nth-child(1) .rating-bar-fill { background-color: #28a745; } /* 5 stars */
.rating-bar-row:nth-child(2) .rating-bar-fill { background-color: #84c54c; } /* 4 stars */
.rating-bar-row:nth-child(3) .rating-bar-fill { background-color: #ffc107; } /* 3 stars */
.rating-bar-row:nth-child(4) .rating-bar-fill { background-color: #fd7e14; } /* 2 stars */
.rating-bar-row:nth-child(5) .rating-bar-fill { background-color: #dc3545; } /* 1 star */
.rating-bar-count { width: 40px; font-size: 0.9em; color: #555; text-align: right; flex-shrink: 0; }


/* Auth */
.auth-container {
  max-width: 450px;
  margin: var(--spacing-unit) auto;
  padding: var(--spacing-unit);
  background-color: var(--card-bg);
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
}
.auth-container h1 { font-size: 1.6rem; text-align: center; margin-bottom: var(--spacing-unit); }
.auth-form .btn { width: 100%; margin-top: calc(var(--spacing-unit) * 0.5); padding: calc(var(--spacing-unit) * 0.7); }
.auth-links { margin-top: var(--spacing-unit); font-size: 0.9rem; text-align: center; }
.auth-links p { margin-bottom: calc(var(--spacing-unit) * 0.4); }
.auth-container p { text-align: center; margin-bottom: var(--spacing-unit);}
.auth-container form ~ .auth-links { border-top: 1px solid var(--border-color); padding-top: var(--spacing-unit); }
#otp { text-align: center; font-size: 1.2rem; letter-spacing: 4px; }


/* Cart */
.cart-container h1 { font-size: 1.5rem; margin-bottom: var(--spacing-unit); }
.cart-items { margin-bottom: var(--spacing-unit); }

.cart-item {
  display: grid;
  grid-template-columns: 80px 1fr auto;
  grid-template-areas:
    "image details remove"
    "image quantity subtotal";
  gap: calc(var(--spacing-unit) * 0.75);
  background-color: var(--card-bg);
  padding: calc(var(--spacing-unit) * 0.75);
  border-bottom: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  margin-bottom: var(--spacing-unit);
  box-shadow: var(--card-shadow);
}

.cart-item-image { grid-area: image; align-self: center;}
.cart-item-image img {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: calc(var(--border-radius) * 0.75);
}
.cart-item-details { grid-area: details; }
.cart-item-quantity { grid-area: quantity; display: flex; align-items: center; gap: 0.3rem; }
.cart-item-subtotal { grid-area: subtotal; text-align: right; font-weight: 500; align-self: center; }
.cart-item-remove { grid-area: remove; text-align: right; align-self: start;}
.cart-item-name { font-size: 1rem; font-weight: 500; margin-bottom: calc(var(--spacing-unit) * 0.2); }
.cart-item-price { font-size: 0.9rem; color: var(--secondary-color); margin-bottom: calc(var(--spacing-unit) * 0.2); }
.cart-item-stock { font-size: 0.8rem; color: #6c757d; }
.cart-item-quantity label { font-size: 0.9rem; margin-bottom: 0; display: none; }
.cart-item-quantity input { width: 50px; padding: calc(var(--spacing-unit) * 0.3) calc(var(--spacing-unit) * 0.4); text-align: center; font-size: 0.9rem; }
.cart-item-quantity .btn-update-qty { font-size: 0.8rem; padding: calc(var(--spacing-unit) * 0.3) calc(var(--spacing-unit) * 0.6); }
.cart-item-subtotal { font-size: 0.9rem; white-space: nowrap; }
.cart-item-subtotal .item-subtotal-value { font-weight: 500; }
.cart-item-remove .btn { padding: 0.2rem 0.4rem; font-size: 0.8rem; ; }

.cart-summary {
  margin-top: calc(var(--spacing-unit) * 1.5);
  padding: var(--spacing-unit);
  background-color: #f8f9fa;
  border-top: 2px solid var(--primary-color);
  border-radius: var(--border-radius);
  text-align: right;
}
.cart-summary h2 { font-size: 1.3rem; margin-bottom: calc(var(--spacing-unit) * 0.75); }
.btn-checkout { width: 100%; padding: calc(var(--spacing-unit) * 0.7); font-size: 1.1rem; }


/* Checkout */
.checkout-container h1 { font-size: 1.5rem; margin-bottom: var(--spacing-unit);}
.checkout-grid { display: flex; flex-direction: column; gap: var(--spacing-unit); }

.checkout-address, .checkout-summary {
    background-color: var(--card-bg);
    padding: var(--spacing-unit);
    border-radius: var(--border-radius);
    border: 1px solid var(--border-color);
    box-shadow: var(--card-shadow);
}
.checkout-address h2, .checkout-summary h2 { font-size: 1.2rem; border-bottom: 1px solid var(--border-color); padding-bottom: calc(var(--spacing-unit) * 0.4); margin-bottom: var(--spacing-unit); }
.saved-address { font-size: 0.95rem; margin-bottom: var(--spacing-unit); }
.saved-address p { margin-bottom: calc(var(--spacing-unit) * 0.2); line-height: 1.4; }
#edit-address-btn { margin-top: calc(var(--spacing-unit) * 0.5); }
.address-form h3 { font-size: 1.1rem; }

.checkout-items { max-height: 200px; overflow-y: auto; margin-bottom: var(--spacing-unit); padding-right: calc(var(--spacing-unit) * 0.5); }
.checkout-item { display: flex; align-items: center; gap: calc(var(--spacing-unit) * 0.5); margin-bottom: calc(var(--spacing-unit) * 0.5); font-size: 0.9rem; }
.checkout-item-image img {
    width: 40px;
    height: 40px;
    object-fit: cover;
    border-radius: calc(var(--border-radius) * 0.75);
}
.checkout-item-info { flex-grow: 1; }
.checkout-item-price { font-weight: 500; white-space: nowrap;}

.checkout-totals { font-size: 0.95rem; }
.checkout-totals p { display: flex; justify-content: space-between; margin-bottom: calc(var(--spacing-unit) * 0.3); }
.checkout-totals hr { margin: calc(var(--spacing-unit) * 0.5) 0; border-color: var(--border-color); opacity: 0.5;}
.checkout-totals strong { font-weight: bold; }

.checkout-payment h3 { font-size: 1.1rem; margin: calc(var(--spacing-unit) * 1) 0 calc(var(--spacing-unit) * 0.5) 0; }
.payment-option {
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    background-color: #f0f0f0;
    opacity: 0.8;
    margin-bottom: 0.5rem;
    cursor: pointer;
}
.payment-option.selected { border-color: var(--primary-color); opacity: 1; background-color: #e7f3ff; }
.payment-option label { font-weight: normal; display: flex; align-items: center; cursor: pointer; margin-bottom: 0; }
.payment-option input[type="radio"] { margin-right: 0.5rem; }
.payment-option i { margin-right: 0.3rem; color: var(--success-color);}

.place-order-form { margin-top: var(--spacing-unit); }
.btn-place-order { width: 100%; font-size: 1.1rem; padding: calc(var(--spacing-unit) * 0.7); }


/* My Orders */
.my-orders-container h1 { font-size: 1.5rem; margin-bottom: var(--spacing-unit); }
.order-list { display: flex; flex-direction: column; gap: var(--spacing-unit); }
.order-card {
  background-color: var(--card-bg);
  border-radius: var(--border-radius);
  border: 1px solid var(--border-color);
  box-shadow: var(--card-shadow);
  overflow: hidden;
}

.order-header {
  background-color: #f8f9fa;
  padding: calc(var(--spacing-unit) * 0.6);
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  font-size: 0.85rem;
  color: var(--secondary-color);
  border-bottom: 1px solid var(--border-color);
}
.order-header > div { margin-right: calc(var(--spacing-unit) * 0.8); margin-bottom: calc(var(--spacing-unit) * 0.2); white-space: nowrap; }
.order-header strong { color: var(--text-color); }
.order-status { display: inline-block; } /* Used within header */

.order-body { padding: calc(var(--spacing-unit) * 0.75); display: flex; flex-direction: column; gap: calc(var(--spacing-unit) * 0.75); }

/* Order Item Images (Shared) */
.order-items-images { display: flex; flex-wrap: wrap; gap: 8px; padding-left: 0; list-style: none; }
.order-item-thumbnail {
    display: inline-block;
    width: 40px;
    height: 40px;
    object-fit: cover;
    border-radius: calc(var(--border-radius) * 0.75);
    border: 1px solid var(--border-color);
    transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
    vertical-align: middle;
    background-color: #f8f9fa;
}
.order-item-thumbnail:hover { opacity: 0.85; transform: scale(1.05); z-index: 10; }
.order-item-thumbnail-placeholder {
    display: inline-flex; align-items: center; justify-content: center; width: 40px; height: 40px;
    border-radius: calc(var(--border-radius) * 0.75);
    border: 1px dashed var(--secondary-color); background-color: var(--light-color); color: var(--secondary-color); font-size: 0.6rem; font-weight: bold; text-align: center; text-decoration: none; transition: background-color 0.2s ease-in-out; vertical-align: middle; line-height: 1; padding: 2px;
}
.order-item-thumbnail-placeholder:hover { background-color: #e2e6ea; text-decoration: none; }

.order-details { font-size: 0.9rem; line-height: 1.5;}
.order-details p { margin-bottom: calc(var(--spacing-unit) * 0.3); }
.order-actions { padding: 0 calc(var(--spacing-unit) * 0.75) calc(var(--spacing-unit) * 0.75); text-align: right; }


/* Status Badge */
.status-badge {
    font-weight: bold;
    padding: 0.2em 0.5em;
    border-radius: var(--border-radius);
    color: #333;
    background-color: var(--secondary-color);
    font-size: 0.85em;
    display: inline-block;
    vertical-align: middle;
    text-transform: capitalize;
}
.status-pending, .status-badge.status-pending { background-color: #fff3cd; color: #856404; }
.status-out-for-delivery, .status-badge.status-out-for-delivery { background-color: #d1ecf1; color: #0c5460; }
.status-delivered, .status-badge.status-delivered { background-color: #d4edda; color: #155724; }
.status-cancelled, .status-badge.status-cancelled { background-color: #f8d7da; color: #721c24; }
.status-approved, .status-badge.status-approved { background-color: #d4edda; color: #155724; }
.status-rejected, .status-badge.status-rejected { background-color: #f8d7da; color: #721c24; }

.order-card.status-cancelled, .data-table tr.status-cancelled { opacity: 0.9; }
.data-table tr.status-rejected { opacity: 0.85; }
.data-table tr.status-pending { /* Optional: style pending rows */ }

/* Admin/Seller Pages */
.admin-manage-container, .admin-dashboard-container { padding: var(--spacing-unit); }
.admin-manage-container h1, .admin-dashboard-container h1 { font-size: 1.5rem; margin-bottom: var(--spacing-unit); border-bottom: 1px solid var(--border-color); padding-bottom: calc(var(--spacing-unit) * 0.5); }


/* Responsive Tables */
.table-container { overflow-x: auto; margin-bottom: var(--spacing-unit); }

.data-table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  font-size: 0.9rem;
  background-color: var(--card-bg);
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  overflow: hidden;
}

.data-table thead {
  display: none;
  background-color: #f8f9fa;
  font-weight: 500;
  color: var(--dark-color);
  font-size: 0.85rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}
.data-table th { padding: calc(var(--spacing-unit) * 0.7) calc(var(--spacing-unit) * 0.6); text-align: left; border-bottom: 1px solid var(--border-color); }

/* Mobile Table Rows (Card-like) */
.data-table tbody tr {
  display: block;
  margin-bottom: calc(var(--spacing-unit) * 1);
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  padding: calc(var(--spacing-unit) * 0.8);
  background-color: var(--card-bg);
  box-shadow: var(--card-shadow);
  transition: box-shadow 0.2s ease-in-out;
}
.data-table tbody tr:last-child { margin-bottom: 0; }
.data-table tbody tr:hover { box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1); }

.data-table td { display: block; text-align: right; padding: calc(var(--spacing-unit) * 0.4) 0; position: relative; border-bottom: 1px dashed #eee; }
.data-table td:last-child { border-bottom: none; }
.data-table td::before { content: attr(data-label); position: absolute; left: 0; font-weight: 500; text-align: left; padding-right: 10px; color: var(--secondary-color); width: 40%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; font-size: 0.85em; }

.table-img {
    max-width: 50px;
    border-radius: calc(var(--border-radius) * 0.75);
    display: inline-block;
    margin-left: 45%;
    vertical-align: middle;
}
.data-table td:has(img) { text-align: right; padding: 5px 0; }

/* Mobile Actions Cell */
.data-table td.actions-cell { padding-top: calc(var(--spacing-unit) * 0.6); }
.data-table td.actions-cell::before { display: none; }
.actions-cell .action-group { border-top: 1px solid #eee; padding-top: calc(var(--spacing-unit) * 0.6); margin-top: calc(var(--spacing-unit) * 0.6); text-align: left; }
.actions-cell .action-group:first-child { border-top: none; margin-top: 0; padding-top: 0; }
.actions-cell .action-group-title { font-size: 0.8em; font-weight: bold; color: var(--secondary-color); margin-bottom: calc(var(--spacing-unit) * 0.4); display: block; text-align: left; }
.actions-cell form, .actions-cell .btn { margin: calc(var(--spacing-unit) * 0.25) 0; display: block; width: 100%; }
.actions-cell .inline-form { display: flex; flex-wrap: wrap; gap: calc(var(--spacing-unit) * 0.4); align-items: center; }
.actions-cell .inline-form input, .actions-cell .inline-form button { width: auto; flex-grow: 1; }
.actions-cell .inline-form button { flex-grow: 0; flex-shrink: 0; }
.actions-cell select.form-control-sm { margin-bottom: 5px; font-size: 0.9rem; padding: calc(var(--spacing-unit)*0.4) calc(var(--spacing-unit)*0.6); height: auto; width: 100%; }
.actions-cell .no-actions-text { display: block; text-align: left; margin-top: calc(var(--spacing-unit) * 0.5); color: var(--secondary-color); font-style: italic; }

/* Mobile Order Table Specifics */
.order-table td[data-label="Items"] .order-items-summary { font-size: 0.85em; line-height: 1.5; margin-bottom: calc(var(--spacing-unit) * 0.5); text-align: left; margin-left: 45%; }
.order-table td[data-label="Items"] .order-items-summary strong { color: var(--dark-color); }
.order-table .order-items-images { margin-top: calc(var(--spacing-unit) * 0.4); justify-content: flex-end; margin-left: 45%; }
.order-table td[data-label="Total"].order-total strong { font-size: 1.1em; color: var(--success-color); }
.order-table td[data-label="Status"] .status-badge { float: right; margin-bottom: 5px; }
.order-table td[data-label="Status"] small { clear: both; display: block; text-align: right; margin-top: calc(var(--spacing-unit) * 0.3); }

/* Mobile Delivery OTP */
.delivery-otp-display {
    margin-top: 10px;
    padding: 8px 12px;
    background-color: #e6ffed;
    border: 1px solid #b7e4c7;
    border-radius: var(--border-radius);
    font-size: 0.9rem;
    text-align: left;
    clear: both;
    margin-left: 45%;
}
.delivery-otp-display p { margin-bottom: 3px !important; }
.delivery-otp-code {
    font-weight: bold;
    color: #2b9348;
    font-size: 1.1em;
    margin: 0 3px;
    letter-spacing: 1px;
    background-color: #fff;
    padding: 1px 4px;
    border-radius: calc(var(--border-radius) * 0.5);
}
.delivery-otp-display small { display: block; margin-top: 3px; color: #555; }
.verify-otp-form { display: flex; align-items: center; gap: 5px; width: 100%; }
.verify-otp-form input[name="otp"] { flex-grow: 1; max-width: 150px; padding: calc(var(--spacing-unit)*0.4) calc(var(--spacing-unit)*0.6); font-size: 0.9rem; text-align: center; border-radius: var(--border-radius); }
.verify-otp-form button { flex-shrink: 0; width: auto; padding: calc(var(--spacing-unit)*0.4) calc(var(--spacing-unit)*0.6); font-size: 0.9rem; line-height: 1.4; }

/* Admin Actions Grid */
.admin-actions-grid { display: grid; grid-template-columns: repeat(1, 1fr); gap: var(--spacing-unit); margin-top: var(--spacing-unit); }
.admin-action-card {
    background-color: var(--card-bg);
    padding: var(--spacing-unit);
    border-radius: var(--border-radius);
    border: 1px solid var(--border-color);
    text-align: center;
    box-shadow: var(--card-shadow);
    transition: transform 0.2s, box-shadow 0.2s;
    color: var(--text-color);
    text-decoration: none;
}
.admin-action-card:hover { transform: translateY(-3px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); text-decoration: none; }
.admin-action-card i { font-size: 2rem; color: var(--primary-color); margin-bottom: 0.5rem; }
.admin-action-card h3 { font-size: 1.1rem; margin-bottom: 0.3rem; color: var(--text-color); }
.admin-action-card p { font-size: 0.85rem; color: var(--secondary-color); margin-bottom: 0.5rem; }


/* Error Page */
.error-container { text-align: center; padding-top: 2rem; }
.error-container h1 { color: var(--danger-color); margin-bottom: 0.5rem; }
.error-container .lead { font-size: 1.1rem; }
.error-container details {
    text-align: left;
    margin-top: 1rem;
    background: #f1f1f1;
    padding: 0.5rem;
    border-radius: var(--border-radius);
}
.error-container details summary { cursor: pointer; font-weight: bold; }
.error-container details pre { white-space: pre-wrap; font-size: 0.8em; margin-top: 0.5rem; }


/* Profile Page */
.profile-container {
    max-width: 800px;
    margin: var(--spacing-unit) auto;
    padding: calc(var(--spacing-unit) * 1.5);
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    box-shadow: var(--card-shadow);
}
.profile-container h1 { font-size: 1.8rem; text-align: center; margin-bottom: calc(var(--spacing-unit) * 0.5); }
.profile-container > p.text-muted { text-align: center; font-size: 1.1rem; }
.profile-section { margin-top: calc(var(--spacing-unit) * 1.5); padding-top: calc(var(--spacing-unit) * 1); border-top: 1px solid var(--border-color); }
.profile-section:first-of-type { border-top: none; padding-top: 0; margin-top: calc(var(--spacing-unit) * 0.8); }
.profile-section h2 { font-size: 1.4rem; margin-bottom: calc(var(--spacing-unit) * 0.8); color: var(--primary-color); }
#saved-address-display p { margin-bottom: calc(var(--spacing-unit) * 0.3); line-height: 1.5; font-size: 1rem; }
#saved-address-display strong { font-weight: 500; }
#edit-address-btn, #add-address-btn { margin-top: calc(var(--spacing-unit) * 0.5); }
.address-form { max-width: 500px; }
.address-form h3 { font-size: 1.2rem; margin-bottom: var(--spacing-unit); font-weight: 500; }
#cancel-edit-btn { margin-left: calc(var(--spacing-unit) * 0.5); }
.dashboards-section .btn,
.orders-section .btn {
    margin-right: 10px; margin-bottom: 10px;
}
.logout-section .btn { min-width: 120px; }


/* Banner Slider Styles */
.banner-slider-container {
  position: relative;
  width: 100%;
  aspect-ratio: 2.5 / 1;
  overflow: hidden;
  border-radius: var(--border-radius);
  background-color: #e0e0e0;
  touch-action: pan-y; /* Enable vertical scroll, handle horizontal swipe in JS */
  -webkit-tap-highlight-color: transparent; /* Optional: Remove tap highlight on mobile */
}

.banner-slides {
  position: relative;
  width: 100%;
  height: 100%;
}

.banner-slide {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.6s ease-in-out;
  background-color: #eee;
}

.banner-slide.active {
  opacity: 1;
  visibility: visible;
  z-index: 1;
}

.banner-link {
  display: block;
  width: 100%;
  height: 100%;
}

.banner-image {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* Navigation Arrows */
.banner-nav {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background-color: rgba(0, 0, 0, 0.4);
  color: white;
  border: none;
  border-radius: 50%;
  width: 35px;
  height: 35px;
  font-size: 0.9rem;
  cursor: pointer;
  z-index: 2;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s ease;
  opacity: 0.8;
}

.banner-nav:hover {
  background-color: rgba(0, 0, 0, 0.6);
  opacity: 1;
}

.banner-prev { left: 10px; }
.banner-next { right: 10px; }

/* Navigation Dots */
.banner-dots {
  position: absolute;
  bottom: 10px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 8px;
  z-index: 2;
}

.banner-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.5);
  border: 1px solid rgba(0, 0, 0, 0.2);
  cursor: pointer;
  padding: 0;
  transition: background-color 0.3s ease;
}

.banner-dot.active { background-color: white; }


/* ============================ */
/* Category Icons Section       */
/* ============================ */

.category-icons-section {
    /* padding: calc(var(--spacing-unit) * 0.8) 0; */
}

.category-icons-section h2 {
  font-size: 1.2rem;
  font-weight: 500;
  color: var(--dark-color);
  text-align: center;
  margin-bottom: calc(var(--spacing-unit) * 1);
}

.category-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: calc(var(--spacing-unit) * 0.6);
}

.category-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  padding: calc(var(--spacing-unit) * 0.4);
  border-radius: calc(var(--border-radius) * 0.8);
  transition: background-color 0.2s ease-in-out, transform 0.15s ease-in-out;
  color: var(--text-color);
  text-decoration: none;
  cursor: pointer;
}

.category-item:hover {
  background-color: rgba(0, 0, 0, 0.05);
  text-decoration: none;
  transform: translateY(-2px);
}

.category-item.active {
  background-color: rgba(0, 123, 255, 0.1);
  transform: translateY(-1px);
}
.category-item.active .category-name {
  color: var(--primary-color);
  font-weight: 500;
}


.category-icon-wrapper {
  width: 55px;
  height: 55px;
  margin-bottom: calc(var(--spacing-unit) * 0.4);
  background-color: rgb(255, 255, 255);
  border-radius: 15px;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  border: 1px solid rgba(0,0,0,0.05);
  transition: box-shadow 0.2s ease;
}
.category-item:hover .category-icon-wrapper {
    box-shadow: 0 2px 4px rgba(0,0,0,0.15);
}

.category-icon {
  max-width: 65%;
  max-height: 65%;
  object-fit: contain;
  display: block;
}

.category-name {
  font-size: 0.7rem;
  font-weight: 400;
  line-height: 1.3;
  color: rgb(66, 66, 66);
}

/* ============================ */
/* **** Pincode Lookup Styles **** */
/* ============================ */

/* Style for the container holding auto-filled fields */
.auto-filled-fields-container {
    background-color: #f8f9fa; /* Light grey background */
    border-left: 3px solid var(--primary-color); /* Accent border */
    padding: calc(var(--spacing-unit) * 0.6) calc(var(--spacing-unit) * 0.8);
    border-radius: 0 var(--border-radius) var(--border-radius) 0;
    margin-top: calc(var(--spacing-unit) * -0.5); /* Pull slightly closer to pincode */
    margin-bottom: var(--spacing-unit);
}

.auto-filled-fields-container .form-group {
    margin-bottom: calc(var(--spacing-unit) * 0.5); /* Reduce margin inside */
}

.auto-filled-fields-container .form-group:last-child {
    margin-bottom: 0;
}

/* Style for the read-only auto-filled fields */
.auto-filled-field[readonly] {
    background-color: #e9ecef; /* Standard readonly background */
    opacity: 1; /* Ensure full opacity */
    cursor: not-allowed;
    border: 1px solid #ced4da; /* Slightly lighter border */
    font-weight: 500; /* Make text slightly bolder */
    color: #495057; /* Standard text color */
}

/* Pincode status message styling */
.pincode-status {
    display: block; /* Ensure it takes its own line */
    margin-top: 4px;
    font-size: 0.8em;
    min-height: 1.2em; /* Reserve space */
    transition: color 0.2s ease-in-out; /* Smooth color transition */
}
.pincode-status.text-success { color: var(--success-color) !important; }
.pincode-status.text-danger { color: var(--danger-color) !important; }
.pincode-status.text-muted { color: var(--secondary-color) !important; }


/* ============================ */
/* Media Queries                */
/* ============================ */

/* --- Mobile Specific Search Bar --- */
@media (max-width: 767px) {
  .search-container-dynamic {
      position: static;
      order: 1;
  }
  .search-form-dynamic {
      position: absolute;
      top: calc(100% + 8px);
      left: var(--spacing-unit);
      right: var(--spacing-unit);
      width: calc(100% - (2 * var(--spacing-unit)));
      background-color: var(--card-bg);
      border: 1px solid var(--border-color);
      box-shadow: 0 3px 6px rgba(0,0,0,0.15);
      opacity: 0;
      visibility: hidden;
      transform: translateY(-10px) scaleY(0.95);
      transform-origin: top center;
      transition: opacity 0.25s ease, transform 0.25s ease, visibility 0s linear 0.25s;
      z-index: 1005;
      border-radius: var(--border-radius);
      height: 42px;
  }
  .search-container-dynamic.active .search-form-dynamic {
      opacity: 1;
      visibility: visible;
      transform: translateY(0) scaleY(1);
      transition: opacity 0.25s ease, transform 0.25s ease, visibility 0s linear 0s;
  }
  .suggestions-dropdown {
      top: calc(100% + 8px + 42px + 4px);
      left: var(--spacing-unit);
      right: var(--spacing-unit);
      width: calc(100% - (2 * var(--spacing-unit)));
      z-index: 1010;
      border-top: 1px solid var(--border-color);
  }
   .search-container-dynamic.active .suggestions-dropdown.active {
      display: block;
   }
}

/* Small devices (landscape phones, 576px and up) */
@media (min-width: 576px) {
    .category-grid {
        grid-template-columns: repeat(5, 1fr);
        gap: calc(var(--spacing-unit) * 0.75);
    }
    .category-icon-wrapper { width: 60px; height: 60px; border-radius: 18px; }
    .category-name { font-size: 0.75rem; }
    .admin-actions-grid { grid-template-columns: repeat(2, 1fr); }
}

/* Medium devices (tablets, 768px and up) */
@media (min-width: 768px) {
  .container { max-width: 720px; }
  .app-footer { display: block; }
  .product-grid { grid-template-columns: repeat(3, 1fr); }
  .product-name { height: auto; white-space: normal; display: block; -webkit-line-clamp: unset; -webkit-box-orient: unset; }
  .product-detail-main { flex-direction: row; align-items: flex-start; }
  .product-detail-info { flex: 1 1 60%; }
  .product-detail-image-section { flex: 1 1 40%; width: auto; max-width: none; margin: 0; }
  .product-actions { flex-direction: row; align-items: center; }
  .product-actions .btn { width: auto; }
  .quantity-selector { max-width: 120px; margin-bottom: 0; }
  .auth-container { margin: calc(var(--spacing-unit) * 2) auto; }
  .cart-item { grid-template-columns: 100px 1fr 100px 150px 80px; grid-template-areas: "image details price quantity remove"; align-items: center; padding: var(--spacing-unit); }
  .cart-item-details { grid-area: details; }
  .cart-item-price { display: block; grid-area: price; text-align: right; font-weight: 500; font-size: 1rem; color: var(--text-color); margin-bottom: 0; }
  .cart-item-quantity { grid-area: quantity; justify-content: center; }
  .cart-item-subtotal { display: none; }
  .cart-item-remove { grid-area: remove; align-self: center; text-align: center; }
  .checkout-grid { flex-direction: row; gap: calc(var(--spacing-unit) * 1.5); align-items: flex-start; }
  .checkout-address { flex: 1 1 55%; }
  .checkout-summary { flex: 1 1 45%; }

  /* --- Restore Table Layout --- */
  .data-table thead { display: table-header-group; }
  .data-table tbody tr { display: table-row; margin-bottom: 0; border: none; padding: 0; box-shadow: none; background-color: transparent; border-bottom: 1px solid var(--border-color); border-radius: 0; }
  .data-table tbody tr:last-child { border-bottom: none; }
  .data-table tbody tr:hover { background-color: #f1f5f9; }
  .data-table td { display: table-cell; text-align: left; padding: calc(var(--spacing-unit) * 0.6) calc(var(--spacing-unit) * 0.6); vertical-align: middle; border-bottom: none; position: static; margin-left: 0 !important; }
  .data-table td::before { content: none; }
  .table-img { max-width: 60px; margin-left: 0; }
  .data-table td:has(img) { text-align: left; width: 80px; }
  .data-table th[data-label*="Price"], .data-table td[data-label*="Price"],
  .data-table th[data-label*="Stock"], .data-table td[data-label*="Stock"],
  .data-table th[data-label*="Total"], .data-table td[data-label*="Total"],
  .data-table td.order-total { text-align: right; width: 100px; }
  .data-table th[data-label="Status"], .data-table td[data-label="Status"],
  .data-table td.order-status-cell { text-align: center; width: 150px; }
  .data-table td[data-label="Status"] .status-badge, .order-status-cell .status-badge { float: none; display: inline-block; }
  .order-status-cell small { text-align: center; }
  .data-table th.actions-cell, .data-table td.actions-cell { text-align: right !important; width: 250px; white-space: normal; }
  .actions-cell .action-group { border: none; padding: 0; margin: 0 0 calc(var(--spacing-unit) * 0.5) 0; display: block; text-align: right; }
  .actions-cell .action-group:last-child { margin-bottom: 0; }
  .actions-cell .action-group-title { display: none; }
  .actions-cell form, .actions-cell .btn { display: inline-block; width: auto; margin: 0 0 0 calc(var(--spacing-unit) * 0.3); vertical-align: middle; }
  .actions-cell .inline-form { display: inline-flex; width: auto; margin-left: 0; }
  .actions-cell .inline-form + .inline-form { margin-left: calc(var(--spacing-unit) * 0.3); }
  .actions-cell .verify-otp-form input { max-width: 100px; }
  .actions-cell select.form-control-sm { width: auto; display: inline-block; margin-right: 5px;}
  .actions-cell .no-actions-text { display: inline-block; text-align: right; width: 100%;}
  .w-md-auto { width: auto !important; }
  .order-table td[data-label="Items"] .order-items-summary { margin-left: 0; text-align: left; }
  .order-table .order-items-images { justify-content: flex-start; margin-left: 0; }
  .delivery-otp-display { margin-left: 0; margin-top: 5px; padding: 5px 8px; font-size: 0.85rem; display: inline-block; width: auto; text-align: center; }
  .delivery-otp-display p { margin-bottom: 0 !important; }
  .delivery-otp-display small { display: none; }
  /* --- End Table Restore --- */

  /* --- Header/Navbar for Tablet+ --- */
  .app-header { padding: calc(var(--spacing-unit) * 0.5) var(--spacing-unit); }
  .navbar { gap: var(--spacing-unit); }
  .app-logo .app-name { display: inline; }
  .app-logo { font-size: 1.2rem; }
  .search-toggle-btn { display: none; }

  .search-container-dynamic {
      display: flex;
      flex-grow: 1;
      justify-content: center;
      order: 0;
      margin: 0 calc(var(--spacing-unit) * 0.5);
      max-width: 500px;
      position: relative;
  }
  .nav-left { margin-right: 0; }

  .search-form-dynamic {
      position: relative;
      top: auto; left: auto; right: auto; width: 100%;
      box-shadow: none;
      opacity: 1; visibility: visible; transform: none;
      transition: border-color 0.2s ease, box-shadow 0.2s ease;
      height: 38px;
  }
  /* --- End Header/Navbar Tablet+ --- */


  /* Category Grid Tablet */
  .category-grid { grid-template-columns: repeat(6, 1fr); gap: calc(var(--spacing-unit) * 0.8); }
  .category-icon-wrapper { width: 65px; height: 65px; border-radius: 20px; }
  .category-name { font-size: 0.8rem; }
  .category-icons-section { padding: calc(var(--spacing-unit) * 1.2); }
  .category-icons-section h2 { font-size: 1.4rem; }

  /* Banner Slider Tablet */
  .banner-slider-container {
      aspect-ratio: 24 / 7;
      /* touch-action is inherited */
  }
  .banner-nav { width: 40px; height: 40px; font-size: 1rem; }
  .banner-dots { bottom: 15px; }
  .banner-dot { width: 10px; height: 10px; }

  /* Rating Stats Layout */
  .rating-stats-container { display: flex; align-items: flex-start; gap: calc(var(--spacing-unit) * 2); }
  .rating-summary { flex-direction: column; align-items: center; margin-bottom: 0; flex-basis: 150px; flex-shrink: 0; }
  .rating-average-value { font-size: 3em; }
  .rating-total { font-size: 1em; }
  .rating-bars { max-width: none; flex-grow: 1; margin: 0; }

  .profile-container { padding: calc(var(--spacing-unit) * 2); }

  /* Nav links Tablet+ */
  .nav-link { flex-direction: row; font-size: 0.9rem; align-items: center; padding: calc(var(--spacing-unit) * 0.4) calc(var(--spacing-unit) * 0.8); }
  .nav-link span { display: inline; margin-left: calc(var(--spacing-unit) * 0.3); }
  .nav-link i { font-size: 1rem; margin-bottom: 0; margin-right: 0; }
  .nav-right { gap: calc(var(--spacing-unit) * 0.75); }
  .profile-avatar-link { width: 38px; height: 38px; }
  .btn-login-register { font-size: 0.9rem; }
  .suggestions-dropdown { position: absolute; top: 100%; left: 0; right: 0; width: 100%; }


} /* End @media (min-width: 768px) */


/* Large devices (desktops, 992px and up) */
@media (min-width: 992px) {
  .container { max-width: 960px; }
  .product-grid { grid-template-columns: repeat(4, 1fr); }
  .product-grid, .admin-actions-grid { gap: calc(var(--spacing-unit) * 1); }
  .admin-actions-grid { grid-template-columns: repeat(3, 1fr); }
  .navbar { max-width: 960px; }

  /* Category Grid Desktop */
  .category-grid { grid-template-columns: repeat(8, 1fr); gap: var(--spacing-unit); }
  .category-icon-wrapper { width: 70px; height: 70px; border-radius: 22px; }
  .category-name { font-size: 0.85rem; }
  .category-icons-section { padding: calc(var(--spacing-unit) * 1.5); }

  .banner-slider-container { aspect-ratio: 24 / 6; }

} /* End @media (min-width: 992px) */


/* Extra large devices (large desktops, 1200px and up) */
@media (min-width: 1200px) {
    .container { max-width: 1140px; }
    .navbar { max-width: 1140px; }
    .admin-actions-grid { grid-template-columns: repeat(4, 1fr); }
    /* Optional: Increase product grid columns */
    /* .product-grid { grid-template-columns: repeat(5, 1fr); } */
    /* Category Grid Large Desktop */
    /* .category-grid { grid-template-columns: repeat(10, 1fr); } */
    .category-icon-wrapper { width: 75px; height: 75px; border-radius: 25px; }
} /* End @media (min-width: 1200px) */

/* Add this rule or adjust existing margins */
.admin-manage-container .form-group.mb-3 { /* Target the specific filter group */
  margin-bottom: var(--spacing-unit) !important; /* Ensure space below filter */
}

/* Style for the "no results" row */
#no-admin-orders-found td,
#no-seller-orders-found td,
#no-admin-products-found td,
#no-seller-products-found td,
#no-admin-users-found td {
    text-align: center;
    padding: var(--spacing-unit);
    color: var(--secondary-color);
    font-style: italic;
}

/* Ensure hidden rows are truly hidden */
tr.hidden {
    display: none !important;
}

/* ============================ */
/* **** Product Image Slider Styles **** */
/* ============================ */

/* Container for the image section (either single or slider) */
.product-detail-image-section {
  position: relative;
  width: 100%; /* Full width on mobile */
  max-width: 450px; /* Limit width on larger screens if needed */
  margin: 0 auto var(--spacing-unit) auto; /* Center and add bottom margin on mobile */
  aspect-ratio: 1 / 1; /* Maintain square aspect ratio */
  overflow: hidden;
  border-radius: calc(var(--border-radius) + 2px);
  background-color: #f8f9fa; /* Placeholder background */
  border: 1px solid var(--border-color); /* Add a subtle border */
}
/* Desktop Layout Alignment (aligns with existing product detail layout) */
@media (min-width: 768px) {
  .product-detail-image-section {
      flex: 1 1 40%; /* Take 40% of the flex space */
      width: auto; /* Override mobile width */
      max-width: none; /* Remove max-width limit */
      margin: 0; /* Remove mobile margin */
  }
}

/* Slider specific container */
.product-image-slider-container {
  position: relative; /* Needed for absolute positioning of children */
  width: 100%;
  height: 100%;
  overflow: hidden; /* Hide slides outside the container */
  touch-action: pan-y; /* <<<--- ADD FOR PRODUCT SLIDER */
  -webkit-tap-highlight-color: transparent; /* <<<--- ADD FOR PRODUCT SLIDER */
}

.product-image-slides {
  position: relative;
  width: 100%;
  height: 100%;
}

/* Individual slide styling */
.product-image-slide {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0; /* Hidden by default */
  visibility: hidden;
  transition: opacity 0.5s ease-in-out; /* Smooth fade transition */
  background-color: #eee; /* Fallback background if image is slow */
}

/* Active slide is visible */
.product-image-slide.active {
  opacity: 1;
  visibility: visible;
  z-index: 1; /* Ensure active slide is on top */
}

/* The actual image element (shared by slider and single image) */
/* .product-detail-image styles are already defined above */

/* Slider Navigation Arrows */
.product-image-nav {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background-color: rgba(0, 0, 0, 0.4);
  color: white;
  border: none;
  border-radius: 50%;
  width: 30px; /* Adjust size as needed */
  height: 30px;
  font-size: 1rem; /* Adjust icon size */
  font-weight: bold;
  line-height: 1; /* Center icon vertically */
  cursor: pointer;
  z-index: 2; /* Above the slides */
  display: flex; /* Use flexbox to center icon */
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s ease;
  opacity: 0.8; /* Slightly transparent */
  -webkit-tap-highlight-color: transparent; /* Prevent blue highlight on mobile tap */
}
.product-image-nav:hover,
.product-image-nav:focus {
  background-color: rgba(0, 0, 0, 0.6);
  opacity: 1;
  outline: none; /* Remove default focus outline */
}
.product-image-prev { left: 8px; }
.product-image-next { right: 8px; }

/* Slider Navigation Dots */
.product-image-dots {
  position: absolute;
  bottom: 8px; /* Position dots at the bottom */
  left: 50%;
  transform: translateX(-50%); /* Center the dots horizontally */
  display: flex;
  gap: 6px; /* Space between dots */
  z-index: 2; /* Above the slides */
}
.product-image-dot {
  width: 7px; /* Size of the dots */
  height: 7px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.6); /* Semi-transparent white */
  border: 1px solid rgba(0, 0, 0, 0.3); /* Subtle border */
  cursor: pointer;
  padding: 0;
  transition: background-color 0.3s ease;
  -webkit-tap-highlight-color: transparent; /* Prevent blue highlight on mobile tap */
}
.product-image-dot.active {
  background-color: white; /* Active dot is solid white */
}
.product-image-dot:focus {
   outline: 1px dotted white; /* Simple focus style for accessibility */
   outline-offset: 1px;
}


/* Optional: Container for the single image case (if you added it in the EJS) */
.product-detail-image-single {
  width: 100%;
  height: 100%;
}

/* --- End Product Image Slider Styles --- */

public/js/main.js :
// public/js/main.js
console.log("Main JS loaded.");

document.addEventListener('DOMContentLoaded', () => {

    // --- Button Spinner Logic ---
    document.querySelectorAll('form.form-submit-spinner').forEach(form => {
        form.addEventListener('submit', (event) => {
            const submitButton = form.querySelector('button[type="submit"]');
            if (submitButton && !submitButton.disabled) {
                if (typeof form.checkValidity === 'function' && !form.checkValidity()) {
                    return;
                }
                const originalText = submitButton.innerHTML;
                submitButton.dataset.originalText = originalText;
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Working...';

                window.addEventListener('pageshow', function(pageEvent) {
                    if (pageEvent.persisted && submitButton.disabled) {
                        if (submitButton.dataset.originalText) {
                            submitButton.innerHTML = submitButton.dataset.originalText;
                        }
                        submitButton.disabled = false;
                    }
                });
            }
        });
    });

    // --- Responsive Table Logic ---
    function responsiveTables() {
        const tables = document.querySelectorAll('.data-table');
        tables.forEach(table => {
            const headerElements = table.querySelectorAll('thead th');
            if (!headerElements || headerElements.length === 0) return;

            const headers = Array.from(headerElements).map(th => th.textContent.trim());
            const rows = table.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                cells.forEach((cell, index) => {
                    if (!cell.hasAttribute('data-label') && headers[index] !== undefined && headers[index] !== '') {
                         cell.setAttribute('data-label', headers[index]);
                    }
                });
            });
        });
    }
     if (document.querySelector('.data-table')) {
         responsiveTables();
     }

    // --- Share Button Logic ---
    const shareButton = document.getElementById('share-product-btn');
    const fallbackLinks = document.getElementById('fallback-share-links');
    if (shareButton && fallbackLinks) {
        shareButton.addEventListener('click', async () => {
            const title = shareButton.dataset.title || document.title;
            const text = shareButton.dataset.text || `Check out ${title}`;
            const url = shareButton.dataset.url || window.location.href;

            if (navigator.share) {
                try {
                    await navigator.share({ title, text, url });
                    console.log('Product shared successfully!');
                    showToast('Link shared!', 'success');
                } catch (error) {
                    console.error('Error sharing:', error);
                    if (error.name !== 'AbortError') {
                         fallbackLinks.classList.remove('hidden');
                         showToast('Sharing failed, use fallback links.', 'warning');
                    }
                }
            } else {
                console.log('Web Share API not supported, showing fallback links.');
                fallbackLinks.classList.remove('hidden');
                showToast('Web Share not supported, use link options.', 'info');
            }
        });
    }

    // --- Profile Page Specific Logic ---
    const profilePage = document.querySelector('.profile-container');
    if (profilePage) {
        const editAddressBtn = document.getElementById('edit-address-btn');
        const addAddressBtn = document.getElementById('add-address-btn');
        const cancelAddressBtn = document.getElementById('cancel-edit-btn');
        const addressForm = document.getElementById('address-form');
        const savedAddressDiv = document.getElementById('saved-address-display');

        const showAddressForm = () => {
            if (!addressForm || !savedAddressDiv) return;
            addressForm.classList.remove('hidden');
            const isEditing = savedAddressDiv.querySelector('strong') !== null;
            addressForm.querySelector('h3').textContent = isEditing ? 'Edit Address' : 'Add Address';
            savedAddressDiv.classList.add('hidden');
            if (addAddressBtn) addAddressBtn.classList.add('hidden');
            if (cancelAddressBtn) cancelAddressBtn.classList.remove('hidden');

            const pincodeInput = addressForm.querySelector('#profile-pincode');
            const localitySelect = addressForm.querySelector('#profile-locality');
            const savedLocality = localitySelect ? localitySelect.dataset.savedValue : null;

            if (pincodeInput && pincodeInput.value.length === 6 && /^\d{6}$/.test(pincodeInput.value)) {
                fetchPincodeData(pincodeInput.value, 'profile', savedLocality);
            } else if (localitySelect) {
                localitySelect.innerHTML = '<option value="" selected disabled>Enter Pincode First</option>';
                localitySelect.disabled = true;
            }
        };

        const hideAddressForm = () => {
            if (!addressForm || !savedAddressDiv) return;
            addressForm.classList.add('hidden');
            savedAddressDiv.classList.remove('hidden');
            if (cancelAddressBtn) cancelAddressBtn.classList.add('hidden');
            if (!savedAddressDiv.querySelector('strong') && addAddressBtn) {
                 addAddressBtn.classList.remove('hidden');
            }
            const statusElement = addressForm.querySelector('.pincode-status');
            if (statusElement) statusElement.textContent = '';
            clearAutoFilledFields('profile');
        };

        if (editAddressBtn) {
            editAddressBtn.addEventListener('click', showAddressForm);
        }
        if (addAddressBtn) {
             addAddressBtn.addEventListener('click', () => {
                 if(addressForm) addressForm.reset();
                 clearAutoFilledFields('profile');
                 showAddressForm();
             });
        }
        if (cancelAddressBtn) {
            cancelAddressBtn.addEventListener('click', hideAddressForm);
        }

        if (savedAddressDiv && addressForm && addAddressBtn) {
            if (!savedAddressDiv.querySelector('strong') && addressForm.classList.contains('hidden')) {
                addAddressBtn.classList.remove('hidden');
            } else {
                 addAddressBtn.classList.add('hidden');
            }
        }

        const editNameBtn = document.getElementById('edit-name-btn');
        const cancelNameBtn = document.getElementById('cancel-edit-name-btn');
        const nameForm = document.getElementById('name-form');
        const savedNameDisplaySpan = document.getElementById('saved-name-display');
        const nameInput = document.getElementById('name-input');
        const displayUserNameStrong = document.getElementById('display-user-name');

        const showNameForm = () => {
            if (!nameForm || !savedNameDisplaySpan || !editNameBtn) return;
            nameForm.classList.remove('hidden');
            savedNameDisplaySpan.classList.add('hidden');
            editNameBtn.classList.add('hidden');
            if(displayUserNameStrong && nameInput) nameInput.value = displayUserNameStrong.textContent;
            if(nameInput) nameInput.focus();
        };

        const hideNameForm = () => {
            if (!nameForm || !savedNameDisplaySpan || !editNameBtn || !displayUserNameStrong || !nameInput) return;
            nameForm.classList.add('hidden');
            savedNameDisplaySpan.classList.remove('hidden');
            editNameBtn.classList.remove('hidden');
            nameInput.value = displayUserNameStrong.textContent;
        };

        if (editNameBtn) {
            editNameBtn.addEventListener('click', showNameForm);
        }
        if (cancelNameBtn) {
            cancelNameBtn.addEventListener('click', hideNameForm);
        }
    }

    // --- Checkout Address Toggle Logic ---
    const checkoutPage = document.querySelector('.checkout-container');
    if (checkoutPage) {
        const checkoutEditBtn = checkoutPage.querySelector('.checkout-address #edit-address-btn');
        const checkoutCancelBtn = checkoutPage.querySelector('.checkout-address #cancel-edit-btn');
        const checkoutAddressForm = checkoutPage.querySelector('.checkout-address #address-form');
        const checkoutSavedAddressDiv = checkoutPage.querySelector('.checkout-address .saved-address');
        const placeOrderBtn = checkoutPage.querySelector('.btn-place-order');
        const hasInitialAddress = checkoutSavedAddressDiv && !checkoutSavedAddressDiv.classList.contains('hidden');

        if (checkoutEditBtn) {
            checkoutEditBtn.addEventListener('click', () => {
                if (!checkoutAddressForm || !checkoutSavedAddressDiv) return;
                checkoutAddressForm.classList.remove('hidden');
                checkoutSavedAddressDiv.classList.add('hidden');
                if(placeOrderBtn) placeOrderBtn.disabled = true;
                if(checkoutAddressForm.querySelector('h3')) checkoutAddressForm.querySelector('h3').textContent = 'Edit Address';
                if (checkoutCancelBtn) checkoutCancelBtn.classList.remove('hidden');

                const pincodeInput = checkoutAddressForm.querySelector('#checkout-pincode');
                const localitySelect = checkoutAddressForm.querySelector('#checkout-locality');
                const savedLocality = localitySelect ? localitySelect.dataset.savedValue : null;

                if (pincodeInput && pincodeInput.value.length === 6 && /^\d{6}$/.test(pincodeInput.value)) {
                    fetchPincodeData(pincodeInput.value, 'checkout', savedLocality);
                } else if (localitySelect){
                    localitySelect.innerHTML = '<option value="" selected disabled>Enter Pincode First</option>';
                    localitySelect.disabled = true;
                }
            });
        }

        if (checkoutCancelBtn) {
            checkoutCancelBtn.addEventListener('click', () => {
                if (!checkoutAddressForm || !checkoutSavedAddressDiv) return;
                checkoutAddressForm.classList.add('hidden');
                if (hasInitialAddress) {
                    checkoutSavedAddressDiv.classList.remove('hidden');
                    if(placeOrderBtn) placeOrderBtn.disabled = false;
                } else {
                    if(placeOrderBtn) placeOrderBtn.disabled = true;
                }
                checkoutCancelBtn.classList.add('hidden');
                const statusElement = checkoutAddressForm.querySelector('.pincode-status');
                if (statusElement) statusElement.textContent = '';
                clearAutoFilledFields('checkout');
            });
        }

        if (!hasInitialAddress && checkoutAddressForm) {
            checkoutAddressForm.classList.remove('hidden');
            if (placeOrderBtn) placeOrderBtn.disabled = true;
            if(checkoutAddressForm.querySelector('h3')) checkoutAddressForm.querySelector('h3').textContent = 'Add Shipping Address';
            if (checkoutCancelBtn) checkoutCancelBtn.classList.add('hidden');
        } else if (hasInitialAddress && checkoutAddressForm) {
            checkoutAddressForm.classList.add('hidden');
            if (placeOrderBtn) placeOrderBtn.disabled = false;
            if (checkoutCancelBtn) checkoutCancelBtn.classList.add('hidden');
        }
    }


    // --- Cart Update AJAX Logic (Using Event Delegation) ---
    const cartItemsContainer = document.querySelector('.cart-items');
    if (cartItemsContainer) {
        cartItemsContainer.addEventListener('click', (e) => {
            const button = e.target.closest('.btn-update-qty');
            if (button) {
                e.preventDefault();
                const productId = button.dataset.productId;
                const quantityInput = document.getElementById(`quantity-${productId}`);
                if (!quantityInput) return;
                
                const newQuantity = parseInt(quantityInput.value, 10);

                if (!quantityInput.dataset.originalValue) {
                    quantityInput.dataset.originalValue = quantityInput.value;
                }

                if (isNaN(newQuantity) || newQuantity < 0) {
                    showToast('Invalid quantity entered.', 'danger');
                    quantityInput.value = quantityInput.dataset.originalValue;
                    return;
                }
                const maxStock = parseInt(quantityInput.max, 10);
                if (!isNaN(maxStock) && newQuantity > maxStock) {
                    showToast(`Only ${maxStock} items available in stock.`, 'warning');
                    quantityInput.value = maxStock;
                    return;
                }
                // Pass the button and quantityInput for UI updates within the AJAX function
                updateCartItemQuantityAJAX(productId, newQuantity, button, quantityInput);
            }
        });
    }
    // --- End Cart Update AJAX Logic ---


    // ========================================
    // Dynamic Search Bar Logic
    // ========================================
    const searchContainer = document.getElementById('dynamic-search-container');
    const searchToggleBtn = document.getElementById('search-toggle-btn');
    const searchInput = document.getElementById('search-input-dynamic');
    const suggestionsDropdown = document.getElementById('suggestions-dropdown');
    let suggestionFetchTimeout;

    if (searchToggleBtn && searchContainer) {
        searchToggleBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            searchContainer.classList.toggle('active');
            if (searchContainer.classList.contains('active')) {
                requestAnimationFrame(() => { if(searchInput) searchInput.focus(); });
            } else {
                if(suggestionsDropdown) suggestionsDropdown.classList.remove('active');
            }
        });
    }

    if (searchInput && suggestionsDropdown) {
        searchInput.addEventListener('input', () => {
            const query = searchInput.value.trim();
            clearTimeout(suggestionFetchTimeout);

            if (query.length >= 2) {
                suggestionsDropdown.innerHTML = '<div class="suggestion-item"><i>Loading...</i></div>';
                suggestionsDropdown.classList.add('active');
                suggestionFetchTimeout = setTimeout(() => {
                    fetchSuggestions(query);
                }, 300);
            } else {
                suggestionsDropdown.innerHTML = '';
                suggestionsDropdown.classList.remove('active');
            }
        });

        searchInput.addEventListener('focus', () => {
             const query = searchInput.value.trim();
              const hasActualSuggestions = suggestionsDropdown.querySelector('a.suggestion-item');
              if (query.length >= 2 && hasActualSuggestions) {
                 suggestionsDropdown.classList.add('active');
             }
        });
    }

     async function fetchSuggestions(query) {
         if (!suggestionsDropdown) return;
         try {
             const response = await fetch(`/products/suggestions?q=${encodeURIComponent(query)}`);
             if (!response.ok) {
                 let errorMsg = `HTTP error! status: ${response.status}`;
                 try { const errorData = await response.json(); errorMsg = errorData.error || errorMsg; } catch (parseError) {}
                 throw new Error(errorMsg);
             }
             const suggestions = await response.json();
             displaySuggestions(suggestions);
         } catch (error) {
             console.error('Error fetching suggestions:', error);
             suggestionsDropdown.innerHTML = `<div class="suggestion-item text-danger"><i>Error: ${error.message || 'Failed to fetch'}</i></div>`;
             suggestionsDropdown.classList.add('active');
         }
     }

     function displaySuggestions(suggestions) {
          if (!suggestionsDropdown) return;
         suggestionsDropdown.innerHTML = '';
         if (suggestions.length > 0) {
             suggestions.forEach(product => {
                 const item = document.createElement('a');
                 item.classList.add('suggestion-item');
                 item.href = `/products/${product._id}`;
                 const safeName = product.name ? product.name.replace(/</g, "<").replace(/>/g, ">") : '[No Name]';
                 const safeImageUrl = product.imageUrl ? product.imageUrl.replace(/</g, "<").replace(/>/g, ">") : '/images/placeholder.png';
                 item.innerHTML = `
                    <img src="${safeImageUrl}" alt="" loading="lazy">
                    <span>${safeName}</span>
                 `;
                 suggestionsDropdown.appendChild(item);
             });
             suggestionsDropdown.classList.add('active');
         } else {
              suggestionsDropdown.innerHTML = '<div class="suggestion-item text-muted"><i>No matching products found.</i></div>';
              suggestionsDropdown.classList.add('active');
         }
     }

     document.addEventListener('click', (e) => {
         if (searchContainer && suggestionsDropdown && searchToggleBtn && !searchContainer.contains(e.target) && !searchToggleBtn.contains(e.target)) {
             searchContainer.classList.remove('active');
             suggestionsDropdown.classList.remove('active');
         }
     });

     if(suggestionsDropdown) {
         suggestionsDropdown.addEventListener('click', (e) => {
             const link = e.target.closest('a.suggestion-item');
             if (!link) {
                 e.stopPropagation();
             } else {
                 suggestionsDropdown.classList.remove('active');
                 if (searchContainer && window.innerWidth < 768) {
                    searchContainer.classList.remove('active');
                 }
             }
         });
     }
    // ========================================
    // End Dynamic Search Bar Logic
    // ========================================


    // ========================================
    // Toast Notification Logic
    // ========================================
    const toastContainerGlobal = document.querySelector('.toast-container'); // Renamed to avoid conflict
    if (toastContainerGlobal) {
        const toastElements = toastContainerGlobal.querySelectorAll('.toast');
        toastElements.forEach((toastElement) => {
            const closeButton = toastElement.querySelector('.toast-close-btn');
            const autoHideDelay = 5000;
            let hideTimeoutId;

            const dismissToast = () => {
                clearTimeout(hideTimeoutId);
                if (toastElement.classList.contains('hide') || !toastElement.parentNode) return;
                toastElement.classList.remove('show');
                toastElement.classList.add('hide');
                toastElement.addEventListener('transitionend', (event) => {
                    if ((event.propertyName === 'opacity' || event.propertyName === 'transform') && toastElement.classList.contains('hide') && toastElement.parentNode) {
                         try { toastElement.remove(); } catch(e) { console.warn("Error removing toast:", e); }
                    }
                }, { once: true });
            };

            setTimeout(() => { if (toastElement.parentNode) toastElement.classList.add('show'); }, 10);
            hideTimeoutId = setTimeout(dismissToast, autoHideDelay);
            if (closeButton) closeButton.addEventListener('click', dismissToast);
            toastElement.addEventListener('mouseenter', () => clearTimeout(hideTimeoutId));
            toastElement.addEventListener('mouseleave', () => hideTimeoutId = setTimeout(dismissToast, autoHideDelay / 2));
        });
    }
    // ========================================
    // End Toast Notification Logic
    // ========================================

    // --- Rating Stats Bar Animation ---
    document.querySelectorAll('.rating-bar-fill').forEach(function(el) {
        var width = el.getAttribute('data-width');
        if (width) {
            requestAnimationFrame(() => { if(el.parentNode) el.style.width = width + '%'; });
        }
    });

    // ========================================
    // Loading State for Non-Form Actions
    // ========================================
    const proceedCheckoutBtn = document.getElementById('btn-proceed-checkout');
    if (proceedCheckoutBtn) {
        const originalCheckoutText = proceedCheckoutBtn.innerHTML;
        const loadingCheckoutText = proceedCheckoutBtn.dataset.loadingText || '<i class="fas fa-spinner fa-spin"></i> Loading...';
        proceedCheckoutBtn.addEventListener('click', function(event) {
            if (proceedCheckoutBtn.classList.contains('loading')) {
                event.preventDefault(); return;
            }
            proceedCheckoutBtn.classList.add('loading');
            proceedCheckoutBtn.innerHTML = loadingCheckoutText;
            proceedCheckoutBtn.style.pointerEvents = 'none';
            proceedCheckoutBtn.setAttribute('aria-disabled', 'true');
        });
        window.addEventListener('pageshow', function(pageEvent) {
            if (pageEvent.persisted && proceedCheckoutBtn.classList.contains('loading')) {
                proceedCheckoutBtn.classList.remove('loading');
                proceedCheckoutBtn.innerHTML = originalCheckoutText;
                proceedCheckoutBtn.style.pointerEvents = 'auto';
                proceedCheckoutBtn.removeAttribute('aria-disabled');
            }
        });
    }
    // ========================================
    // End Loading State for Non-Form Actions
    // ========================================

    // ========================================
    // Homepage Banner Slider Logic
    // ========================================
    const sliderContainer = document.querySelector('[data-slider-container]');
    if (sliderContainer) {
        const slides = sliderContainer.querySelectorAll('[data-slide]');
        const prevBtn = sliderContainer.querySelector('[data-slider-prev]');
        const nextBtn = sliderContainer.querySelector('[data-slider-next]');
        const dotsContainer = sliderContainer.querySelector('[data-slider-dots]');
        const dots = dotsContainer ? dotsContainer.querySelectorAll('[data-slide-to]') : [];
        let currentSlideIndex = 0;
        let autoSlideInterval = null;
        const slideIntervalTime = 5000;
        let isDragging = false, startX = 0, currentX = 0, diffX = 0;
        const swipeThreshold = 50;

        function showSlide(index) {
            if (!slides || slides.length === 0) return;
            const newIndex = (index % slides.length + slides.length) % slides.length;
            slides.forEach((slide, i) => { slide.classList.toggle('active', i === newIndex); });
            dots.forEach((dot, i) => { dot.classList.toggle('active', i === newIndex); });
            currentSlideIndex = newIndex;
        }
        function nextSlide() { showSlide(currentSlideIndex + 1); }
        function prevSlide() { showSlide(currentSlideIndex - 1); }
        function startAutoSlide() {
            clearInterval(autoSlideInterval);
            if (slides.length > 1) autoSlideInterval = setInterval(nextSlide, slideIntervalTime);
        }
        function handleTouchStart(event) {
            if (slides.length <= 1) return; isDragging = true; startX = event.touches[0].pageX;
            currentX = startX; diffX = 0; clearInterval(autoSlideInterval);
        }
        function handleTouchMove(event) {
            if (!isDragging || slides.length <= 1) return; currentX = event.touches[0].pageX;
            diffX = startX - currentX; if (Math.abs(diffX) > 10) event.preventDefault();
        }
        function handleTouchEnd() {
            if (!isDragging || slides.length <= 1) return; isDragging = false;
            if (Math.abs(diffX) > swipeThreshold) { if (diffX > 0) nextSlide(); else prevSlide(); }
            startX = 0; currentX = 0; diffX = 0; startAutoSlide();
        }
        if (slides.length > 0) { showSlide(0); startAutoSlide(); }
        if (nextBtn) nextBtn.addEventListener('click', () => { nextSlide(); startAutoSlide(); });
        if (prevBtn) prevBtn.addEventListener('click', () => { prevSlide(); startAutoSlide(); });
        if (dotsContainer) {
            dotsContainer.addEventListener('click', (e) => {
                const targetDot = e.target.closest('[data-slide-to]');
                if (targetDot) {
                    const index = parseInt(targetDot.dataset.slideTo, 10);
                    if (!isNaN(index)) { showSlide(index); startAutoSlide(); }
                }
            });
        }
        sliderContainer.addEventListener('touchstart', handleTouchStart, { passive: true });
        sliderContainer.addEventListener('touchmove', handleTouchMove, { passive: false });
        sliderContainer.addEventListener('touchend', handleTouchEnd);
        sliderContainer.addEventListener('touchcancel', handleTouchEnd);
        sliderContainer.addEventListener('mouseenter', () => clearInterval(autoSlideInterval));
        sliderContainer.addEventListener('mouseleave', () => startAutoSlide());
    }
    // ========================================
    // End Homepage Banner Slider Logic
    // ========================================

    // ========================================
    // Pincode Lookup Logic
    // ========================================
    const pincodeInputs = document.querySelectorAll('.pincode-input');
    let pincodeTimeout;
    pincodeInputs.forEach(input => {
        const targetPrefix = input.dataset.targetPrefix;
        if (!targetPrefix) { console.warn("Pincode input missing data-target-prefix:", input); return; }
        const localitySelect = document.getElementById(`${targetPrefix}-locality`);
        if (!localitySelect) { console.warn(`Locality select not found for prefix ${targetPrefix}`); return; }

        input.addEventListener('input', () => {
            clearTimeout(pincodeTimeout); const pincode = input.value.trim();
            const statusElement = input.nextElementSibling;
            if (pincode.length < 6) {
                clearAutoFilledFields(targetPrefix);
                if (statusElement) { statusElement.textContent = ''; statusElement.className = 'pincode-status text-muted'; }
                if (pincode.length > 0 && !/^\d*$/.test(pincode)) {
                    if (statusElement) { statusElement.textContent = 'Digits only'; statusElement.className = 'pincode-status text-danger';}
                } return;
            }
            if (pincode.length === 6 && /^\d{6}$/.test(pincode)) {
                if (statusElement) { statusElement.textContent = 'Looking up...'; statusElement.className = 'pincode-status text-muted'; }
                localitySelect.disabled = true; localitySelect.innerHTML = '<option value="" selected disabled>Looking up Pincode...</option>';
                pincodeTimeout = setTimeout(() => fetchPincodeData(pincode, targetPrefix, null), 500);
            } else if (pincode.length === 6) {
                clearAutoFilledFields(targetPrefix);
                if (statusElement) { statusElement.textContent = 'Invalid Pincode (digits only)'; statusElement.className = 'pincode-status text-danger';}
            }
        });
        input.addEventListener('blur', () => {
            clearTimeout(pincodeTimeout); const pincode = input.value.trim();
            const statusElement = input.nextElementSibling;
            if (pincode.length === 6 && /^\d{6}$/.test(pincode)) {
                if (statusElement && !statusElement.classList.contains('text-success') && statusElement.textContent !== 'Fetching...') {
                     statusElement.textContent = 'Looking up...'; statusElement.className = 'pincode-status text-muted';
                     fetchPincodeData(pincode, targetPrefix, null);
                }
            } else if (pincode.length > 0) {
                 clearAutoFilledFields(targetPrefix);
                 if (statusElement) { statusElement.textContent = 'Invalid Pincode'; statusElement.className = 'pincode-status text-danger';}
            } else { clearAutoFilledFields(targetPrefix); if (statusElement) statusElement.textContent = '';}
        });
        const initialPincode = input.value.trim();
        const savedLocality = localitySelect.dataset.savedValue || null;
        if (initialPincode.length === 6 && /^\d{6}$/.test(initialPincode)) {
            const initialStatusElement = input.nextElementSibling;
            if (initialStatusElement) { initialStatusElement.textContent = 'Verifying...'; initialStatusElement.className = 'pincode-status text-muted';}
            localitySelect.disabled = true; localitySelect.innerHTML = '<option value="" selected disabled>Verifying Pincode...</option>';
            fetchPincodeData(initialPincode, targetPrefix, savedLocality);
        } else {
             localitySelect.disabled = true; localitySelect.innerHTML = '<option value="" selected disabled>Enter Pincode First</option>';
        }
    });

    async function fetchPincodeData(pincode, prefix, savedLocalityValue = null) {
        const stateInput = document.getElementById(`${prefix}-state`), districtInput = document.getElementById(`${prefix}-district`),
              mandalInput = document.getElementById(`${prefix}-mandal`), stateHiddenInput = document.getElementById(`${prefix}-state-hidden`),
              districtHiddenInput = document.getElementById(`${prefix}-district-hidden`), mandalHiddenInput = document.getElementById(`${prefix}-mandal-hidden`),
              containerDiv = document.getElementById(`${prefix}-auto-filled-fields`), pincodeInputEl = document.getElementById(`${prefix}-pincode`), // Renamed to avoid conflict
              pincodeStatusElement = pincodeInputEl?.nextElementSibling, localitySelect = document.getElementById(`${prefix}-locality`);

        if (!stateInput || !districtInput || !mandalInput || !containerDiv || !pincodeStatusElement || !localitySelect || !stateHiddenInput || !districtHiddenInput || !mandalHiddenInput) {
            console.error("Pincode related elements not found for prefix:", prefix);
            if (pincodeStatusElement) { pincodeStatusElement.textContent = 'Setup Error'; pincodeStatusElement.className = 'pincode-status text-danger'; }
            if (localitySelect) { localitySelect.innerHTML = '<option value="" selected disabled>Setup Error</option>'; localitySelect.disabled = true; } return;
        }
        if (!pincodeStatusElement.classList.contains('text-success')) { pincodeStatusElement.textContent = 'Fetching...'; pincodeStatusElement.className = 'pincode-status text-muted';}
        try {
            const response = await fetch(`/user/pincode-lookup/${pincode}`); const data = await response.json();
            if (!response.ok || !data.success) throw new Error(data.message || `Pincode ${response.statusText}`);
            const location = data.location;
            stateInput.value = location.stateName || ''; districtInput.value = location.districtName || '';
            mandalInput.value = location.mandalName || ''; stateHiddenInput.value = location.stateName || '';
            districtHiddenInput.value = location.districtName || ''; mandalHiddenInput.value = location.mandalName || '';
            populateLocalityDropdown(localitySelect, location.localities, savedLocalityValue);
            containerDiv.style.display = 'block';
            pincodeStatusElement.textContent = `✓ Location found `; pincodeStatusElement.className = 'pincode-status text-success';
        } catch (error) {
             console.error('Pincode lookup error:', error); clearAutoFilledFields(prefix);
             pincodeStatusElement.textContent = `Error: ${error.message}`; pincodeStatusElement.className = 'pincode-status text-danger';
             localitySelect.innerHTML = '<option value="" selected disabled>Pincode Error</option>'; localitySelect.disabled = true;
        }
    }
    function populateLocalityDropdown(selectElement, localities, valueToSelect = null) {
        if (!selectElement) return; selectElement.innerHTML = '';
        if (localities && localities.length > 0) {
            const defaultOption = document.createElement('option'); defaultOption.value = "";
            defaultOption.textContent = "Select Locality / Post Office..."; defaultOption.disabled = true;
            defaultOption.selected = !valueToSelect; selectElement.appendChild(defaultOption);
            let valueMatched = false;
            localities.forEach(locality => {
                const option = document.createElement('option'); option.value = locality; option.textContent = locality;
                if (valueToSelect && locality === valueToSelect) { option.selected = true; valueMatched = true;}
                selectElement.appendChild(option);
            });
             if (valueMatched) defaultOption.selected = false;
            selectElement.disabled = false;
        } else {
            selectElement.innerHTML = '<option value="" selected disabled>No Localities Found</option>';
            selectElement.disabled = true;
        }
    }
    function clearAutoFilledFields(prefix) {
        const stateInput = document.getElementById(`${prefix}-state`), districtInput = document.getElementById(`${prefix}-district`),
              mandalInput = document.getElementById(`${prefix}-mandal`), stateHiddenInput = document.getElementById(`${prefix}-state-hidden`),
              districtHiddenInput = document.getElementById(`${prefix}-district-hidden`), mandalHiddenInput = document.getElementById(`${prefix}-mandal-hidden`),
              containerDiv = document.getElementById(`${prefix}-auto-filled-fields`), localitySelect = document.getElementById(`${prefix}-locality`);
        if (stateInput) stateInput.value = ''; if (districtInput) districtInput.value = ''; if (mandalInput) mandalInput.value = '';
        if (stateHiddenInput) stateHiddenInput.value = ''; if (districtHiddenInput) districtHiddenInput.value = '';
        if (mandalHiddenInput) mandalHiddenInput.value = ''; if (containerDiv) containerDiv.style.display = 'none';
        if (localitySelect) {
            localitySelect.innerHTML = '<option value="" selected disabled>Enter Pincode First</option>';
            localitySelect.disabled = true; localitySelect.value = ''; localitySelect.dataset.savedValue = '';
        }
    }
    // ========================================
    // End Pincode Lookup Logic
    // ========================================

    // ========================================
    // Live Order/Product/User Filtering Logic
    // ========================================
    const orderFilterInput = document.getElementById('order-filter-input');
    const adminOrderTable = document.getElementById('admin-order-table');
    const sellerOrderTable = document.getElementById('seller-order-table');
    let targetOrderTableBody = null, noOrderResultsRow = null;
    if (adminOrderTable) {
        targetOrderTableBody = adminOrderTable.querySelector('tbody');
        noOrderResultsRow = document.getElementById('no-admin-orders-found');
    } else if (sellerOrderTable) {
        targetOrderTableBody = sellerOrderTable.querySelector('tbody');
        noOrderResultsRow = document.getElementById('no-seller-orders-found');
    }
    if (orderFilterInput && targetOrderTableBody && noOrderResultsRow) {
        orderFilterInput.addEventListener('input', () => {
            const filterValue = orderFilterInput.value.trim().toLowerCase();
            const rows = targetOrderTableBody.querySelectorAll('tr.order-row'); let matchFound = false;
            rows.forEach(row => {
                const rowText = row.textContent.toLowerCase();
                if (filterValue === '' || rowText.includes(filterValue)) {
                    row.style.display = ''; matchFound = true;
                } else row.style.display = 'none';
            });
            if (!matchFound && rows.length > 0) {
                noOrderResultsRow.classList.remove('hidden'); noOrderResultsRow.style.display = '';
            } else {
                noOrderResultsRow.classList.add('hidden'); noOrderResultsRow.style.display = 'none';
            }
        });
    }
    function setupLiveFilter(inputId, tableId, noResultsId, rowSelector) {
        const filterInput = document.getElementById(inputId), table = document.getElementById(tableId),
              noResultsRow = document.getElementById(noResultsId);
        if (filterInput && table && noResultsRow) {
            const tableBody = table.querySelector('tbody'); if (!tableBody) return;
            filterInput.addEventListener('input', () => {
                const filterValue = filterInput.value.trim().toLowerCase();
                const rows = tableBody.querySelectorAll(rowSelector); let matchFound = false;
                rows.forEach(row => {
                    const rowText = row.textContent.toLowerCase();
                    if (filterValue === '' || rowText.includes(filterValue)) {
                        row.style.display = ''; matchFound = true;
                    } else row.style.display = 'none';
                });
                if (!matchFound && rows.length > 0) {
                    noResultsRow.classList.remove('hidden'); noResultsRow.style.display = '';
                } else {
                    noResultsRow.classList.add('hidden'); noResultsRow.style.display = 'none';
                }
            });
        }
    }
    setupLiveFilter('admin-product-filter-input', 'admin-product-table', 'no-admin-products-found', 'tr.product-row');
    setupLiveFilter('seller-product-filter-input', 'seller-product-table', 'no-seller-products-found', 'tr.product-row');
    setupLiveFilter('user-filter-input', 'admin-user-table', 'no-admin-users-found', 'tr.user-row');
    // ========================================
    // End Live Filtering Logic
    // ========================================

    // ========================================
    // Product Image Slider Logic
    // ========================================
    const imageSlider = document.querySelector('[data-product-image-slider]');
    if (imageSlider) {
        const slides = imageSlider.querySelectorAll('[data-product-slide]');
        const prevBtn = imageSlider.querySelector('[data-product-image-nav="prev"]');
        const nextBtn = imageSlider.querySelector('[data-product-image-nav="next"]');
        const dots = imageSlider.querySelectorAll('[data-product-image-dot]');
        let currentImageIndex = 0;
        let isProductDragging = false, productStartX = 0, productCurrentX = 0, productDiffX = 0;
        const productSwipeThreshold = 50;

        function showProductImage(index) {
            if (!slides || slides.length < 2) return;
            const newIndex = (index % slides.length + slides.length) % slides.length;
            slides.forEach((slide, i) => { slide.classList.toggle('active', i === newIndex); });
            dots.forEach((dot, i) => { dot.classList.toggle('active', i === newIndex); });
            currentImageIndex = newIndex;
        }
        function handleProductTouchStart(event) {
            if (slides.length <= 1) return; isProductDragging = true; productStartX = event.touches[0].pageX;
            productCurrentX = productStartX; productDiffX = 0;
        }
        function handleProductTouchMove(event) {
            if (!isProductDragging || slides.length <= 1) return; productCurrentX = event.touches[0].pageX;
            productDiffX = productStartX - productCurrentX; if (Math.abs(productDiffX) > 10) event.preventDefault();
        }
        function handleProductTouchEnd() {
            if (!isProductDragging || slides.length <= 1) return; isProductDragging = false;
            if (Math.abs(productDiffX) > productSwipeThreshold) {
                if (productDiffX > 0) showProductImage(currentImageIndex + 1);
                else showProductImage(currentImageIndex - 1);
            }
            productStartX = 0; productCurrentX = 0; productDiffX = 0;
        }
        if (slides.length > 1) {
            if (nextBtn) nextBtn.addEventListener('click', () => showProductImage(currentImageIndex + 1));
            if (prevBtn) prevBtn.addEventListener('click', () => showProductImage(currentImageIndex - 1));
            dots.forEach(dot => {
                dot.addEventListener('click', () => {
                    const index = parseInt(dot.dataset.productImageDot, 10);
                    if (!isNaN(index)) showProductImage(index);
                });
            });
            imageSlider.addEventListener('touchstart', handleProductTouchStart, { passive: true });
            imageSlider.addEventListener('touchmove', handleProductTouchMove, { passive: false });
            imageSlider.addEventListener('touchend', handleProductTouchEnd);
            imageSlider.addEventListener('touchcancel', handleProductTouchEnd);
        } else {
            if (nextBtn) nextBtn.style.display = 'none'; if (prevBtn) prevBtn.style.display = 'none';
            const dotsContainer = imageSlider.querySelector('.product-image-dots');
            if (dotsContainer) dotsContainer.style.display = 'none';
        }
        if (slides.length > 0) showProductImage(0);
    }
    // ========================================
    // End Product Image Slider Logic
    // ========================================

    // ========================================
    // Password Visibility Toggle
    // ========================================
    document.querySelectorAll('.password-toggle-btn').forEach(button => {
        button.addEventListener('click', () => {
            const passwordInput = button.previousElementSibling;
            if (passwordInput && (passwordInput.type === 'password' || passwordInput.type === 'text')) {
                const isPassword = passwordInput.type === 'password';
                passwordInput.type = isPassword ? 'text' : 'password';
                const icon = button.querySelector('i');
                if (icon) {
                    icon.classList.toggle('fa-eye', !isPassword);
                    icon.classList.toggle('fa-eye-slash', isPassword);
                }
            }
        });
    });
    // ========================================
    // End: Password Visibility Toggle
    // ========================================

    // ========================================
    // AJAX Add to Cart (Index Page - Event Delegation)
    // ========================================
    const productIndexContainer = document.querySelector('.product-index-container'); // Or a more specific parent like .product-grid
    if (productIndexContainer) {
        productIndexContainer.addEventListener('click', async (e) => {
            const button = e.target.closest('.btn-ajax-add-to-cart');
            if (button) {
                if (!button.dataset.originalHtmlContent) {
                    button.dataset.originalHtmlContent = button.innerHTML;
                }
                const originalHtml = button.dataset.originalHtmlContent;
                const loadingHtml = '<i class="fas fa-spinner fa-spin"></i>';
                const successHtml = '<i class="fas fa-check"></i> Added';

                const isAuthenticated = document.body.dataset.isAuthenticated === 'true';
                if (!isAuthenticated) {
                    sessionStorage.setItem('showLoginRedirectToast', 'true');
                    window.location.href = `/auth/login?returnTo=${encodeURIComponent(window.location.pathname + window.location.search)}`;
                    return;
                }

                const productId = button.dataset.productId;
                if (!productId) { console.error('Product ID not found on button'); showToast('Could not add item (missing ID).', 'danger'); return; }
                const quantity = 1;

                button.disabled = true; button.classList.add('loading'); button.innerHTML = loadingHtml;
                try {
                    const response = await fetch('/user/cart/add-ajax', {
                        method: 'POST', headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({ productId, quantity })
                    });
                    const data = await response.json();
                    if (!response.ok || !data.success) throw new Error(data.message || `Failed to add item (${response.status})`);
                    
                    showToast(data.message || 'Item added to cart!', 'success');
                    updateCartBadge(data.cartItemCount); // Server provides the new count
                    button.classList.remove('loading'); button.classList.add('success'); button.innerHTML = successHtml;
                    setTimeout(() => {
                        if (document.body.contains(button)) {
                            button.disabled = false; button.classList.remove('success'); button.innerHTML = originalHtml;
                        }
                    }, 1500);
                } catch (error) {
                    console.error("AJAX Add to Cart error:", error);
                    showToast(error.message || 'Could not add item to cart.', 'danger');
                    if (document.body.contains(button)) {
                        button.disabled = false; button.classList.remove('loading'); button.innerHTML = originalHtml;
                    }
                }
            }
        });
    }
    // ========================================
    // End: AJAX Add to Cart (Index Page)
    // ========================================

    // ========================================
    // Check for Login Redirect Toast on Page Load
    // ========================================
    if (window.location.pathname === '/auth/login') {
        const showToastFlag = sessionStorage.getItem('showLoginRedirectToast');
        if (showToastFlag === 'true') {
            showToast('Please log in to add items to your cart.', 'info');
            sessionStorage.removeItem('showLoginRedirectToast');
        }
    }
    // ========================================
    // End: Check for Login Redirect Toast
    // ========================================

}); // End DOMContentLoaded


// --- Helper Functions (Outside DOMContentLoaded) ---

// --- Cart Update AJAX Function ---
async function updateCartItemQuantityAJAX(productId, quantity, buttonElement, quantityInputElement) {
    // Note: originalButtonText should be 'Add' or similar from the cart page,
    // it might be different from the index page's 'Add to Cart'.
    // This function is specific to cart page updates.
    const originalButtonText = 'Add'; // Default for the cart page update button
    const loadingButtonText = '<i class="fas fa-spinner fa-spin"></i>';
    const cartItemDiv = buttonElement.closest('.cart-item');

    buttonElement.disabled = true;
    buttonElement.innerHTML = loadingButtonText;
    if(quantityInputElement) quantityInputElement.readOnly = true;

    try {
        const response = await fetch('/user/cart/update', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', },
            body: JSON.stringify({ productId, quantity })
         });
        const data = await response.json();

        if (!response.ok) {
             if (data.removal === true) {
                 showToast(data.message || 'Item unavailable and removed.', 'warning');
                 if (cartItemDiv) {
                    cartItemDiv.style.transition = 'opacity 0.3s ease, height 0.3s ease, margin 0.3s ease, padding 0.3s ease, border 0.3s ease';
                    cartItemDiv.style.opacity = '0'; cartItemDiv.style.height = '0';
                    cartItemDiv.style.paddingTop = '0'; cartItemDiv.style.paddingBottom = '0';
                    cartItemDiv.style.marginBottom = '0'; cartItemDiv.style.borderWidth = '0';
                     setTimeout(() => {
                         if (cartItemDiv.parentNode) cartItemDiv.remove();
                         // Use server-provided count if available, otherwise, client calculation is fallback
                         updateCartTotalAndBadge(data.cartTotal, data.cartItemCount);
                         handleEmptyCartDisplay();
                     }, 300);
                     return; 
                 }
             } else {
                 throw new Error(data.message || `Update failed (Status: ${response.status})`);
             }
        }

         if (data.success) {
             if(quantityInputElement) quantityInputElement.dataset.originalValue = data.newQuantity;
             if (quantity === 0) {
                if (cartItemDiv) {
                    cartItemDiv.style.transition = 'opacity 0.3s ease, height 0.3s ease, margin 0.3s ease, padding 0.3s ease, border 0.3s ease';
                    cartItemDiv.style.opacity = '0'; cartItemDiv.style.height = '0';
                    cartItemDiv.style.paddingTop = '0'; cartItemDiv.style.paddingBottom = '0';
                    cartItemDiv.style.marginBottom = '0'; cartItemDiv.style.borderWidth = '0';
                    setTimeout(() => {
                        if (cartItemDiv.parentNode) cartItemDiv.remove();
                        updateCartTotalAndBadge(data.cartTotal, data.cartItemCount);
                        handleEmptyCartDisplay();
                        showToast('Item removed from cart.', 'success');
                    }, 300);
                    return; 
                }
             } else {
                 const subtotalSpan = cartItemDiv?.querySelector('.item-subtotal-value');
                 if (subtotalSpan) subtotalSpan.textContent = (data.itemSubtotal !== undefined ? data.itemSubtotal : 0).toFixed(2);
                 if(quantityInputElement) quantityInputElement.value = data.newQuantity;
                 updateCartTotalAndBadge(data.cartTotal, data.cartItemCount);
             }
         } else {
              showToast(`Update failed: ${data.message || 'Unknown error'}`, 'danger');
              if(quantityInputElement && quantityInputElement.dataset.originalValue) {
                  quantityInputElement.value = quantityInputElement.dataset.originalValue;
              }
         }
    } catch (error) {
         console.error('Error updating cart quantity:', error);
          showToast(`Error: ${error.message}`, 'danger');
          if(quantityInputElement && quantityInputElement.dataset.originalValue) {
            quantityInputElement.value = quantityInputElement.dataset.originalValue;
          }
    } finally {
         if (cartItemDiv && (!cartItemDiv.style.opacity || parseFloat(cartItemDiv.style.opacity) !== 0)) {
             buttonElement.disabled = false;
             buttonElement.innerHTML = originalButtonText;
             if(quantityInputElement) quantityInputElement.readOnly = false;
         }
     }
}

// --- Helper Function to Show Toasts Dynamically ---
function showToast(message, type = 'info') {
    const toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) { console.error("Toast container not found! Falling back to alert."); alert(message); return; }
    const toastElement = document.createElement('div');
    toastElement.className = `toast toast-${type}`;
    toastElement.setAttribute('role', 'alert'); toastElement.setAttribute('aria-live', 'assertive');
    toastElement.setAttribute('aria-atomic', 'true');
    const sanitizedMessage = typeof message === 'string' ? message.replace(/</g, "<").replace(/>/g, ">") : 'An unexpected error occurred.';
    toastElement.innerHTML = `<div class="toast-body">${sanitizedMessage}<button type="button" class="toast-close-btn" aria-label="Close">×</button></div>`;
    const closeButton = toastElement.querySelector('.toast-close-btn');
    toastContainer.appendChild(toastElement);
    const autoHideDelay = 5000; let hideTimeoutId;
    const dismissToast = () => {
        clearTimeout(hideTimeoutId);
        if (toastElement.classList.contains('hide') || !toastElement.parentNode) return;
        toastElement.classList.remove('show'); toastElement.classList.add('hide');
        toastElement.addEventListener('transitionend', (event) => {
            if ((event.propertyName === 'opacity' || event.propertyName === 'transform') && toastElement.classList.contains('hide') && toastElement.parentNode) {
                try { toastElement.remove(); } catch(e) { console.warn("Error removing toast:", e); }
            }
        }, { once: true });
    };
    setTimeout(() => { if (toastElement.parentNode) toastElement.classList.add('show'); }, 10);
    hideTimeoutId = setTimeout(dismissToast, autoHideDelay);
    if (closeButton) closeButton.addEventListener('click', dismissToast);
    toastElement.addEventListener('mouseenter', () => clearTimeout(hideTimeoutId));
    toastElement.addEventListener('mouseleave', () => hideTimeoutId = setTimeout(dismissToast, autoHideDelay / 2));
}

// --- Helper Functions for Cart Badge and Empty Display ---
// Updates BOTH cart total display (on cart page) and header badge
function updateCartTotalAndBadge(newCartTotal, newCartItemCount) { // Accepts newCartItemCount
     const cartTotalSpan = document.getElementById('cart-total-value');
     if (cartTotalSpan) cartTotalSpan.textContent = (newCartTotal !== undefined ? newCartTotal : 0).toFixed(2);

     if (newCartItemCount !== undefined) { // Prioritize server-sent count
         updateCartBadge(newCartItemCount);
     } else { // Fallback if server doesn't send it (should be avoided)
         updateCartBadgeOnly();
     }
}

// Function to ONLY update the header cart badge
function updateCartBadge(newCount) {
    const cartBadge = document.querySelector('.cart-badge');
    if (cartBadge) {
        const count = Number(newCount); // Ensure it's a number
        if (count > 0) {
            cartBadge.textContent = count;
            cartBadge.classList.remove('hide');
        } else {
            cartBadge.textContent = '0';
            cartBadge.classList.add('hide');
        }
    }
}

// Helper to update badge by recalculating from cart page elements (FALLBACK ONLY)
function updateCartBadgeOnly() {
     const newCartItemCount = calculateNewCartCount();
     updateCartBadge(newCartItemCount);
}

function calculateNewCartCount() { // This is a fallback and might be less accurate during animations
    const cartItems = document.querySelectorAll('.cart-item'); let count = 0;
    cartItems.forEach(item => {
        const style = window.getComputedStyle(item);
        if (style.display !== 'none' && (!item.style.opacity || parseFloat(item.style.opacity) > 0)) {
             const qtyInput = item.querySelector('.quantity-input');
             if (qtyInput) count += parseInt(qtyInput.value, 10) || 0;
             else count++;
        }
    });
    return count;
}

function handleEmptyCartDisplay() {
    const cartItemsContainer = document.querySelector('.cart-items');
     const cartContainer = document.querySelector('.cart-container');
     const cartSummary = document.querySelector('.cart-summary');
     if (cartItemsContainer && cartContainer) {
         const visibleItems = Array.from(cartItemsContainer.querySelectorAll('.cart-item')).filter(item => {
             const style = window.getComputedStyle(item);
             return style.display !== 'none' && (!item.style.opacity || parseFloat(item.style.opacity) > 0);
         });
         if (visibleItems.length === 0) {
             if (!cartContainer.querySelector('.alert-info')) {
                 cartItemsContainer.innerHTML = '';
                 if(cartSummary) cartSummary.remove();
                 const emptyCartHTML = `<h1>Your Shopping Cart</h1><p class="alert alert-info mt-3">Your cart is empty. <a href="/" class="alert-link">Continue Shopping</a></p>`;
                 const h1 = cartContainer.querySelector('h1');
                 if (h1) h1.insertAdjacentHTML('afterend', emptyCartHTML.substring(emptyCartHTML.indexOf('<p')));
                 else cartContainer.innerHTML = emptyCartHTML;
             }
         }
     }
}

views/error.ejs :
<%- include('./partials/header', { title: 'Error' }) %>

<div class="error-container container">
    <h1>Error <%= typeof statusCode !== 'undefined' ? statusCode : '' %></h1>
    <p class="lead text-danger"><%= message %></p>

    <%# Use NODE_ENV from res.locals now %>
    <% if (NODE_ENV === 'development' && typeof stack !== 'undefined' && stack) { %>
        <details style="white-space: pre-wrap; margin-top: 20px; background: #f1f1f1; padding: 10px; border-radius: 5px; font-size: 0.8em;">
            <summary>Stack Trace (Development Mode)</summary>
            <code><%= stack %></code>
        </details>
    <% } %>

    <p style="margin-top: 20px;"><a href="/" class="btn btn-primary">Go back to Home</a></p>
</div>

<%- include('./partials/footer') %>

views/admin/dashboard.ejs :
<%- include('../partials/header', { title: 'Admin Dashboard' }) %>

<div class="admin-dashboard-container">
    <h1>Admin Dashboard</h1>
    <p class="text-muted mb-3">System-wide management access. Welcome, <%= currentUser.name %>!</p>

    <div class="admin-actions-grid">
         <a href="/admin/upload-product" class="admin-action-card">
            <i class="fas fa-upload text-primary"></i>
            <h3>Upload Product (as Admin)</h3>
            <p>Add a product directly to the system.</p>
        </a>
         <a href="/admin/manage-products" class="admin-action-card">
            <i class="fas fa-edit text-success"></i>
            <h3>Manage All Products</h3>
            <p>View, edit, remove products from any seller.</p>
         </a>
        <a href="/admin/manage-orders" class="admin-action-card">
             <i class="fas fa-clipboard-list text-info"></i>
             <h3>Manage All Orders</h3>
             <p>View, confirm delivery, or cancel any customer order.</p>
        </a>
        <a href="/admin/manage-users" class="admin-action-card">
             <i class="fas fa-users-cog text-warning"></i>
             <h3>Manage Users</h3>
             <p>Update roles (User, Seller, Admin), remove users.</p>
        </a>

         <a href="/admin/manage-banners" class="admin-action-card">
             <i class="fas fa-images text-secondary"></i>
             <h3>Manage Banners</h3>
             <p>Update the promotional banners on the homepage.</p>
         </a>

         <%# The "My Admin Profile" card linking to /user/profile has been removed %>

    </div>
</div>

 <%- include('../partials/footer') %>

views/admin/edit-product.ejs :
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container">
    <h1><%= title %></h1>
    <p>Admin editing view for product originally uploaded by <%= product.sellerId ? product.sellerId.email : 'Unknown Seller' %>.</p>

    <form action="/admin/manage-products/update/<%= product._id %>" method="POST" class="form-submit-spinner">
        <div class="form-group">
            <label for="name">Product Name:</label>
            <input type="text" id="name" name="name" class="form-control" value="<%= product.name %>" placeholder="Enter product name" required>
        </div>
        <div class="form-group">
            <label for="shortDescription">Short Description (Optional):</label>
            <textarea id="shortDescription" name="shortDescription" class="form-control" rows="2" placeholder="Briefly describe the product (max 200 chars)"><%= product.shortDescription || '' %></textarea>
        </div>
        <div class="form-group">
            <label for="category">Category:</label>
            <select id="category" name="category" class="form-control" required>
                <option value="" disabled <%= !product.category ? 'selected' : '' %>>Select a Category</option>
                <% if (typeof categories !== 'undefined') { %>
                    <% categories.forEach(cat => { %>
                        <option value="<%= cat.name %>" <%= (product.category === cat.name) ? 'selected' : '' %>><%= cat.name %></option>
                    <% }) %>
                <% } %>
            </select>
        </div>
        <div class="form-group">
            <label for="price">Price (₹):</label>
            <input type="number" id="price" name="price" class="form-control" step="0.01" min="0" value="<%= product.price %>" placeholder="e.g., 499.99" required>
        </div>
        <div class="form-group">
            <label for="stock">Stock Quantity:</label>
            <input type="number" id="stock" name="stock" class="form-control" min="0" value="<%= product.stock %>" placeholder="e.g., 50" required>
        </div>
        <div class="form-group">
            <label for="imageUrl">Image URL (Primary):</label>
            <input type="url" id="imageUrl" name="imageUrl" class="form-control" value="<%= product.imageUrl %>" placeholder="https://example.com/main-image.jpg" required>
            <% if (product.imageUrl) { %>
                <img src="<%= product.imageUrl %>" alt="Current Image" style="max-width: 100px; margin-top: 5px; border:1px solid #ccc; padding:2px;">
            <% } %>
        </div>
        <!-- --- UPDATED: Add Second Image URL Input --- -->
        <div class="form-group">
            <label for="imageUrl2">Second Image URL (Optional):</label>
            <input type="url"
                   id="imageUrl2"
                   name="imageUrl2"
                   class="form-control"
                   placeholder="https://example.com/alternate-image.jpg"
                   value="<%= (typeof product !== 'undefined' && product.imageUrl2) ? product.imageUrl2 : '' %>">
             <%# Preview for edit forms %>
             <% if (typeof product !== 'undefined' && product.imageUrl2) { %>
                <img src="<%= product.imageUrl2 %>" alt="Current Second Image" style="max-width: 100px; margin-top: 5px; border:1px solid #ccc; padding:2px;">
             <% } %>
        </div>
        <!-- --- END UPDATED --- -->
        <div class="form-group">
            <label for="specifications">Specifications:</label>
            <textarea id="specifications" name="specifications" class="form-control" rows="5" placeholder="Enter product details, features, dimensions, etc. (one per line recommended)"><%= product.specifications %></textarea>
        </div>

        <hr>
        <h4>Admin Review Control</h4>

        <div class="form-group">
            <label for="reviewStatus">Review Status:</label>
            <select id="reviewStatus" name="reviewStatus" class="form-control" onchange="toggleRejectionReason(this.value)">
                <option value="pending" <%= product.reviewStatus === 'pending' ? 'selected' : '' %>>Pending</option>
                <option value="approved" <%= product.reviewStatus === 'approved' ? 'selected' : '' %>>Approved</option>
                <option value="rejected" <%= product.reviewStatus === 'rejected' ? 'selected' : '' %>>Rejected</option>
            </select>
        </div>
        <div class="form-group" id="rejectionReasonGroup" <%= product.reviewStatus !== 'rejected' ? 'style="display: none;"' : '' %>>
            <label for="rejectionReason">Rejection Reason (Required if Rejected):</label>
            <textarea id="rejectionReason" name="rejectionReason" rows="3" class="form-control" placeholder="Explain why the product was rejected"><%= product.rejectionReason || '' %></textarea>
        </div>

        <button type="submit" class="btn btn-primary">Update Product (Admin)</button>
        <a href="/admin/manage-products" class="btn btn-secondary">Cancel</a>
    </form>
</div>

<script>
    function toggleRejectionReason(status) {
        const reasonGroup = document.getElementById('rejectionReasonGroup');
        if (status === 'rejected') {
            reasonGroup.style.display = 'block';
        } else {
            reasonGroup.style.display = 'none';
        }
    }
    document.addEventListener('DOMContentLoaded', () => {
        // Ensure the rejection reason field visibility is set correctly on page load
        const initialStatus = document.getElementById('reviewStatus').value;
        toggleRejectionReason(initialStatus);
    });
</script>

<%- include('../partials/footer') %>

views/admin/manage-banners.ejs :
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container">
    <h1><%= title %></h1>
    <p class="text-muted small mb-3">Enter direct URLs for the images. Banners will appear on the homepage if URLs are provided.</p>

    <form action="/admin/manage-banners" method="POST" class="form-submit-spinner">
        <% bannerConfig.banners.forEach((banner, index) => { %>
            <fieldset class="mb-4 border p-3 rounded"> <%# Group banner fields %>
                <legend class="h5">Banner <%= index + 1 %></legend>
                <div class="form-group">
                    <label for="imageUrl<%= index + 1 %>">Image URL <%= index + 1 %>:</label>
                    <input type="url" id="imageUrl<%= index + 1 %>" name="imageUrl<%= index + 1 %>" class="form-control" value="<%= banner.imageUrl %>" placeholder="https://example.com/banner<%= index + 1 %>.jpg">
                    <% if (banner.imageUrl) { %>
                        <img src="<%= banner.imageUrl %>" alt="Banner <%= index + 1 %> Preview" style="max-width: 200px; max-height: 75px; margin-top: 10px; border: 1px solid #ddd; padding: 2px; object-fit: contain;">
                    <% } else { %>
                         <small class="d-block mt-1 text-muted">No image set</small>
                    <% } %>
                </div>
                <div class="form-group">
                    <label for="linkUrl<%= index + 1 %>">Link URL <%= index + 1 %> (Optional):</label>
                    <input type="url" id="linkUrl<%= index + 1 %>" name="linkUrl<%= index + 1 %>" class="form-control" value="<%= banner.linkUrl %>" placeholder="https://example.com/category/offers">
                    <% if (banner.linkUrl) { %>
                       <small class="d-block mt-1 text-muted">Clicks to: <%= banner.linkUrl %></small>
                   <% } %>
                </div>
                <div class="form-group">
                    <label for="title<%= index + 1 %>">Title/Alt Text <%= index + 1 %> (Optional):</label>
                    <input type="text" id="title<%= index + 1 %>" name="title<%= index + 1 %>" class="form-control" value="<%= banner.title %>" placeholder="e.g., Special Summer Sale">
                </div>
             </fieldset>
        <% }) %>

        <button type="submit" class="btn btn-primary"><i class="fas fa-save"></i> Save Banners</button>
        <a href="/admin/dashboard" class="btn btn-secondary">Back to Dashboard</a>
    </form>
</div>

<%- include('../partials/footer') %>

views/admin/manage-orders.ejs :
<%# views/admin/manage-orders.ejs %>
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container order-manage-page">
    <h1><%= title %></h1>

    <%# --- ADD FILTER INPUT --- %>
    <div class="form-group mb-3">
        <label for="order-filter-input" class="visually-hidden">Filter Orders:</label>
        <input type="text" id="order-filter-input" class="form-control" placeholder="Type to filter orders (ID, Name, Email, Product, Status...)" aria-label="Filter Orders">
    </div>
    <%# --- END FILTER INPUT --- %>

    <% if (orders.length > 0) { %>
        <div class="table-container">
            <table class="data-table order-table" id="admin-order-table"> <%# Added ID %>
                <thead>
                    <tr>
                        <th>Details</th>
                        <th>Customer & Shipping Address</th>
                        <th>Items</th>
                        <th>Total</th>
                        <th>Status</th>
                        <th class="actions-cell">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% orders.forEach(order => { %>
                        <%# Added class="order-row" %>
                        <tr class="status-<%= order.status.toLowerCase().replace(/ /g, '-') %> order-row" data-order-id="<%= order._id %>">
                            <td data-label="Details">
                                <strong>ID:</strong> <%= order._id %><br>
                                <small class="text-muted"><%= formatDateIST(order.orderDate) %></small><br>
                                <% if (order.products && order.products.length > 0 && order.products[0].productId && order.products[0].productId.sellerId) { %>
                                    <small class="text-muted">Contains items from seller(s)</small>
                                <% } %>
                            </td>
                            <td data-label="Customer & Shipping Address">
                                <%# Customer Info %>
                                <div>
                                    <strong>Customer:</strong> <%= order.userId?.name || order.shippingAddress.name || '[Name Missing]' %><br>
                                    <small class="text-muted"><%= order.userEmail || order.userId?.email || '[Email Missing]' %></small>
                                </div>
                                <%# Full Shipping Address %>
                                <div class="mt-2 pt-2 border-top">
                                    <strong>Shipping To:</strong><br>
                                    <strong><%= order.shippingAddress.name %></strong><br>
                                    Ph: <%= order.shippingAddress.phone %><br>
                                    <% if (order.shippingAddress.landmarkNearby) { %>
                                        <%= order.shippingAddress.landmarkNearby %>,<br>
                                    <% } %>
                                    <%= order.shippingAddress.cityVillage %>,<br>
                                    <% if (order.shippingAddress.mandal) { %>
                                        <%= order.shippingAddress.mandal %>,<br>
                                    <% } %>
                                     <% if (order.shippingAddress.district) { %>
                                        <%= order.shippingAddress.district %>,<br>
                                    <% } %>
                                    <% if (order.shippingAddress.state) { %>
                                        <%= order.shippingAddress.state %> -
                                    <% } %>
                                    <%= order.shippingAddress.pincode %>
                                </div>
                            </td>
                            <td data-label="Items">
                                <div class="order-items-summary">
                                    <%- order.itemsSummary %>
                                </div>
                                <% if (order.products && order.products.length > 0) { %>
                                    <div class="order-items-images">
                                        <% order.products.forEach(item => { %>
                                            <% if (item.productId && item.productId._id && item.productId.imageUrl) { %>
                                                <a href="/products/<%= item.productId._id %>" target="_blank" title="View <%= item.productId.name || 'Product' %>">
                                                    <img src="<%= item.productId.imageUrl %>"
                                                         alt="<%= item.productId.name || 'Product Image' %>"
                                                         class="order-item-thumbnail" loading="lazy">
                                                </a>
                                            <% } else if (item.productId && item.productId._id) { %>
                                                <a href="/products/<%= item.productId._id %>" target="_blank" class="order-item-thumbnail-placeholder" title="View <%= item.productId.name || 'Product' %>">[No Img]</a>
                                            <% } else { %>
                                                <span class="order-item-thumbnail-placeholder" title="Product data missing">[N/A]</span>
                                            <% } %>
                                        <% }) %>
                                    </div>
                                <% } %>
                            </td>
                            <td data-label="Total" class="order-total"><strong>₹<%= order.totalAmount.toFixed(2) %></strong></td>
                            <td data-label="Status" class="order-status-cell">
                                <span class="status-badge status-<%= order.status.toLowerCase().replace(/ /g, '-') %>"><%= order.status %></span>
                                <% if(order.status === 'Cancelled' && order.cancellationReason) { %><br><small class="text-danger mt-1 d-block">Reason: <%= order.cancellationReason %></small><% } %>
                                <% if(order.status === 'Delivered' && order.receivedByDate) { %><br><small class="text-success mt-1 d-block">Delivered:<br><%= formatDateIST(order.receivedByDate) %></small><% } %>
                                <% if (order.showDeliveryOtp) { %>
                                  <div class="delivery-otp-display mt-1">
                                    <p>Customer OTP Sent</p>
                                    <small class="text-muted">Ask customer for code: <strong class="delivery-otp-code">****<%= order.orderOTP ? order.orderOTP.slice(-2) : 'XX' %></strong></small>
                                     <% if (order.orderOTPExpires) { %>
                                         <small class="text-muted d-block">Expires: <%= formatDateIST(order.orderOTPExpires) %></small>
                                     <% } %>
                                  </div>
                                <% } %>
                            </td>
                            <td data-label="Actions" class="actions-cell">
                                <%# Admin Direct Delivery Confirmation %>
                                <% if (order.canBeDirectlyDeliveredByAdmin) { %>
                                    <div class="action-group mb-2">
                                        <p class="action-group-title">Direct Delivery:</p>
                                        <% if (!order.showDeliveryOtp) { %>
                                            <form action="/admin/orders/<%= order._id %>/send-direct-delivery-otp" method="POST" class="inline-form form-submit-spinner mb-1">
                                                <button type="submit" class="btn btn-warning btn-sm w-100 w-md-auto" title="Send OTP to customer for admin delivery">
                                                    <i class="fas fa-mobile-alt"></i> Send OTP
                                                </button>
                                            </form>
                                        <% } %>
                                        <form action="/admin/orders/<%= order._id %>/confirm-direct-delivery" method="POST" class="inline-form verify-otp-form form-submit-spinner">
                                            <%# Added Placeholder %>
                                            <input type="text" name="otp" placeholder="Enter OTP" required pattern="\d{6}" maxlength="6" inputmode="numeric" title="Enter 6-digit OTP from customer">
                                            <button type="submit" class="btn btn-success btn-sm" title="Confirm direct delivery">
                                                <i class="fas fa-check-double"></i> Confirm
                                            </button>
                                        </form>
                                    </div>
                                <% } %>

                                <%# Admin Order Cancellation %>
                                <% if (order.canBeCancelledByAdmin) { %>
                                    <div class="action-group">
                                        <form action="/admin/orders/<%= order._id %>/cancel" method="POST" class="cancel-delivery-form form-submit-spinner" onsubmit="return confirm('ADMIN ACTION: Are you sure you want to cancel order <%= order._id %>? This cannot be undone.');">
                                            <label for="reason-<%= order._id %>" class="action-group-title">Cancel Order:</label>
                                            <select name="reason" id="reason-<%= order._id %>" required class="form-control form-control-sm d-block mb-1">
                                                <option value="" disabled selected>Select Admin Reason...</option>
                                                <% if (typeof cancellationReasons !== 'undefined' && cancellationReasons.length > 0) { %>
                                                    <% cancellationReasons.forEach(reason => { %>
                                                        <option value="<%= reason %>"><%= reason %></option>
                                                    <% }) %>
                                                <% } else { %>
                                                     <option value="Other (Admin)" selected>Other (Admin)</option> <%# Fallback %>
                                                <% } %>
                                            </select>
                                            <button type="submit" class="btn btn-danger btn-sm w-100 w-md-auto"><i class="fas fa-ban"></i> Cancel Order</button>
                                        </form>
                                    </div>
                                <% } %>

                                <%# Fallback for no actions %>
                                <% if (!order.canBeDirectlyDeliveredByAdmin && !order.canBeCancelledByAdmin) { %>
                                    <small class="text-muted no-actions-text">
                                        <% if (order.status === 'Delivered') { %>Completed<% } else if (order.status === 'Cancelled') { %>Cancelled<% } else { %>No admin actions<% } %>
                                    </small>
                                <% } %>
                            </td>
                        </tr>
                    <% }) %>
                    <%# --- ADD NO RESULTS ROW --- %>
                    <tr id="no-admin-orders-found" class="hidden">
                         <td colspan="6" class="text-center text-muted p-3">No orders match your filter.</td>
                    </tr>
                    <%# --- END NO RESULTS ROW --- %>
                </tbody>
            </table>
        </div>
    <% } else { %>
        <p class="alert alert-info">No orders received yet.</p>
    <% } %>
</div>

<%- include('../partials/footer') %>

views/admin/manage-products.ejs :
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container">
    <h1><%= title %></h1>
    <p class="text-muted small mb-3">Showing all products from all sellers.</p>

    <%# --- ADD FILTER INPUT --- %>
    <div class="form-group mb-3"> <%# Added mb-3 for spacing %>
        <label for="admin-product-filter-input" class="visually-hidden">Filter Products:</label>
        <%# Added Placeholder %>
        <input type="text" id="admin-product-filter-input" class="form-control" placeholder="Type to filter products (Name, Category, Seller, Status...)" aria-label="Filter Products">
    </div>
    <%# --- END FILTER INPUT --- %>

    <% if (products.length > 0) { %>
        <div class="table-container card">
             <%# --- Added ID to table --- %>
            <table class="data-table" id="admin-product-table">
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name / Category</th>
                        <th>Seller</th>
                        <th>Price / Stock</th>
                        <th>Status</th>
                        <th>Reason</th>
                        <th class="actions-cell" style="text-align: right;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% products.forEach(product => {
                        const productNameEsc = product.name.replace(/'/g, "\\'");
                        const sellerEmail = product.sellerId?.email || product.sellerEmail || 'Unknown';
                        const sellerEmailEsc = sellerEmail.replace(/'/g, "\\'");
                    %>
                        <%# --- Added class="product-row" --- %>
                        <tr class="status-<%= product.reviewStatus %> product-row" data-product-id="<%= product._id %>">
                            <td data-label="Image">
                                <a href="/products/<%= product._id %>">
                                    <img src="<%= product.imageUrl %>" alt="<%= product.name %>" class="table-img">
                                </a>
                            </td>
                            <td data-label="Name / Category">
                                <%= product.name %><br>
                                <small class="text-muted"><%= product.category %></small>
                            </td>
                            <td data-label="Seller"><%= sellerEmail %></td>
                            <td data-label="Price / Stock">
                                ₹<%= product.price.toFixed(2) %><br>
                                <small>Stock: <%= product.stock %></small>
                            </td>
                            <td data-label="Status">
                                <span class="status-badge status-<%= product.reviewStatus %> text-capitalize">
                                    <%= product.reviewStatus %>
                                </span>
                            </td>
                             <td data-label="Reason">
                                <% if(product.reviewStatus === 'rejected' && product.rejectionReason) { %>
                                    <small class="text-danger" title="Rejection Reason"><%= product.rejectionReason %></small>
                                <% } else { %>
                                    <span class="text-muted">--</span>
                                <% } %>
                            </td>
                            <td data-label="Actions" class="actions-cell">
                                <a href="/admin/manage-products/edit/<%= product._id %>" class="btn btn-text btn-sm" title="Edit Product (Admin)">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <form action="/admin/manage-products/remove/<%= product._id %>" method="POST" class="inline-form form-submit-spinner"
                                    onsubmit="return confirmAdminRemove('<%= productNameEsc %>', '<%= sellerEmailEsc %>')">
                                    <button type="submit" class="btn btn-text btn-danger btn-sm" title="Remove Product (Admin)">
                                        <i class="fas fa-trash"></i> Remove
                                    </button>
                                </form>
                            </td>
                        </tr>
                    <% }) %>
                     <%# --- ADD NO RESULTS ROW --- %>
                     <tr id="no-admin-products-found" class="hidden">
                         <td colspan="7" class="text-center text-muted p-3">No products match your filter.</td> <%# Adjusted colspan %>
                     </tr>
                     <%# --- END NO RESULTS ROW --- %>
                </tbody>
            </table>
        </div>
    <% } else { %>
        <p class="text-muted mt-3">No products found in the system.</p>
    <% } %>
</div>

<script>
    function confirmAdminRemove(productName, sellerEmail) {
        return confirm(`ADMIN ACTION: Remove product ${productName} (Seller: ${sellerEmail})?`);
    }
</script>

<%- include('../partials/footer') %>

views/admin/manage-users.ejs :
<%# views/admin/manage-users.ejs %>
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container">
    <h1><%= title %></h1>

    <%# --- ADD FILTER INPUT --- %>
    <div class="form-group mb-3">
        <label for="user-filter-input" class="visually-hidden">Filter Users:</label>
        <%# Added Placeholder %>
        <input type="text" id="user-filter-input" class="form-control" placeholder="Type to filter users (Name, Email, Role...)" aria-label="Filter Users">
    </div>
    <%# --- END FILTER INPUT --- %>

    <% if (users.length > 0) { %>
        <div class="table-container card">
            <%# --- ADDED ID to table --- %>
            <table class="data-table" id="admin-user-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email / Phone</th>
                        <th>Role</th>
                        <th>Registered On</th>
                        <th>Verified</th>
                        <th class="actions-cell" style="text-align: right;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% users.forEach(user => { %>
                        <%# --- ADDED class="user-row" --- %>
                        <tr class="user-row" data-user-id="<%= user._id %>">
                            <td data-label="Name"><%= user.name %></td>
                            <td data-label="Email / Phone">
                                <%= user.email %>
                                <% if (user.address && user.address.phone) { %>
                                    <br><small>(Ph: <%= user.address.phone %>)</small>
                                <% } %>
                            </td>
                            <td data-label="Role">
                                <form action="/admin/users/<%= user._id %>/update-role" method="POST" class="inline-form form-submit-spinner">
                                    <select name="role" onchange="this.form.submit()" class="form-control form-control-sm" style="display: inline-block; width: auto; vertical-align: middle;"> <%# Inline style for select %>
                                        <option value="user" <%= user.role === 'user' ? 'selected' : '' %>>User</option>
                                        <option value="seller" <%= user.role === 'seller' ? 'selected' : '' %>>Seller</option> <%# ADD SELLER %>
                                        <option value="admin" <%= user.role === 'admin' ? 'selected' : '' %>>Admin</option>
                                    </select>
                                    <noscript><button type="submit" class="btn btn-sm btn-primary ml-1">Update</button></noscript> <%# Fallback button %>
                                </form>
                            </td>
                            <td data-label="Registered On"><small><%= formatDateIST(user.createdAt) %></small></td>
                            <td data-label="Verified"><%= user.isVerified ? 'Yes' : 'No' %></td>
                            <td data-label="Actions" class="actions-cell">
                                <%# Prevent removing self or last admin in controller logic %>
                                <form action="/admin/users/<%= user._id %>/remove" method="POST" class="inline-form form-submit-spinner" onsubmit="return confirm('ADMIN ACTION: Are you sure you want to remove user <%= user.email %>? This is irreversible.');">
                                    <button type="submit" class="btn btn-danger btn-sm"><i class="fas fa-user-times"></i> Remove</button>
                                </form>
                            </td>
                        </tr>
                    <% }) %>
                    <%# --- ADD NO RESULTS ROW --- %>
                    <tr id="no-admin-users-found" class="hidden">
                         <td colspan="6" class="text-center text-muted p-3">No users match your filter.</td> <%# Adjusted colspan to 6 %>
                    </tr>
                    <%# --- END NO RESULTS ROW --- %>
                </tbody>
            </table>
        </div>
    <% } else { %>
        <p class="text-muted mt-3">No other registered users found.</p>
    <% } %>
</div>

<%- include('../partials/footer') %>

views/admin/upload-product.ejs :
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container">
    <h1>Admin: Upload New Product</h1>
    <p class="text-muted small mb-3">Product will be submitted for automatic review upon upload.</p>

    <form action="/admin/upload-product" method="POST" class="form-submit-spinner">
        <div class="form-group">
            <label for="name">Product Name:</label>
            <%# Added Placeholder %>
            <input type="text" id="name" name="name" class="form-control" value="<%= typeof product !== 'undefined' ? product.name : '' %>" placeholder="Enter product name" required>
        </div>
        <div class="form-group">
            <label for="shortDescription">Short Description (Optional):</label>
             <%# Added Placeholder %>
            <textarea id="shortDescription" name="shortDescription" class="form-control" rows="2" placeholder="Briefly describe the product (max 200 chars)"><%= typeof product !== 'undefined' ? product.shortDescription : '' %></textarea>
        </div>
        <div class="form-group">
            <label for="category">Category:</label>
            <select id="category" name="category" class="form-control" required>
                <option value="" disabled <%= !(typeof product !== 'undefined' && product.category) ? 'selected' : '' %>>Select a Category</option>
                <% if (typeof categories !== 'undefined') { %>
                    <% categories.forEach(cat => { %>
                        <option value="<%= cat.name %>" <%= (typeof product !== 'undefined' && product.category === cat.name) ? 'selected' : '' %>><%= cat.name %></option>
                    <% }) %>
                <% } %>
            </select>
        </div>
        <div class="form-group">
            <label for="price">Price (₹):</label>
             <%# Added Placeholder %>
            <input type="number" id="price" name="price" class="form-control" step="0.01" min="0" value="<%= typeof product !== 'undefined' ? product.price : '' %>" placeholder="e.g., 499.99" required>
        </div>
        <div class="form-group">
            <label for="stock">Stock Quantity:</label>
             <%# Added Placeholder %>
            <input type="number" id="stock" name="stock" class="form-control" min="0" value="<%= typeof product !== 'undefined' ? product.stock : '' %>" placeholder="e.g., 50" required>
        </div>
        <div class="form-group">
            <label for="imageUrl">Image URL (Primary):</label>
            <input type="url" id="imageUrl" name="imageUrl" class="form-control" placeholder="https://example.com/main-image.jpg" value="<%= typeof product !== 'undefined' ? product.imageUrl : '' %>" required>
        </div>
        <!-- --- UPDATED: Add Second Image URL Input --- -->
        <div class="form-group">
            <label for="imageUrl2">Second Image URL (Optional):</label>
            <input type="url"
                   id="imageUrl2"
                   name="imageUrl2"
                   class="form-control"
                   placeholder="https://example.com/alternate-image.jpg"
                   value="<%= (typeof product !== 'undefined' && product.imageUrl2) ? product.imageUrl2 : '' %>">
        </div>
        <!-- --- END UPDATED --- -->
        <div class="form-group">
            <label for="specifications">Specifications (Optional):</label>
             <%# Added Placeholder %>
            <textarea id="specifications" name="specifications" class="form-control" rows="5" placeholder="Enter product details, features, dimensions, etc. (one per line recommended)"><%= typeof product !== 'undefined' ? product.specifications : '' %></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Upload & Submit for Review</button>
        <a href="/admin/dashboard" class="btn btn-secondary">Cancel</a>
    </form>
</div>

<%- include('../partials/footer') %>


views/auth/forgot-password.ejs :
<%- include('../partials/header', { title: 'Forgot Password' }) %>

<div class="auth-container">
    <h1>Forgot Password</h1>
    <p>Enter your email address below. If an account exists, we'll send an OTP to verify your request.</p>

    <form action="/auth/forgot-password" method="POST" class="auth-form">
        <div class="form-group">
            <label for="email">Email:</label>
            <%# Added Placeholder %>
            <input type="email" id="email" name="email" placeholder="Enter your registered email" required>
        </div>
        <button type="submit" class="btn btn-primary">Send Reset OTP</button>
    </form>
    <div class="auth-links">
        <p><a href="/auth/login">Back to Login</a></p>
    </div>
</div>

<%- include('../partials/footer') %>

views/auth/login.ejs :
<%- include('../partials/header', { title: 'Login' }) %>

<div class="auth-container">
    <h1>Login</h1>

    <form action="/auth/login" method="POST" class="auth-form form-submit-spinner">
        <div class="form-group">
            <label for="email">Email:</label>
            <%# Added Placeholder %>
            <input type="email" id="email" name="email" placeholder="Enter your email" required autocomplete="email">
        </div>
        <%# --- ADDED: Password Wrapper & Toggle Button --- %>
        <div class="form-group">
            <label for="password">Password:</label>
            <div class="password-wrapper">
                <%# Added Placeholder %>
                <input type="password" id="password" name="password" placeholder="Enter your password" required autocomplete="current-password">
                <button type="button" class="password-toggle-btn" aria-label="Toggle password visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
            </div>
        </div>
        <%# --- END: Password Wrapper & Toggle Button --- %>
        <button type="submit" class="btn btn-primary">Login</button>
    </form>
    <div class="auth-links">
        <p><a href="/auth/forgot-password">Forgot Password?</a></p>
        <p>Don't have an account? <a href="/auth/register">Register here</a></p>
    </div>
</div>

<%- include('../partials/footer') %>

views/auth/register.ejs :
<%- include('../partials/header', { title: 'Register' }) %>

<div class="auth-container">
    <h1>Register</h1>

    <form action="/auth/register" method="POST" class="auth-form form-submit-spinner">
         <div class="form-group">
            <label for="name">Name:</label>
            <%# Retain value on error, added placeholder %>
            <input type="text" id="name" name="name" placeholder="Enter your full name" required autocomplete="name" value="<%= typeof name !== 'undefined' ? name : '' %>">
        </div>
        <div class="form-group">
            <label for="email">Email:</label>
             <%# Retain value on error, added placeholder %>
            <input type="email" id="email" name="email" placeholder="Enter your email address" required autocomplete="email" value="<%= typeof email !== 'undefined' ? email : '' %>">
        </div>
         <%# --- ADDED: Password Wrapper & Toggle Button --- %>
        <div class="form-group">
            <label for="password">Password:</label>
            <div class="password-wrapper">
                 <%# UPDATED: minlength="8", placeholder, title attr, added helper text --- %>
                <input type="password" id="password" name="password" placeholder="Create a password" minlength="8" required autocomplete="new-password" title="Min 8 chars: Uppercase, Lowercase, Number, Special Char">
                <button type="button" class="password-toggle-btn" aria-label="Toggle password visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
            </div>
            <%# --- ADDED: Helper Text --- %>
            <small class="form-text text-muted">Min 8 characters. Must include uppercase, lowercase, number, and special character (e.g: Example@2004).</small>
        </div>
         <%# --- END: Password Wrapper & Toggle Button --- %>
         <%# --- ADDED: Confirm Password Wrapper & Toggle Button --- %>
        <div class="form-group">
            <label for="confirmPassword">Confirm Password:</label>
             <div class="password-wrapper">
                 <%# UPDATED: minlength="8", placeholder --- %>
                <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm your password" minlength="8" required autocomplete="new-password">
                 <button type="button" class="password-toggle-btn" aria-label="Toggle password visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
            </div>
        </div>
        <%# --- END: Confirm Password Wrapper & Toggle Button --- %>
        <button type="submit" class="btn btn-primary">Register</button>
    </form>
    <div class="auth-links">
        <p>Already have an account? <a href="/auth/login">Login here</a></p>
    </div>
</div>

<%- include('../partials/footer') %>

views/auth/reset-password.ejs :
<%- include('../partials/header', { title: 'Reset Password' }) %>

<div class="auth-container">
    <h1>Reset Password</h1>
    <p>Enter your new password below.</p>

    <form action="/auth/reset-password/<%= token %>" method="POST" class="auth-form form-submit-spinner"> <%# Added form-submit-spinner %>
        <%# --- ADDED: Password Wrapper & Toggle Button --- %>
        <div class="form-group">
            <label for="password">New Password:</label>
             <div class="password-wrapper">
                <input type="password" id="password" name="password" placeholder="Enter new password" minlength="8" required title="Min 8 chars: Uppercase, Lowercase, Number, Special Char">
                 <button type="button" class="password-toggle-btn" aria-label="Toggle password visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
            </div>
            <%# --- ADDED: Helper Text --- %>
            <small class="form-text text-muted">Min 8 characters. Must include uppercase, lowercase, number, and special character (e.g: Example@2004).</small>
        </div>
        
        <div class="form-group">
            <label for="confirmPassword">Confirm New Password:</label>
             <div class="password-wrapper">
                <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password" minlength="8" required>
                 <button type="button" class="password-toggle-btn" aria-label="Toggle password visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
            </div>
        </div>
        <%# --- END: Confirm Password Wrapper & Toggle Button --- %>
        <button type="submit" class="btn btn-primary">Reset Password</button>
    </form>
     <div class="auth-links">
        <p><a href="/auth/login">Back to Login</a></p>
    </div>
</div>

<%- include('../partials/footer') %>

views/auth/verify-otp.ejs :
<%- include('../partials/header', { title: title || 'Verify OTP' }) %>

<div class="auth-container">
    <h1>Verify OTP</h1>
    <p>An OTP has been sent to <strong><%= email %></strong>. Please enter it below.</p>

    <form action="/auth/verify-otp" method="POST" class="auth-form form-submit-spinner">
         <input type="hidden" name="email" value="<%= email %>">
        <div class="form-group">
            <label for="otp">OTP Code:</label>
            <input type="text"
                   id="otp"
                   name="otp"
                   required
                   pattern="\d{6}"
                   maxlength="6"
                   inputmode="numeric"
                   autocomplete="one-time-code"
                   title="Enter the 6-digit OTP code received"
                   placeholder="Enter 6-digit OTP"> <%# Added Placeholder %>
        </div>
        <button type="submit" class="btn btn-primary">Verify OTP</button>
    </form>
    <div class="auth-links">
        <p>Didn't receive the OTP?</p>
        <form action="/auth/resend-otp" method="POST" style="display:inline;" class="form-submit-spinner">
             <input type="hidden" name="email" value="<%= email %>">
             <button type="submit" class="btn btn-secondary btn-sm">Resend OTP</button>
         </form>
    </div>
</div>

<%- include('../partials/footer') %>

views/partials/footer.ejs :
    </main> <%# End Main Content Area %>

    <footer class="app-footer desktop-only">
        <p>© <%= new Date().getFullYear() %> ProShop. All rights reserved.</p>
    </footer>

    <script src="/js/main.js"></script>

</body>
</html>

views/partials/header.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <% const pageTitle = typeof title !== 'undefined' ? title + ' - miniapp' : 'miniapp'; %>
  <% const siteName = typeof defaultSiteName !== 'undefined' ? defaultSiteName : 'miniapp'; %>
  <% const currentMetaTitle = typeof metaTitle !== 'undefined' ? metaTitle : pageTitle; %>
  <% const currentMetaDesc = typeof metaDescription !== 'undefined' ? metaDescription : 'Check out our products on ' + siteName; %>
  <% const currentMetaImage = typeof metaImageUrl !== 'undefined' ? metaImageUrl : '/images/default-logo.png'; %>
  <% const currentMetaUrl = typeof fullUrl !== 'undefined' ? fullUrl : ''; %>
  <% const currentMetaType = typeof metaType !== 'undefined' ? metaType : 'website'; %>

  <title><%= pageTitle %></title>
  <meta name="description" content="<%= currentMetaDesc %>">
  <meta property="og:title" content="<%= currentMetaTitle %>" />
  <meta property="og:description" content="<%= currentMetaDesc %>" />
  <meta property="og:image" content="<%= currentMetaImage %>" />
  <% if (currentMetaUrl) { %><meta property="og:url" content="<%= currentMetaUrl %>" /><% } %>
  <meta property="og:type" content="<%= currentMetaType %>" />
  <meta property="og:site_name" content="<%= siteName %>" />
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="<%= currentMetaTitle %>">
  <meta name="twitter:description" content="<%= currentMetaDesc %>">
  <meta name="twitter:image" content="<%= currentMetaImage %>">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
  <link rel="icon" href="/favicon.ico" type="image/x-icon">
  <link rel="stylesheet" href="/css/style.css">
</head>
<%# --- MODIFIED: Added data-is-authenticated attribute --- %>
<body data-is-authenticated="<%= currentUser ? 'true' : 'false' %>">
  <header class="app-header">
    <nav class="navbar">
      <div class="nav-left">
        <a href="/" class="app-logo">
          <i class="fas fa-shopping-bag"></i>
          <span class="app-name">miniapp</span>
        </a>
      </div>

      <div class="search-container-dynamic" id="dynamic-search-container">
          <form action="/products" method="GET" class="search-form-dynamic" id="dynamic-search-form">
              <input type="search"
                     id="search-input-dynamic"
                     name="search"
                     placeholder="Search products..."
                     aria-label="Search Products"
                     autocomplete="off">
              <button type="submit" class="search-submit-btn-dynamic" aria-label="Submit Search">
                  <i class="fas fa-search"></i>
              </button>
          </form>
           <div class="suggestions-dropdown" id="suggestions-dropdown">
              <%# Suggestions will be populated here by JS %>
          </div>
      </div>

      <div class="nav-right">
          <button class="nav-link search-toggle-btn" id="search-toggle-btn" aria-label="Toggle Search Bar">
              <i class="fas fa-search"></i>
              <span>Search</span>
          </button>

        <% if (currentUser) { %>
          <a href="/" class="nav-link <%= currentUrl === '/' ? 'active' : '' %>" title="Home Page">
            <i class="fas fa-home"></i> <span>Home</span>
          </a>
          <a href="/user/cart" class="nav-link nav-link-cart <%= currentUrl === '/user/cart' ? 'active' : '' %>" title="Cart Page">
            <i class="fas fa-shopping-cart"></i>
            <span class="cart-badge <%= cartItemCount > 0 ? '' : 'hide' %>"><%= cartItemCount %></span>
            <span>Cart</span>
          </a>
          <a href="/user/profile" class="profile-avatar-link <%= currentUrl === '/user/profile' ? 'active' : '' %>" title="My Profile Page">
            <span class="profile-avatar-initials"><%= userInitials %></span>
          </a>
        <% } else { %>
          <a href="/auth/login" class="btn btn-login-register">
            <i class="fas fa-sign-in-alt"></i> Login / Register
          </a>
        <% } %>
      </div>
    </nav>
  </header>

  <%- include('messages') %>

  <main class="container">

views/partials/messages.ejs :
<%# views/partials/messages.ejs %>

<%# --- NEW: Toast Container --- %>
<div class="toast-container">
    <% if (success_msg && success_msg.length > 0) { %>
      <div class="toast toast-success" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-body">
          <%= success_msg %>
          <button type="button" class="toast-close-btn" aria-label="Close">×</button>
        </div>
      </div>
    <% } %>

    <% if (error_msg && error_msg.length > 0) { %>
       <div class="toast toast-danger" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-body">
          <%= error_msg %>
           <button type="button" class="toast-close-btn" aria-label="Close">×</button>
        </div>
      </div>
    <% } %>

    <% if (error && typeof error !== 'undefined' && error.length > 0) { %>
      <div class="toast toast-danger" role="alert" aria-live="assertive" aria-atomic="true">
         <div class="toast-body">
           <%= error %>
            <button type="button" class="toast-close-btn" aria-label="Close">×</button>
         </div>
       </div>
    <% } %>

    <%# Add other flash message types (info, warning) here if needed %>

</div>
<%# --- End Toast Container --- %>

<%# The old alert divs are removed %>

views/products/detail.ejs :
<%# views/products/detail.ejs %>
<%- include('../partials/header', {
    title: product.name,
    metaTitle: product.name + ' - ' + defaultSiteName,
    metaDescription: (product.shortDescription || `Check out ${product.name} on miniapp. Available now for ₹${product.price.toFixed(2)}.`).substring(0, 157) + '...',
    metaImageUrl: product.imageUrl, // Use primary image for meta tags
    metaUrl: fullUrl,
    metaType: 'product'
}) %>

<div class="product-detail-container">

   <%# --- Status Banner --- %>
   <% if (!isApproved && (isAdminView || isOwnerView)) { %>
     <div class="alert alert-<%= product.reviewStatus === 'rejected' ? 'danger' : 'warning' %> mb-3" role="alert">
       <strong>Status:</strong> <span class="text-capitalize fw-bold"><%= product.reviewStatus %></span>
       <% if (product.reviewStatus === 'rejected' && product.rejectionReason) { %>
         <br><strong>Reason:</strong> <%= product.rejectionReason %>
       <% } else if (product.reviewStatus === 'pending') { %>
          - This product is awaiting review and is not visible to customers.
       <% } %>
       <% if (isOwnerView && product.reviewStatus !== 'approved') { %>
          <br><a href="/seller/products/edit/<%= product._id %>" class="alert-link">Edit and Resubmit for Review</a>
        <% } else if (isAdminView && product.reviewStatus !== 'approved') { %>
           <br><a href="/admin/manage-products/edit/<%= product._id %>" class="alert-link">Admin: Edit Status/Details</a>
       <% } %>
     </div>
   <% } else if (!isApproved && !isAdminView && !isOwnerView) { %>
      <div class="alert alert-danger">This product is currently unavailable.</div>
      </div> <%# Close container early if unavailable %>
      <%- include('../partials/footer') %>
      <% return; %>
   <% } %>

   <div class="product-detail-main">
        <%# --- Image Display Logic --- %>
        <div class="product-detail-image-section"> <%# Wrapper section %>
            <% if (product.imageUrl2) { %>
                <%# Slider structure if two images exist %>
                <div class="product-image-slider-container" data-product-image-slider>
                    <div class="product-image-slides">
                        <div class="product-image-slide active" data-product-slide>
                            <img src="<%= product.imageUrl %>" alt="<%= product.name %> - Image 1" class="product-detail-image">
                        </div>
                        <div class="product-image-slide" data-product-slide>
                             <img src="<%= product.imageUrl2 %>" alt="<%= product.name %> - Image 2" class="product-detail-image">
                        </div>
                    </div>
                    <%# Navigation Arrows only if there are slides to navigate %>
                    <button class="product-image-nav product-image-prev" data-product-image-nav="prev" aria-label="Previous Image">‹</button>
                    <button class="product-image-nav product-image-next" data-product-image-nav="next" aria-label="Next Image">›</button>
                    <%# Navigation Dots only if there are slides to navigate %>
                     <div class="product-image-dots">
                         <button class="product-image-dot active" data-product-image-dot="0" aria-label="Go to image 1"></button>
                         <button class="product-image-dot" data-product-image-dot="1" aria-label="Go to image 2"></button>
                     </div>
                </div>
            <% } else { %>
                <%# Original single image display if only one image %>
                <div class="product-detail-image-single"> <%# Optional wrapper %>
                    <img src="<%= product.imageUrl %>" alt="<%= product.name %>" class="product-detail-image">
                </div>
            <% } %>
        </div>
        <%# --- END Image Display Logic --- %>

       <div class="product-detail-info">
            <h1><%= product.name %></h1>
            <% if (product.shortDescription) { %>
              <p class="product-short-description text-muted mb-2"><%= product.shortDescription %></p>
            <% } %>
            <p class="detail-price">₹<%= product.price.toFixed(2) %></p>
            <p class="detail-stock">
                <% if (product.stock > 0) { %>
                    Available Stock : <%= product.stock %>
                <% } else { %>
                    <span class="text-danger fw-bold">Out of Stock</span>
                <% } %>
            </p>

            <%# Share Button %>
            <div class="share-section mt-2">
                 <button id="share-product-btn" class="btn btn-outline-secondary btn-sm"
                         data-title="<%= product.name %>"
                         data-text="Check out this product: <%= product.name %>"
                         data-url="<%= fullUrl %>">
                     <i class="fas fa-share-alt"></i> Share
                 </button>
                 <div id="fallback-share-links" class="fallback-share-links hidden">
                     <small>Share via:</small>
                     <a href="https://www.facebook.com/sharer/sharer.php?u=<%= encodeURIComponent(fullUrl) %>" target="_blank" rel="noopener noreferrer" aria-label="Share on Facebook"><i class="fab fa-facebook-square"></i></a>
                     <a href="https://twitter.com/intent/tweet?url=<%= encodeURIComponent(fullUrl) %>&text=<%= encodeURIComponent('Check out this product: ' + product.name) %>" target="_blank" rel="noopener noreferrer" aria-label="Share on Twitter"><i class="fab fa-twitter-square"></i></a>
                     <a href="https://api.whatsapp.com/send?text=<%= encodeURIComponent('Check out this product: ' + product.name + ' ' + fullUrl) %>" target="_blank" rel="noopener noreferrer" aria-label="Share on WhatsApp"><i class="fab fa-whatsapp-square"></i></a>
                     <a href="mailto:?subject=<%= encodeURIComponent('Check out this product: ' + product.name) %>&body=<%= encodeURIComponent('I thought you might like this product:\n\n' + product.name + '\n' + fullUrl) %>" aria-label="Share via Email"><i class="fas fa-envelope-square"></i></a>
                 </div>
             </div>

           <%# --- Conditional Purchase Actions START --- %>
           <% if (isApproved) { %>
               <div class="product-actions mt-3"> <%# Added margin-top %>
                   <div class="d-flex flex-wrap align-items-center gap-2">

                       <%# Add to Cart Form (Target for JS) %>
                       <form action="/user/cart/add" method="POST" id="add-to-cart-form-<%= product._id %>" class="form-submit-spinner">
                          <input type="hidden" name="productId" value="<%= product._id %>">
                           <div class="quantity-selector d-inline-flex align-items-center me-2">
                               <label for="quantity-<%= product._id %>" class="me-1 mb-0 text-muted small">Qty:</label>
                               <input type="number"
                                      id="quantity-<%= product._id %>"
                                      name="quantity"
                                      value="1"
                                      min="1"
                                      max="<%= product.stock %>"
                                      required
                                      aria-label="Quantity"
                                      class="form-control form-control-sm"
                                      style="width: 65px;">
                           </div>
                       </form>

                       <%# Add to Cart Button (Target for JS) %>
                       <button type="submit"
                               id="btn-add-to-cart-<%= product._id %>" <%# *** ADDED ID *** %>
                               form="add-to-cart-form-<%= product._id %>"
                               class="btn btn-primary btn-sm btn-action"
                               <%= product.stock <= 0 ? 'disabled' : '' %>>
                           <i class="fas fa-cart-plus"></i> <%= product.stock <= 0 ? 'Out of Stock' : 'Add to Cart' %>
                       </button>

                        <%# Buy Now Form (Target for JS) %>
                        <% if (product.stock > 0) { %>
                        <form action="/user/cart/add?redirectTo=checkout" method="POST" id="buy-now-form-<%= product._id %>" class="form-submit-spinner">
                              <input type="hidden" name="productId" value="<%= product._id %>">
                              <%# Ensure quantity for Buy Now is consistent with Add to Cart selection %>
                              <input type="hidden" name="quantity" id="buy-now-quantity-<%= product._id %>" value="1">
                           </form>
                            <%# Buy Now Button (Target for JS) %>
                           <button type="submit"
                                   id="btn-buy-now-<%= product._id %>" <%# *** ADDED ID *** %>
                                   form="buy-now-form-<%= product._id %>"
                                   class="btn btn-success btn-sm btn-action"><i class="fas fa-bolt"></i> <%# **** ICON ADDED HERE **** %>
                                   Buy Now
                           </button>
                        <% } else {%>
                          <button class="btn btn-success btn-sm btn-action" disabled><i class="fas fa-bolt"></i> Buy Now</button> <%# **** ICON ADDED HERE (DISABLED) **** %>
                        <% } %>

                   </div>
               </div>
            <% } else { %>
                <%# Unavailable state buttons %>
                <div class="product-actions mt-3">
                     <div class="d-flex flex-wrap align-items-center gap-2">
                         <button class="btn btn-primary btn-sm btn-action" disabled><i class="fas fa-cart-plus"></i> Add to Cart</button> <%# Keep existing icon here %>
                         <button class="btn btn-success btn-sm btn-action" disabled>Buy Now</button>
                     </div>
                     <p class="text-muted small mt-2">This product is currently under review or unavailable.</p>
                 </div>
            <% } %>
            <%# --- Conditional Purchase Actions END --- %>


            <%# Specifications %>
            <div class="product-specifications mt-3">
                 <h3>Specifications</h3>
                 <pre class="border p-2 bg-light small"><%= product.specifications || 'No specifications provided.' %></pre>
            </div>

            <%# Seller Info %>
            <p class="small text-muted mt-3">Seller Info : <%= product.sellerEmail || 'Unknown Seller' %></p>

            <%# Rating Display %>
            <div class="mb-3 mt-2">
                 <% if (product.numReviews > 0) { %>
                     <p class="detail-rating">
                         Rating:
                        <% for(let i=1; i<=5; i++) { %><i class="fas fa-star<%= i <= product.averageRating ? '' : (i - 0.5 <= product.averageRating ? '-half-alt' : '-regular') %>"></i><% } %>
                         (<%= product.numReviews %> reviews) | <%= product.orderCount %> Ordered
                     </p>
                 <% } else { %>
                     <p class="detail-rating">No reviews yet | <%= product.orderCount %> Ordered</p>
                 <% } %>
             </div>

       </div> <%# End product-detail-info %>
    </div> <%# End product-detail-main %>

   <%# Conditional Rating Section (User Input) %>
   <div class="product-rating-section mt-4 border-top pt-3">
        <h3>Rate This Product</h3>
        <% if (isApproved) { %>
            <% if (userCanRate) { %>
                <form action="/products/<%= product._id %>/rate" method="POST" class="form-submit-spinner">
                    <div class="rating-stars">
                        <% for (let i = 5; i >= 1; i--) { %><input type="radio" id="star<%= i %>" name="rating" value="<%= i %>" <%= userRating === i ? 'checked' : '' %> required><label for="star<%= i %>" title="<%= i %> stars"><i class="fas fa-star"></i></label><% } %>
                    </div>
                    <button type="submit" class="btn btn-primary btn-sm">Submit Rating</button>
                </form>
            <% } else { %>
               <p><a href="/auth/login?returnTo=<%= encodeURIComponent(currentUrl) %>">Login</a> to rate this product.</p>
            <% } %>
         <% } else { %>
             <p class="text-muted">Rating is unavailable until the product is approved.</p>
         <% } %>
   </div>

    <%# Rating Stats Display (Summary) %>
    <div class="rating-stats-container mt-4 border-top pt-3">
        <h3>Ratings & Reviews Summary</h3>
         <% if (totalRatings > 0) { %>
             <div class="rating-summary mb-3">
                 <div class="rating-average">
                     <span class="rating-average-value"><%= product.averageRating.toFixed(1) %></span> <i class="fas fa-star text-warning"></i>
                 </div>
                 <div class="rating-total text-muted small">
                     Based on <%= totalRatings %> Rating<%= totalRatings !== 1 ? 's' : '' %>
                 </div>
             </div>
            <div class="rating-bars">
                <% for (let i = 5; i >= 1; i--) {
                      const count = ratingCounts[i] || 0;
                      const percentage = totalRatings > 0 ? (count / totalRatings) * 100 : 0;
                 %>
                     <div class="rating-bar-row">
                         <span class="rating-bar-label small"><%= i %> <i class="fas fa-star text-warning"></i></span>
                         <div class="rating-bar-progress progress" style="height: 8px;">
                             <div class="rating-bar-fill progress-bar bg-success" role="progressbar" data-width="<%= percentage.toFixed(1) %>" aria-valuenow="<%= percentage.toFixed(1) %>" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>
                         </div>
                         <span class="rating-bar-count small text-muted"><%= count %></span>
                     </div>
                 <% } %>
            </div>
        <% } else { %>
            <p>No ratings yet for this product.</p>
         <% } %>
    </div>

</div> <%# End product-detail-container %>


<%# --- INLINE SCRIPT FOR DETAIL PAGE AUTH CHECK --- %>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // Get authentication status from body tag (set in header.ejs)
    const isAuthenticated = document.body.dataset.isAuthenticated === 'true';

    // Helper function for redirection
    const redirectToLogin = (returnUrl) => {
        sessionStorage.setItem('showLoginRedirectToast', 'true');
        window.location.href = `/auth/login?returnTo=${encodeURIComponent(returnUrl)}`;
    };

    // *** Add to Cart Button Listener ***
    const addToCartBtn = document.getElementById('btn-add-to-cart-<%= product._id %>');
    if (addToCartBtn) {
        addToCartBtn.addEventListener('click', (event) => {
            if (!isAuthenticated) {
                event.preventDefault(); // Prevent form submission
                redirectToLogin(window.location.pathname + window.location.search);
            }
            // If authenticated, the default form submission will proceed
        });
    }

    // *** Buy Now Button Listener ***
    const buyNowBtn = document.getElementById('btn-buy-now-<%= product._id %>');
    const quantityInput = document.getElementById('quantity-<%= product._id %>'); // Get the quantity input
    const buyNowQuantityInput = document.getElementById('buy-now-quantity-<%= product._id %>'); // Get the hidden input for buy now

    if (buyNowBtn) {
        buyNowBtn.addEventListener('click', (event) => {
            if (!isAuthenticated) {
                event.preventDefault(); // Prevent form submission
                redirectToLogin(window.location.pathname + window.location.search);
            } else {
                 // *** NEW: Update hidden quantity for Buy Now ***
                 if (quantityInput && buyNowQuantityInput) {
                    buyNowQuantityInput.value = quantityInput.value || '1'; // Use selected qty or default to 1
                 }
                 // Allow form submission to proceed (including spinner logic if attached)
            }
        });
    }
});
</script>
<%# --- END INLINE SCRIPT --- %>


<script>
    // --- Image Slider JS ---
    // ... (Existing Image Slider JS - Keep As Is) ...
    const imageSlider = document.querySelector('[data-product-image-slider]');
    if (imageSlider) {
        const slides = imageSlider.querySelectorAll('[data-product-slide]');
        const prevBtn = imageSlider.querySelector('[data-product-image-nav="prev"]');
        const nextBtn = imageSlider.querySelector('[data-product-image-nav="next"]');
        const dots = imageSlider.querySelectorAll('[data-product-image-dot]');
        let currentImageIndex = 0;

        let isProductDragging = false; // Renamed drag state variable
        let productStartX = 0;       // Renamed touch start X
        let productCurrentX = 0;     // Renamed touch current X
        let productDiffX = 0;        // Renamed touch difference X
        const productSwipeThreshold = 50;

        function showProductImage(index) {
            if (!slides || slides.length < 2) return; // Ensure slider elements exist and there's > 1 slide
            const newIndex = (index % slides.length + slides.length) % slides.length;
            slides.forEach((slide, i) => { slide.classList.toggle('active', i === newIndex); });
            dots.forEach((dot, i) => { dot.classList.toggle('active', i === newIndex); });
            currentImageIndex = newIndex;
        }

        // --- Touch Event Handling ---
        function handleProductTouchStart(event) {
             if (slides.length <= 1) return;
             isProductDragging = true;
             // Use pageX for touch events
             productStartX = event.touches[0].pageX;
             productCurrentX = productStartX;
             productDiffX = 0;
             // Prevent default only if dragging starts significantly
        }

        function handleProductTouchMove(event) {
             if (!isProductDragging || slides.length <= 1) return;
             productCurrentX = event.touches[0].pageX;
             productDiffX = productStartX - productCurrentX;
              // Prevent scrolling the page vertically if a horizontal swipe is detected
             if (Math.abs(productDiffX) > 10) {
                 event.preventDefault();
             }
        }

        function handleProductTouchEnd() {
             if (!isProductDragging || slides.length <= 1) return;
             isProductDragging = false;
             if (Math.abs(productDiffX) > productSwipeThreshold) {
                 if (productDiffX > 0) { // Swiped left
                     showProductImage(currentImageIndex + 1);
                 } else { // Swiped right
                     showProductImage(currentImageIndex - 1);
                 }
             }
             // Reset values
             productStartX = 0;
             productCurrentX = 0;
             productDiffX = 0;
        }

        // Add event listeners if buttons/dots exist and for touch
        if (slides.length > 1) {
            if (nextBtn) { nextBtn.addEventListener('click', () => showProductImage(currentImageIndex + 1)); }
            if (prevBtn) { prevBtn.addEventListener('click', () => showProductImage(currentImageIndex - 1)); }
            dots.forEach(dot => {
                dot.addEventListener('click', () => {
                    const index = parseInt(dot.dataset.productImageDot, 10);
                    if (!isNaN(index)) { showProductImage(index); }
                });
            });
            // Add touch listeners to the slider container
            imageSlider.addEventListener('touchstart', handleProductTouchStart, { passive: true }); // Use passive where possible
            imageSlider.addEventListener('touchmove', handleProductTouchMove, { passive: false }); // Prevent scroll during swipe
            imageSlider.addEventListener('touchend', handleProductTouchEnd);
            imageSlider.addEventListener('touchcancel', handleProductTouchEnd); // Handle cancellation
        } else {
             // Hide controls if only one image
             if (nextBtn) nextBtn.style.display = 'none';
             if (prevBtn) prevBtn.style.display = 'none';
             const dotsContainer = imageSlider.querySelector('.product-image-dots');
             if (dotsContainer) dotsContainer.style.display = 'none';
        }


        // Initialize the slider to the first image
        if (slides.length > 0) {
             showProductImage(0);
        }
    }
    // --- END Image Slider JS ---

    // --- Rating Bar Animation JS ---
    // ... (Existing Rating Bar JS - Keep As Is) ...
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.rating-bar-fill').forEach(function(el) {
            var width = el.getAttribute('data-width');
            if (width) {
                // Using requestAnimationFrame for smoother potentially paint timing
                requestAnimationFrame(() => {
                    // Check if element still exists in DOM before applying style
                    if(el.parentNode) {
                       el.style.width = width + '%';
                    }
                });
            }
        });
    });
    // --- END Rating Bar Animation JS ---
</script>

<%- include('../partials/footer') %>

views/products/index.ejs :
<%# views/products/index.ejs %>
<%- include('../partials/header', { title: title }) %>

<%# --- Category Icons Section (Uses new CSS) --- %>
<% if (typeof displayCategories !== 'undefined' && displayCategories.length > 0) { %>
    <div class="category-icons-section mb-4">
        <div class="category-grid">
            <% displayCategories.forEach(cat => { %>
                <% let categoryUrl = '/?category=' + encodeURIComponent(cat.name); %>
                <%# Keep search term if user is filtering category *after* a search %>
                <% if (typeof searchTerm !== 'undefined' && searchTerm) { categoryUrl += '&search=' + encodeURIComponent(searchTerm); } %>
                <a href="<%= categoryUrl %>"
                   class="category-item <%= (typeof selectedCategory !== 'undefined' && selectedCategory === cat.name) ? 'active' : '' %>"
                   title="Shop <%= cat.name %>">
                    <div class="category-icon-wrapper">
                         <img src="<%= cat.iconUrl %>"
                              alt="<%= cat.name %> Icon"
                              class="category-icon"
                              loading="lazy">
                    </div>
                    <span class="category-name"><%= cat.name %></span>
                </a>
            <% }) %>
        </div>
    </div>
<% } %>
<%# --- End: Category Icons Section --- %>


<%# --- Conditionally Display Banner Slider --- %>
<%# Only show the banner if NO category is selected AND NO search term is present %>
<% if (!selectedCategory && (!searchTerm || searchTerm.trim() === '')) { %>
    <% if (typeof homepageBanners !== 'undefined' && homepageBanners.length > 0) { %>
        <div class="banner-slider-container mb-4" data-slider-container>
            <div class="banner-slides" data-slides>
                <% homepageBanners.forEach((banner, index) => { %>
                    <div class="banner-slide <%= index === 0 ? 'active' : '' %>" data-slide>
                        <% if (banner.linkUrl) { %>
                            <a href="<%= banner.linkUrl %>" rel="noopener noreferrer" class="banner-link">
                                <img src="<%= banner.imageUrl %>"
                                     alt="<%= banner.title || `Promotional Banner ${index + 1}` %>"
                                     class="banner-image"
                                     loading="lazy">
                            </a>
                        <% } else { %>
                            <img src="<%= banner.imageUrl %>"
                                 alt="<%= banner.title || `Promotional Banner ${index + 1}` %>"
                                 class="banner-image"
                                 loading="lazy">
                        <% } %>
                    </div>
                <% }) %>
            </div>

            <%# Optional: Navigation Arrows %>
            <% if (homepageBanners.length > 1) { %>
                <button class="banner-nav banner-prev" data-slider-prev aria-label="Previous Banner"><i class="fas fa-chevron-left"></i></button>
                <button class="banner-nav banner-next" data-slider-next aria-label="Next Banner"><i class="fas fa-chevron-right"></i></button>
            <% } %>

            <%# Optional: Navigation Dots %>
             <% if (homepageBanners.length > 1) { %>
                <div class="banner-dots" data-slider-dots>
                    <% homepageBanners.forEach((_, index) => { %>
                        <button class="banner-dot <%= index === 0 ? 'active' : '' %>" data-slide-to="<%= index %>" aria-label="Go to banner <%= index + 1 %>"></button>
                    <% }) %>
                </div>
            <% } %>
        </div>
    <% } %>
<% } %>
<%# --- End: Homepage Banner Slider Section --- %>


<div class="product-index-container">
     <%# Display title based on filter/search %>
     <% if (selectedCategory) { %>
         <h1 class="mb-3"><%= selectedCategory %> Products</h1>
     <% } else if (searchTerm) { %>
         <h1 class="mb-3">Search Results for "<%= searchTerm %>"</h1>
     <% } else { %>
          <%# Only show "New Launches" if neither category nor search is active %>
          <h1 class="mb-3">New Launches</h1>
     <% } %>


    <%# Check if products array exists and has items %>
    <% if (typeof products !== 'undefined' && products.length > 0) { %>
        <div class="product-grid">
            <% products.forEach(product => { %>
                <%# Ensure product and its properties exist before accessing %>
                <% if (product && product._id && product.name && product.imageUrl && typeof product.price !== 'undefined' && typeof product.stock !== 'undefined') { %>
                    <div class="product-card">
                        <a href="/products/<%= product._id %>" class="product-link">
                            <img src="<%= product.imageUrl %>" alt="<%= product.name %>" class="product-image" loading="lazy"> <%# Added lazy loading %>
                            <div class="product-info">
                                <h3 class="product-name"><%= product.name %></h3>
                                <p class="product-price">₹<%= (typeof product.price === 'number' ? product.price : 0).toFixed(2) %></p>
                                <p class="product-stock">Stock: <%= product.stock %></p>
                                <%# Display Rating %>
                                <% const numReviews = product.numReviews || 0; %>
                                <% const averageRating = product.averageRating || 0; %>
                                <% if (numReviews > 0) { %>
                                     <p class="product-rating">
                                        <% for(let i=1; i<=5; i++) { %>
                                            <i class="fas fa-star<%= i <= averageRating ? '' : (i - 0.5 <= averageRating ? '-half-alt' : '-regular') %>"></i>
                                        <% } %>
                                        (<%= numReviews %>)
                                     </p>
                                <% } else { %>
                                    <p class="product-rating" style="height: 1.2em;"> </p> <%# Keep space for alignment if no rating %>
                                <% } %>
                            </div>
                        </a>
                         <%# --- UPDATED: Changed to button for AJAX --- %>
                         <div class="product-card-actions">
                            <button type="button"
                                    class="btn btn-primary btn-ajax-add-to-cart" <%# Use new class %>
                                    data-product-id="<%= product._id %>" <%# Add product ID %>
                                    <%= product.stock <= 0 ? 'disabled' : '' %>
                                    title="Add <%= product.name %> to cart">
                                <i class="fas fa-cart-plus"></i> <%= product.stock <= 0 ? 'Out of Stock' : 'Add to Cart' %>
                             </button>
                         </div>
                          <%# --- END UPDATE --- %>
                    </div>
                <% } %>
            <% }) %>
        </div>
    <% } else { %>
         <%# Display message if no products match filters or none exist %>
         <p class="alert alert-info mt-3"> <%# Added margin-top %>
             <% if (typeof searchTerm !== 'undefined' && searchTerm) { %>
                 No products found matching your search "<%= searchTerm %>". <a href="/" class="alert-link">Check back soon!</a>
             <% } else if (typeof selectedCategory !== 'undefined' && selectedCategory) { %>
                 No products found in the category "<%= selectedCategory %>". <a href="/" class="alert-link">Check back soon!</a>
             <% } else { %>
                 No products are currently available. Check back soon!
             <% } %>
         </p>
    <% } %>

</div>

<%- include('../partials/footer') %>

views/seller/dashboard.ejs :
<%- include('../partials/header', { title: 'Seller Dashboard' }) %>

<div class="admin-dashboard-container"> <%# Re-use admin style container %>
    <h1>Seller Dashboard</h1>
    <p class="text-muted mb-3">Manage your products and orders.</p>

    <div class="admin-actions-grid"> <%# Re-use admin style grid %>
         <a href="/seller/products/upload" class="admin-action-card">
            <i class="fas fa-upload text-primary"></i> <%# Added color class %>
            <h3>Upload Product</h3>
            <p>Add a new product to your listings.</p>
        </a>
         <a href="/seller/products" class="admin-action-card">
            <i class="fas fa-edit text-success"></i> <%# Added color class %>
            <h3>Manage Products</h3>
            <p>View status, edit, or remove your products.</p>
         </a>
        <a href="/seller/orders" class="admin-action-card">
             <i class="fas fa-clipboard-list text-info"></i> <%# Added color class %>
             <h3>Manage Orders</h3>
             <p>View and manage orders containing your products.</p>
        </a>

        <%# The "My Profile" card linking to /user/profile has been removed %>

    </div>
</div>

<%- include('../partials/footer') %>

views/seller/edit-product.ejs :
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container"> <%# Reuse admin style %>
    <h1><%= title %></h1>
    <p class="text-muted small mb-3">Updating the product will reset its status to 'pending' and trigger a new review.</p>

     <form action="/seller/products/update/<%= product._id %>" method="POST" class="form-submit-spinner">
         <div class="alert alert-<%= product.reviewStatus === 'approved' ? 'success' : (product.reviewStatus === 'rejected' ? 'danger' : 'warning') %>" role="alert">
           <strong>Current Status:</strong> <span class="text-capitalize"><%= product.reviewStatus %></span>
           <% if(product.reviewStatus === 'rejected' && product.rejectionReason) { %>
            <br><strong>Rejection Reason:</strong> <%= product.rejectionReason %>
           <% } %>
         </div>

        <div class="form-group">
             <label for="name">Product Name:</label>
             <%# Added Placeholder %>
            <input type="text" id="name" name="name" class="form-control" value="<%= product.name %>" placeholder="Enter product name" required>
         </div>
        <div class="form-group">
            <label for="shortDescription">Short Description (Optional):</label>
            <%# Added Placeholder %>
            <textarea id="shortDescription" name="shortDescription" class="form-control" rows="2" placeholder="Briefly describe the product (max 200 chars)"><%= product.shortDescription || '' %></textarea>
        </div>
        <div class="form-group">
            <label for="category">Category:</label>
            <select id="category" name="category" class="form-control" required>
                <option value="" disabled <%= !product.category ? 'selected' : '' %>>Select a Category</option>
                <% if (typeof categories !== 'undefined') { %>
                    <% categories.forEach(cat => { %>
                        <option value="<%= cat.name %>" <%= (product.category === cat.name) ? 'selected' : '' %>><%= cat.name %></option>
                    <% }) %>
                <% } %>
            </select>
        </div>
         <div class="form-group">
            <label for="price">Price (₹):</label>
            <%# Added Placeholder %>
            <input type="number" id="price" name="price" class="form-control" step="0.01" min="0" value="<%= product.price %>" placeholder="e.g., 499.99" required>
         </div>
        <div class="form-group">
             <label for="stock">Stock Quantity:</label>
             <%# Added Placeholder %>
             <input type="number" id="stock" name="stock" class="form-control" min="0" value="<%= product.stock %>" placeholder="e.g., 50" required>
        </div>
         <div class="form-group">
             <label for="imageUrl">Image URL (Primary):</label>
             <%# Added Placeholder %>
             <input type="url" id="imageUrl" name="imageUrl" class="form-control" value="<%= product.imageUrl %>" placeholder="https://example.com/main-image.jpg" required>
             <% if(product.imageUrl) { %>
                <img src="<%= product.imageUrl %>" alt="Current Image" style="max-width: 100px; margin-top: 5px; border: 1px solid #ddd; padding: 2px;">
             <% } %>
         </div>
         <!-- --- UPDATED: Add Second Image URL Input --- -->
         <div class="form-group">
             <label for="imageUrl2">Second Image URL (Optional):</label>
             <%# Added Placeholder %>
             <input type="url"
                    id="imageUrl2"
                    name="imageUrl2"
                    class="form-control"
                    placeholder="https://example.com/alternate-image.jpg"
                    value="<%= (typeof product !== 'undefined' && product.imageUrl2) ? product.imageUrl2 : '' %>">
              <%# Preview for edit forms %>
              <% if (typeof product !== 'undefined' && product.imageUrl2) { %>
                 <img src="<%= product.imageUrl2 %>" alt="Current Second Image" style="max-width: 100px; margin-top: 5px; border:1px solid #ccc; padding:2px;">
              <% } %>
         </div>
         <!-- --- END UPDATED --- -->
         <div class="form-group">
             <label for="specifications">Specifications (Optional):</label>
             <%# Added Placeholder %>
             <textarea id="specifications" name="specifications" class="form-control" rows="5" placeholder="Enter product details, features, dimensions, etc. (one per line recommended)"><%= product.specifications %></textarea>
        </div>
         <button type="submit" class="btn btn-primary">Update & Resubmit for Review</button>
         <a href="/seller/products" class="btn btn-secondary">Cancel</a>
    </form>
 </div>

 <%- include('../partials/footer') %>

views/seller/manage-orders.ejs :
<%# views/seller/manage-orders.ejs %>
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container order-manage-page">
    <h1>Manage Your Orders</h1>
    <p class="text-muted small mb-3">Showing orders that contain one or more of your products.</p>

    <%# --- ADD FILTER INPUT --- %>
    <div class="form-group mb-3">
        <label for="order-filter-input" class="visually-hidden">Filter Orders:</label>
        <%# Added Placeholder %>
        <input type="text" id="order-filter-input" class="form-control" placeholder="Type to filter orders (ID, Name, Email, Product, Status...)" aria-label="Filter Orders">
    </div>
    <%# --- END FILTER INPUT --- %>


    <% if (message) { %>
        <p class="alert alert-info"><%= message %></p>
    <% } %>

    <% if (orders.length > 0) { %>
        <div class="table-container">
            <table class="data-table order-table" id="seller-order-table"> <%# Added ID %>
                <thead>
                    <tr>
                        <th>Order ID / Date</th>
                        <th>Customer / Address</th>
                        <th>Items (Your items highlighted)</th>
                        <th>Total</th>
                        <th>Status</th>
                        <th class="actions-cell">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% orders.forEach(order => { %>
                         <%# Added class="order-row" %>
                        <tr class="status-<%= order.status.toLowerCase().replace(/ /g, '-') %> order-row" data-order-id="<%= order._id %>">
                            <td data-label="Order ID / Date">
                                <%= order._id %><br>
                                <small class="text-muted"><%= formatDateIST(order.orderDate) %></small>
                            </td>
                            <td data-label="Customer / Address">
                                <strong><%= order.shippingAddress.name %></strong><br>
                                <small class="text-muted"><%= order.userEmail || order.userId?.email %></small><br>
                                <small class="text-muted"><%= order.shippingAddress.cityVillage %>, <%= order.shippingAddress.pincode %></small><br>
                                <small><strong>Ph:</strong> <%= order.shippingAddress.phone %></small>
                            </td>
                            <td data-label="Items">
                                <div class="order-items-summary">
                                    <%- order.itemsSummary %>
                                </div>
                                <% if (order.products && order.products.length > 0) { %>
                                    <div class="order-items-images">
                                        <% order.products.forEach(item => { %>
                                            <% if (item.productId && item.productId._id && item.productId.imageUrl) { %>
                                                <a href="/products/<%= item.productId._id %>" target="_blank" title="View <%= item.productId.name || 'Product' %>">
                                                    <img src="<%= item.productId.imageUrl %>"
                                                         alt="<%= item.productId.name || 'Product Image' %>"
                                                         class="order-item-thumbnail" loading="lazy">
                                                </a>
                                            <% } else if (item.productId && item.productId._id) { %>
                                                <a href="/products/<%= item.productId._id %>" target="_blank" class="order-item-thumbnail-placeholder" title="View <%= item.productId.name || 'Product' %>">[No Img]</a>
                                            <% } else { %>
                                                <span class="order-item-thumbnail-placeholder" title="Product data missing">[N/A]</span>
                                            <% } %>
                                        <% }) %>
                                    </div>
                                <% } %>
                            </td>
                            <td data-label="Total" class="order-total"><strong>₹<%= order.totalAmount.toFixed(2) %></strong></td>
                            <td data-label="Status" class="order-status-cell">
                                <span class="status-badge status-<%= order.status.toLowerCase().replace(/ /g, '-') %>"><%= order.status %></span>
                                <% if(order.status === 'Cancelled' && order.cancellationReason) { %>
                                    <br><small class="text-danger mt-1 d-block">Reason:<br><%= order.cancellationReason %></small>
                                <% } %>
                                <% if(order.status === 'Delivered' && order.receivedByDate) { %><br><small class="text-success mt-1 d-block">Delivered:<br><%= formatDateIST(order.receivedByDate) %></small><% } %>
                                <% if (order.showDeliveryOtp && order.status === 'Pending') { %>
                                  <div class="delivery-otp-display mt-1">
                                    <p>Customer OTP Sent</p>
                                    <small class="text-muted">Ask customer for code: <strong class="delivery-otp-code">****<%= order.orderOTP ? order.orderOTP.slice(-2) : 'XX' %></strong></small>
                                  </div>
                                <% } %>
                            </td>
                            <td data-label="Actions" class="actions-cell">
                                <%# Seller Direct Delivery Confirmation %>
                                <% if (order.canBeDirectlyDeliveredBySeller) { %>
                                    <div class="action-group mb-2">
                                        <p class="action-group-title">Confirm Delivery:</p>
                                        <% if (!order.showDeliveryOtp) { %>
                                            <form action="/seller/orders/<%= order._id %>/send-otp" method="POST" class="inline-form form-submit-spinner mb-1">
                                                <button type="submit" class="btn btn-warning btn-sm w-100 w-md-auto" title="Send OTP to customer to confirm delivery">
                                                    <i class="fas fa-mobile-alt"></i> Send OTP
                                                </button>
                                            </form>
                                        <% } %>
                                        <form action="/seller/orders/<%= order._id %>/confirm-delivery" method="POST" class="inline-form verify-otp-form form-submit-spinner">
                                             <%# Added Placeholder %>
                                            <input type="text" name="otp" placeholder="Enter OTP" required pattern="\d{6}" maxlength="6" inputmode="numeric" title="Enter 6-digit OTP from customer">
                                            <button type="submit" class="btn btn-success btn-sm" title="Confirm delivery using customer's OTP">
                                                <i class="fas fa-check-double"></i> Confirm
                                            </button>
                                        </form>
                                    </div>
                                <% } %>

                                <%# Seller Order Cancellation Form %>
                                <% if (order.canBeCancelledBySeller) { %>
                                    <div class="action-group">
                                        <form action="/seller/orders/<%= order._id %>/cancel" method="POST" class="cancel-delivery-form form-submit-spinner" onsubmit="return confirm('SELLER ACTION: Are you sure you want to cancel your items in order <%= order._id %>? This action cannot be undone.');">
                                            <label for="reason-<%= order._id %>" class="action-group-title">Cancel Your Items:</label>
                                            <select name="reason" id="reason-<%= order._id %>" required class="form-control form-control-sm d-block mb-1">
                                                <option value="" disabled selected>Select Seller Reason...</option>
                                                <% if (typeof sellerCancellationReasons !== 'undefined' && sellerCancellationReasons.length > 0) { %>
                                                    <% sellerCancellationReasons.forEach(reason => { %>
                                                        <option value="<%= reason %>"><%= reason %></option>
                                                    <% }) %>
                                                <% } else { %>
                                                    <option value="Other Reason (Seller)" selected>Other Reason (Seller)</option> <%# Fallback %>
                                                <% } %>
                                            </select>
                                            <button type="submit" class="btn btn-danger btn-sm w-100 w-md-auto"><i class="fas fa-ban"></i> Cancel Items</button>
                                        </form>
                                    </div>
                                <% } %>

                                <%# Fallback for no actions %>
                                <% if (!order.canBeDirectlyDeliveredBySeller && !order.canBeCancelledBySeller) { %>
                                     <small class="text-muted no-actions-text">
                                         <% if (order.status === 'Delivered') { %>Completed<% } else if (order.status === 'Cancelled') { %>Cancelled<% } else { %>No actions available<% } %>
                                    </small>
                                <% } %>
                            </td>
                        </tr>
                    <% }) %>
                    <%# --- ADD NO RESULTS ROW --- %>
                    <tr id="no-seller-orders-found" class="hidden">
                        <td colspan="6" class="text-center text-muted p-3">No orders match your filter.</td>
                    </tr>
                    <%# --- END NO RESULTS ROW --- %>
                </tbody>
            </table>
        </div>
    <% } else if (!message) { %>
        <p class="alert alert-info">No orders containing your products found.</p>
    <% } %>
</div>

<%- include('../partials/footer') %>

views/seller/manage-products.ejs :
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container"> <%# Reuse admin style %>
    <h1>Manage Your Products</h1>
    <a href="/seller/products/upload" class="btn btn-primary mb-3"><i class="fas fa-plus"></i> Upload New Product</a>

    <%# --- ADD FILTER INPUT --- %>
    <div class="form-group mb-3"> <%# Added mb-3 for spacing %>
        <label for="seller-product-filter-input" class="visually-hidden">Filter Your Products:</label>
        <%# Added Placeholder %>
        <input type="text" id="seller-product-filter-input" class="form-control" placeholder="Type to filter your products (Name, Category, Status...)" aria-label="Filter Your Products">
    </div>
    <%# --- END FILTER INPUT --- %>

   <% if (products.length > 0) { %>
       <div class="table-container card">
           <%# --- Added ID to table --- %>
           <table class="data-table" id="seller-product-table">
               <thead>
                   <tr>
                       <th>Image</th>
                       <th>Name</th>
                       <th>Price</th>
                       <th>Stock</th>
                       <th>Status</th>
                       <th>Reason</th>
                       <th class="actions-cell" style="text-align: right;">Actions</th>
                   </tr>
                </thead>
                <tbody>
                   <% products.forEach(product => { %>
                       <%# --- Added class="product-row" --- %>
                       <tr class="status-<%= product.reviewStatus %> product-row" data-product-id="<%= product._id %>">
                           <td data-label="Image"><a href="/products/<%= product._id %>"><img src="<%= product.imageUrl %>" alt="<%= product.name %>" class="table-img"></a></td>
                            <td data-label="Name"><%= product.name %><br><small class="text-muted"><%= product.category %></small></td>
                            <td data-label="Price">₹<%= product.price.toFixed(2) %></td>
                            <td data-label="Stock"><%= product.stock %></td>
                            <td data-label="Status">
                                <span class="status-badge status-<%= product.reviewStatus %> text-capitalize">
                                    <%= product.reviewStatus %>
                                </span>
                            </td>
                             <td data-label="Reason">
                                <% if(product.reviewStatus === 'rejected' && product.rejectionReason) { %>
                                    <small class="text-danger"><%= product.rejectionReason %></small>
                                <% } else { %>
                                    <span class="text-muted">--</span>
                                <% } %>
                            </td>
                            <td data-label="Actions" class="actions-cell">
                               <%# Edit button always available, triggers re-review %>
                               <a href="/seller/products/edit/<%= product._id %>" class="btn btn-text btn-sm" title="Edit Product"><i class="fas fa-edit"></i> Edit</a>

                               <form action="/seller/products/remove/<%= product._id %>" method="POST" class="inline-form form-submit-spinner" onsubmit="return confirm('Are you sure you want to permanently remove this product: <%= product.name %>?');">
                                    <button type="submit" class="btn btn-text btn-danger btn-sm" title="Remove Product"><i class="fas fa-trash"></i> Remove</button>
                               </form>
                           </td>
                        </tr>
                    <% }) %>
                     <%# --- ADD NO RESULTS ROW --- %>
                     <tr id="no-seller-products-found" class="hidden">
                         <td colspan="7" class="text-center text-muted p-3">No products match your filter.</td> <%# Adjusted colspan %>
                     </tr>
                     <%# --- END NO RESULTS ROW --- %>
               </tbody>
            </table>
       </div>
   <% } else { %>
        <p class="text-muted mt-3">You haven't uploaded any products yet. <a href="/seller/products/upload">Upload your first product!</a></p>
   <% } %>
</div>

<%- include('../partials/footer') %>

views/seller/upload-product.ejs :
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container"> <%# Reuse admin style %>
    <h1>Upload New Product</h1>
    <p class="text-muted small mb-3">Your product will be submitted for automatic review upon upload.</p>

    <form action="/seller/products/upload" method="POST" class="form-submit-spinner">
        <div class="form-group">
            <label for="name">Product Name:</label>
            <%# Added Placeholder %>
            <input type="text" id="name" name="name" class="form-control" value="<%= typeof product !== 'undefined' ? product.name : '' %>" placeholder="Enter product name" required>
        </div>
        <div class="form-group">
            <label for="shortDescription">Short Description (Optional):</label>
            <%# Added Placeholder %>
            <textarea id="shortDescription" name="shortDescription" class="form-control" rows="2" placeholder="Briefly describe the product (max 200 chars)"><%= typeof product !== 'undefined' ? product.shortDescription : '' %></textarea>
        </div>
        <div class="form-group">
            <label for="category">Category:</label>
            <select id="category" name="category" class="form-control" required>
                 <option value="" disabled <%= !(typeof product !== 'undefined' && product.category) ? 'selected' : '' %>>Select a Category</option>
                <% if (typeof categories !== 'undefined') { %>
                    <% categories.forEach(cat => { %>
                        <option value="<%= cat.name %>" <%= (typeof product !== 'undefined' && product.category === cat.name) ? 'selected' : '' %>><%= cat.name %></option>
                    <% }) %>
                <% } %>
            </select>
        </div>
        <div class="form-group">
            <label for="price">Price (₹):</label>
            <%# Added Placeholder %>
            <input type="number" id="price" name="price" class="form-control" step="0.01" min="0" value="<%= typeof product !== 'undefined' ? product.price : '' %>" placeholder="e.g., 499.99" required>
        </div>
        <div class="form-group">
            <label for="stock">Stock Quantity:</label>
            <%# Added Placeholder %>
            <input type="number" id="stock" name="stock" class="form-control" min="0" value="<%= typeof product !== 'undefined' ? product.stock : '' %>" placeholder="e.g., 50" required>
        </div>
        <div class="form-group">
            <label for="imageUrl">Image URL (Primary):</label>
            <%# Added Placeholder %>
            <input type="url" id="imageUrl" name="imageUrl" class="form-control" placeholder="https://example.com/main-image.jpg" value="<%= typeof product !== 'undefined' ? product.imageUrl : '' %>" required>
        </div>
        <!-- --- UPDATED: Add Second Image URL Input --- -->
        <div class="form-group">
            <label for="imageUrl2">Second Image URL (Optional):</label>
             <%# Added Placeholder %>
            <input type="url"
                   id="imageUrl2"
                   name="imageUrl2"
                   class="form-control"
                   placeholder="https://example.com/alternate-image.jpg"
                   value="<%= (typeof product !== 'undefined' && product.imageUrl2) ? product.imageUrl2 : '' %>">
        </div>
        <!-- --- END UPDATED --- -->
        <div class="form-group">
            <label for="specifications">Specifications (Optional):</label>
            <%# Added Placeholder %>
            <textarea id="specifications" name="specifications" class="form-control" rows="5" placeholder="Enter product details, features, dimensions, etc. (one per line recommended)"><%= typeof product !== 'undefined' ? product.specifications : '' %></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Upload & Submit for Review</button>
        <a href="/seller/dashboard" class="btn btn-secondary">Cancel</a>
    </form>
</div>

<%- include('../partials/footer') %>

views/user/cart.ejs :
<%# views/user/cart.ejs %>
<%- include('../partials/header', { title: 'Shopping Cart' }) %>

<div class="cart-container">
    <h1>Your Shopping Cart</h1>

    <% if (cart.length > 0) { %>
        <div class="cart-items">
            <% cart.forEach(item => { %>
                <div class="cart-item" data-product-id="<%= item.productId %>">
                    <div class="cart-item-image">
                        <a href="/products/<%= item.productId %>"><img src="<%= item.imageUrl %>" alt="<%= item.name %>"></a>
                    </div>
                    <div class="cart-item-details">
                        <h3 class="cart-item-name"><%= item.name %></h3>
                        <p class="cart-item-price">₹<%= (typeof item.price === 'number' ? item.price : 0).toFixed(2) %></p>
                        <p class="cart-item-stock">Stock: <%= item.stock %></p>
                    </div>
                    <div class="cart-item-quantity">
                        <label for="quantity-<%= item.productId %>" class="visually-hidden">Quantity for <%= item.name %></label> <%# Added visually-hidden label %>
                        <input type="number"
                               id="quantity-<%= item.productId %>"
                               class="quantity-input" <%# Use class for consistency %>
                               name="quantity"
                               value="<%= item.quantity %>"
                               min="0"
                               max="<%= item.stock %>"
                               data-product-id="<%= item.productId %>"
                               data-item-price="<%= item.price %>"
                               aria-label="Quantity for <%= item.name %>">
                        <button class="btn btn-secondary btn-sm btn-update-qty" data-product-id="<%= item.productId %>">Add</button> <%# Spinner handled by AJAX logic %>
                     </div>
                     <div class="cart-item-subtotal">
                         Total: ₹<span class="item-subtotal-value"><%= (typeof item.subtotal === 'number' ? item.subtotal : 0).toFixed(2) %></span>
                    </div>
                    <div class="cart-item-remove">
                        <form action="/user/cart/remove/<%= item.productId %>" method="POST" class="form-submit-spinner">
                            <button type="submit" class="btn btn-danger btn-sm">× Remove</button>
                         </form>
                     </div>
                </div>
            <% }) %>
        </div>

         <div class="cart-summary">
             <h2>Cart Total: ₹<span id="cart-total-value"><%= (typeof cartTotal === 'number' ? cartTotal : 0).toFixed(2) %></span></h2>
             <%# --- ADDED ID and loading state attributes --- %>
             <a href="/user/checkout"
                id="btn-proceed-checkout" <%# ADDED ID %>
                class="btn btn-success btn-checkout"
                data-loading-text="<i class='fas fa-spinner fa-spin'></i> Proceeding..." <%# ADDED loading text data attribute %>
                >Proceed to Checkout</a>
        </div>

    <% } else { %>
        <%# Updated empty cart message to use alert style %>
        <p class="alert alert-info mt-3">Your cart is empty. <a href="/" class="alert-link">Continue Shopping</a></p>
    <% } %>
</div>

 <%- include('../partials/footer') %>

views/user/checkout.ejs :
<%# views/user/checkout.ejs %>
<%- include('../partials/header', { title: 'Checkout' }) %>

<%# --- ADD RAZORPAY CHECKOUT SCRIPT --- %>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<div class="checkout-container">
    <h1>Checkout</h1>

    <div class="checkout-grid">
        <div class="checkout-address">
            <h2>Shipping Address</h2>
            <%# Display Saved Address %>
            <div class="saved-address <%= (!userAddress || !userAddress.name) ? 'hidden' : '' %>">
                <% if (userAddress && userAddress.name) { %>
                    <p class="mb-1"><strong><%= userAddress.name %></strong></p>
                    <p class="mb-1"><%= userAddress.phone %></p>
                    <p class="mb-1">
                        <%= userAddress.cityVillage ? userAddress.cityVillage + ', ' : '' %>
                        <%= userAddress.landmarkNearby ? userAddress.landmarkNearby + ', ' : '' %>
                        <%= userAddress.locality ? userAddress.locality + ', ' : '' %>
                        <%= userAddress.mandal ? userAddress.mandal + ', ' : '' %>
                        <%= userAddress.district ? userAddress.district + ', ' : '' %>
                        <%= userAddress.state ? userAddress.state + ' - ' : '' %>
                        <%= userAddress.pincode %>
                    </p>
                    <button type="button" id="edit-address-btn" class="btn btn-secondary btn-sm mt-2">Edit Address</button>
                <% } else { %>
                    <p class="text-muted">No address found. Please add one below.</p>
                <% } %>
            </div>

            <%# Address Form %>
            <form action="/user/address/save" method="POST" id="address-form" class="address-form <%= (userAddress && userAddress.name) ? 'hidden' : '' %> form-submit-spinner">
                 <h3 class="h5"><%= (userAddress && userAddress.name) ? 'Edit Address' : 'Add Shipping Address' %></h3>
                 <input type="hidden" name="source" value="checkout">
                 <div class="form-group">
                     <label for="checkout-name-addr" class="form-label small">Full Name:</label>
                     <input type="text" id="checkout-name-addr" name="name" class="form-control" value="<%= addressFormData?.name || userAddress?.name || '' %>" placeholder="Enter full name" required autocomplete="name">
                 </div>
                 <div class="form-group">
                     <label for="checkout-phone" class="form-label small">Phone Number:</label>
                     <input type="tel" id="checkout-phone" name="phone" class="form-control" value="<%= addressFormData?.phone || userAddress?.phone || '' %>" placeholder="10-digit mobile number" required pattern="\d{10,15}" minlength="10" maxlength="15" title="Enter 10 to 15 digit phone number" autocomplete="tel">
                 </div>
                 <div class="form-group">
                    <label for="checkout-pincode" class="form-label small">Pincode:</label>
                    <input type="text" id="checkout-pincode" name="pincode" class="form-control pincode-input" data-target-prefix="checkout" value="<%= addressFormData?.pincode || userAddress?.pincode || '' %>" placeholder="6-digit Pincode" required pattern="\d{6}" maxlength="6" inputmode="numeric" title="Enter 6-digit Pincode" autocomplete="postal-code">
                    <small class="pincode-status text-muted"></small>
                </div>
                <div class="form-group">
                    <label for="checkout-locality" class="form-label small">Locality / Post Office:</label>
                    <select id="checkout-locality" name="locality" class="form-control" required disabled data-saved-value="<%= addressFormData?.locality || userAddress?.locality || '' %>">
                        <option value="" selected disabled>Enter Pincode First</option>
                    </select>
                    <small class="locality-status text-muted"></small>
                </div>
                <div class="auto-filled-fields-container mb-2" id="checkout-auto-filled-fields" style="<%= (addressFormData?.state || userAddress?.state) ? 'display: block;' : 'display: none;' %>">
                    <div class="form-group">
                       <label for="checkout-mandal" class="form-label small">Mandal / Taluk:</label>
                       <input type="text" id="checkout-mandal" class="form-control auto-filled-field" value="<%= addressFormData?.mandal || userAddress?.mandal || '' %>" readonly tabindex="-1">
                   </div>
                    <div class="form-group">
                       <label for="checkout-district" class="form-label small">District:</label>
                       <input type="text" id="checkout-district" class="form-control auto-filled-field" value="<%= addressFormData?.district || userAddress?.district || '' %>" readonly tabindex="-1">
                   </div>
                   <div class="form-group">
                       <label for="checkout-state" class="form-label small">State:</label>
                       <input type="text" id="checkout-state" class="form-control auto-filled-field" value="<%= addressFormData?.state || userAddress?.state || '' %>" readonly tabindex="-1">
                   </div>
                </div>
                <input type="hidden" id="checkout-mandal-hidden" name="mandal" value="<%= addressFormData?.mandal || userAddress?.mandal || '' %>">
                <input type="hidden" id="checkout-district-hidden" name="district" value="<%= addressFormData?.district || userAddress?.district || '' %>">
                <input type="hidden" id="checkout-state-hidden" name="state" value="<%= addressFormData?.state || userAddress?.state || '' %>">
                <div class="form-group">
                    <label for="checkout-cityVillage" class="form-label small">House No. / Building / Area:</label>
                    <input type="text" id="checkout-cityVillage" name="cityVillage" class="form-control" value="<%= addressFormData?.cityVillage || userAddress?.cityVillage || '' %>" required autocomplete="address-line1" placeholder="E.g., #123, Green Apartments">
                </div>
                 <div class="form-group">
                    <label for="checkout-landmarkNearby" class="form-label small">Landmark (Optional):</label>
                    <input type="text" id="checkout-landmarkNearby" name="landmarkNearby" class="form-control" value="<%= addressFormData?.landmarkNearby || userAddress?.landmarkNearby || '' %>" autocomplete="address-line2" placeholder="E.g., Near City Hospital">
                 </div>
                <button type="submit" class="btn btn-primary me-2">Save Address</button>
                 <button type="button" id="cancel-edit-btn" class="btn btn-secondary <%= (!userAddress || !userAddress.name) ? 'hidden' : '' %>">Cancel Edit</button>
             </form>
        </div>

         <div class="checkout-summary">
             <h2>Order Summary</h2>
             <div class="checkout-items">
                 <% items.forEach(item => { %>
                    <div class="checkout-item">
                         <a href="/products/<%= item.productId %>" class="checkout-item-image">
                            <img src="<%= item.imageUrl %>" alt="<%= item.name %>">
                        </a>
                        <div class="checkout-item-info">
                             <%= item.name %> (Qty: <%= item.quantity %>)
                        </div>
                        <div class="checkout-item-price">₹<%= item.itemTotal.toFixed(2) %></div>
                     </div>
                <% }) %>
            </div>
            <hr>
            <div class="checkout-totals">
                <p>Subtotal: <span>₹<%= subTotal.toFixed(2) %></span></p>
                 <p>Shipping: <span>FREE</span></p>
                <hr>
                 <p><strong>Total: <span id="checkout-total-amount-display">₹<%= totalAmount.toFixed(2) %></span></strong></p> 
            </div>

            <div class="checkout-payment">
                <h3>Payment Method</h3>
                 <div class="payment-option"> 
                     <input type="radio" id="cod_payment" name="paymentMethod" value="COD" checked>
                     <label for="cod_payment"><i class="fas fa-money-bill-wave"></i> Cash on Delivery (COD)</label>
                 </div>
                 <% if (RAZORPAY_KEY_ID) { %> 
                 <div class="payment-option">
                    <input type="radio" id="razorpay_payment" name="paymentMethod" value="Razorpay">
                    <label for="razorpay_payment"><i class="fas fa-credit-card"></i> Online Payment (UPI, Cards, etc.)</label>
                </div>
                <% } else { %>
                    <p class="text-muted small mt-2">Online payment is currently unavailable.</p>
                <% } %>
            </div>
            
            <button type="button" id="btn-place-order" class="btn btn-success btn-block btn-place-order mt-3 form-submit-spinner"
                <%= (!userAddress || !userAddress.name) && !addressFormData ? 'disabled' : '' %>
                data-loading-text="<i class='fas fa-spinner fa-spin'></i> Processing..."
            >
                Place Order
            </button>
            <p id="place-order-error" class="text-danger small mt-1 hidden"></p>

            <% if ((!userAddress || !userAddress.name) && !addressFormData) { %>
                <p class="text-danger small mt-1">Please add/save your shipping address first.</p>
            <% } %>
         </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const placeOrderBtn = document.getElementById('btn-place-order');
    const placeOrderErrorP = document.getElementById('place-order-error');
    const originalButtonHtml = placeOrderBtn ? placeOrderBtn.innerHTML : 'Place Order';
    const loadingButtonHtml = placeOrderBtn ? placeOrderBtn.dataset.loadingText : '<i class="fas fa-spinner fa-spin"></i> Processing...';

    if (placeOrderBtn) {
        placeOrderBtn.addEventListener('click', async () => {
            const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
            if (!selectedPaymentMethod) {
                placeOrderErrorP.textContent = 'Please select a payment method.';
                placeOrderErrorP.classList.remove('hidden');
                return;
            }
            placeOrderErrorP.classList.add('hidden');
            placeOrderBtn.disabled = true;
            placeOrderBtn.innerHTML = loadingButtonHtml;

            if (selectedPaymentMethod.value === 'COD') {
                const codForm = document.createElement('form');
                codForm.method = 'POST';
                codForm.action = '/orders/place-cod'; 
                document.body.appendChild(codForm);
                codForm.submit();
            } else if (selectedPaymentMethod.value === 'Razorpay') {
                let internalOrderIdForRzp; // To store internal order ID for use in failure/dismissal
                try {
                    const response = await fetch('/orders/create-razorpay-order', { method: 'POST' });
                    const data = await response.json();

                    if (!response.ok || !data.success) {
                        throw new Error(data.message || `Failed to initiate payment (Status: ${response.status})`);
                    }
                    
                    internalOrderIdForRzp = data.orderId; // Store for later use

                    const options = {
                        key: data.keyId,
                        amount: data.amount, 
                        currency: data.currency,
                        name: "miniapp", 
                        description: `Order #${data.orderId}`,
                        order_id: data.razorpayOrderId,
                        handler: async function (razorpayResponse) {
                            placeOrderBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Verifying...';
                            try {
                                const verifyResponse = await fetch('/orders/verify-razorpay-payment', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        razorpay_payment_id: razorpayResponse.razorpay_payment_id,
                                        razorpay_order_id: razorpayResponse.razorpay_order_id,
                                        razorpay_signature: razorpayResponse.razorpay_signature,
                                        internal_order_id: data.orderId 
                                    })
                                });
                                const verifyData = await verifyResponse.json();
                                if (verifyResponse.ok && verifyData.success) {
                                    window.location.href = `/orders/my-orders?payment=success&order_id=${verifyData.orderId || data.orderId}`;
                                } else {
                                    throw new Error(verifyData.message || "Payment verification failed.");
                                }
                            } catch (verifyError) {
                                console.error("Razorpay verification error:", verifyError);
                                placeOrderErrorP.textContent = `Payment verification failed: ${verifyError.message}. Please contact support.`;
                                placeOrderErrorP.classList.remove('hidden');
                                placeOrderBtn.disabled = false;
                                placeOrderBtn.innerHTML = originalButtonHtml;
                            }
                        },
                        prefill: {
                            name: data.userName,
                            email: data.userEmail,
                            contact: data.userPhone
                        },
                        notes: {
                            internal_order_id: data.orderId // For easier reference in Razorpay dashboard
                        },
                        theme: {
                            color: "#007bff" 
                        },
                        modal: {
                            ondismiss: function(){
                                console.log('Checkout form closed by user for order:', internalOrderIdForRzp);
                                placeOrderErrorP.textContent = 'Payment cancelled. You can try again or select COD.';
                                placeOrderErrorP.classList.remove('hidden');
                                placeOrderBtn.disabled = false;
                                placeOrderBtn.innerHTML = originalButtonHtml;
                                // No backend call on dismiss here, order remains 'PaymentPending'
                                // User can attempt to cancel it from "My Orders" or admin can clean it up.
                            }
                        }
                    };
                    const rzp1 = new Razorpay(options);
                    rzp1.on('payment.failed', async function (response){ // Made async
                        console.error("Razorpay payment failed on client:", response.error);
                        let readableError = `Payment Failed.`;
                        if (response.error.description) readableError += ` ${response.error.description}`;
                        if (response.error.reason) readableError += ` (Reason: ${response.error.reason})`;

                        placeOrderErrorP.textContent = readableError;
                        placeOrderErrorP.classList.remove('hidden');
                        
                        // Update internal order to PaymentFailed via backend
                        if (internalOrderIdForRzp) {
                            try {
                                const failResponse = await fetch(`/orders/payment-failed/${internalOrderIdForRzp}`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.error?.metadata?.payment_id,
                                        razorpay_order_id: response.error?.metadata?.order_id,
                                        reason: `Client-side failure: ${response.error.description || response.error.reason || 'Unknown'}`
                                    })
                                });
                                const failData = await failResponse.json();
                                if (failResponse.ok && failData.success) {
                                    console.log(`Order ${internalOrderIdForRzp} marked as PaymentFailed via backend.`);
                                } else {
                                    console.error("Failed to mark order as PaymentFailed via backend:", failData.message);
                                }
                            } catch (backendFailError) {
                                console.error("Error calling backend to mark PaymentFailed:", backendFailError);
                            }
                        }

                        placeOrderBtn.disabled = false;
                        placeOrderBtn.innerHTML = originalButtonHtml;
                    });
                    rzp1.open();

                } catch (error) {
                    console.error("Razorpay order creation error:", error);
                    placeOrderErrorP.textContent = `Error: ${error.message}. Please try COD or contact support.`;
                    placeOrderErrorP.classList.remove('hidden');
                    placeOrderBtn.disabled = false;
                    placeOrderBtn.innerHTML = originalButtonHtml;
                }
            }
        });
    }

    // Handle address form validation enabling/disabling place order button
    const addressForm = document.getElementById('address-form');
    if (addressForm) {
        const inputs = addressForm.querySelectorAll('input[required], select[required]');
        const checkFormValidityAndToggleButton = () => {
            if (placeOrderBtn) {
                const isFormVisible = !addressForm.classList.contains('hidden');
                const isSavedAddressVisible = document.querySelector('.saved-address:not(.hidden)') !== null;
                let allValid = true;
                if (isFormVisible) {
                     inputs.forEach(input => { if (!input.value.trim()) allValid = false; });
                }
                // Enable if saved address is visible OR form is visible and valid.
                // Disable if form is visible and not valid.
                if (isSavedAddressVisible) {
                    placeOrderBtn.disabled = false;
                } else if (isFormVisible && allValid) {
                     placeOrderBtn.disabled = false;
                } else if (isFormVisible && !allValid) {
                    placeOrderBtn.disabled = true;
                }
                // If neither saved address nor form is visible (initial state with no address)
                // it might be already disabled by EJS - this primarily handles dynamic changes.
            }
        };

        inputs.forEach(input => {
            input.addEventListener('input', checkFormValidityAndToggleButton);
            input.addEventListener('change', checkFormValidityAndToggleButton); // For select
        });

        // Check on initial load (after JS fills pincode potentially)
        // Ensure this check runs *after* any potential auto-population of address from pincode
        const pincodeInput = document.getElementById('checkout-pincode');
        const localitySelect = document.getElementById('checkout-locality');

        const observer = new MutationObserver((mutationsList, obs) => {
            for(const mutation of mutationsList) {
                if (mutation.type === 'childList' || mutation.type === 'attributes') {
                    // Specifically check if locality has a value after population or form fields change
                    if (localitySelect && localitySelect.value !== "") {
                         checkFormValidityAndToggleButton();
                    }
                }
            }
        });
        if(pincodeInput) observer.observe(pincodeInput.closest('.checkout-address'), { childList: true, subtree: true, attributes: true });


        // Trigger initial check if address form is initially visible & filled by server
        if (!addressForm.classList.contains('hidden') && document.getElementById('checkout-name-addr').value) {
            checkFormValidityAndToggleButton();
        } else if (document.querySelector('.saved-address:not(.hidden)')) { // If saved address visible
             if(placeOrderBtn) placeOrderBtn.disabled = false;
        }
    }
});
</script>

<%- include('../partials/footer') %>

views/user/my-orders.ejs :
<%# views/user/my-orders.ejs %>
<%- include('../partials/header', { title: 'My Orders' }) %>

<div class="my-orders-container">
    <h1>My Orders</h1>

    <%# --- MODIFIED: Use local variables 'paymentStatus' and 'processedOrderId' --- %>
    <% if (typeof paymentStatus !== 'undefined' && paymentStatus === 'success' && typeof processedOrderId !== 'undefined' && processedOrderId) { %>
      <div class="alert alert-success" role="alert">
        Payment successful! Your order #<%= processedOrderId %> has been placed.
      </div>
    <% } %>
    <%# --- END MODIFICATION --- %>


    <% if (orders.length > 0) { %>
        <div class="order-list">
            <% orders.forEach(order => { %>
                <div class="order-card status-<%= order.status.toLowerCase().replace(/ /g, '-') %> mb-3">
                     <div class="order-header">
                         <div><strong>Order ID:</strong><br><%= order._id %></div>
                         <div><strong>Placed on:</strong><br><%= formatDateIST(order.orderDate) %></div>
                         <div><strong>Total:</strong><br>₹<%= order.totalAmount.toFixed(2) %></div>
                         <div><strong>Status:</strong><br><span class="status-badge status-<%= order.status.toLowerCase().replace(/ /g, '-') %>"><%= order.status %></span></div>
                     </div>
                    <div class="order-body">
                         <p class="mb-1"><strong>Items:</strong></p>
                         <div class="order-items-list mb-2">
                            <% order.products.forEach((item, index) => { %>
                                <small><%= item.name || '[Product Name Missing]' %> (Qty: <%= item.quantity %>) <% if(index < order.products.length - 1) { %> | <% } %></small>
                            <% }) %>
                         </div>
                         <div class="order-items-images mt-2">
                            <% order.products.forEach(item => { %>
                                <% if (item.productId && item.productId._id && item.imageUrl) { %>
                                    <a href="/products/<%= item.productId._id %>" title="View <%= item.name || 'Product' %>">
                                        <img src="<%= item.imageUrl %>" alt="<%= item.name || 'Product Image' %>" class="order-item-thumbnail">
                                    </a>
                                <% } else if (item.productId && item.productId._id) { %>
                                    <a href="/products/<%= item.productId._id %>" class="order-item-thumbnail-placeholder" title="View <%= item.name || 'Product' %>">[No Img]</a>
                                <% } else { %>
                                    <span class="order-item-thumbnail-placeholder">[Item NA]</span>
                                <% } %>
                            <% }) %>
                         </div>
                        <div class="order-details mt-3">
                             <p class="mb-1"><strong>Shipping To:</strong> <%= order.shippingAddress.name %>, <%= order.shippingAddress.cityVillage %>, Pin: <%= order.shippingAddress.pincode %></p>
                             <% if (order.status === 'Delivered' && order.receivedByDate) { %>
                                <p class="text-success mb-1"><small><strong>Delivered On:</strong> <%= formatDateIST(order.receivedByDate) %></small></p>
                              <% } %>
                              <% if (order.status === 'Cancelled' && order.cancellationReason) { %>
                                <p class="text-danger mb-1"><small><strong>Reason:</strong> <%= order.cancellationReason %></small></p>
                              <% } %>
                              <% if (order.showDeliveryOtp) { %>
                                <div class="delivery-otp-display mt-2 p-2 border rounded bg-light">
                                    <p class="mb-1">
                                        <strong>Delivery OTP:</strong>
                                        <strong class="delivery-otp-code ms-1"><%= order.orderOTP %></strong>
                                    </p>
                                    <small class="text-muted d-block">Provide this code to the delivery person (Seller/Admin).</small>
                                    <% if (order.orderOTPExpires) { %>
                                        <small class="text-muted d-block">Expires: <%= formatDateIST(order.orderOTPExpires) %></small>
                                    <% } %>
                                </div>
                              <% } %>
                              <% if (order.status === 'PaymentFailed') { %>
                                 <p class="text-danger mb-1"><small><strong>Payment failed. Please try again or contact support.</strong></small></p>
                              <% } %>
                              <% if (order.status === 'PaymentPending') { %>
                                 <p class="text-warning mb-1"><small><strong>Awaiting payment confirmation. If you have already paid, please wait a few minutes. You can also <a href="/user/checkout" class="alert-link">try placing the order again.</a></strong></small></p>
                              <% } %>
                         </div>
                    </div>
                     <div class="order-actions text-end p-2 border-top">
                        <% if (order.isCancellable) { %>
                            <form action="/orders/cancel/<%= order._id %>" method="POST" onsubmit="return confirm('Are you sure you want to cancel this order?');" class="form-submit-spinner d-inline-block">
                                <button type="submit" class="btn btn-danger btn-sm">Cancel Order</button>
                             </form>
                         <% } else if (order.status === 'Pending' && !order.showDeliveryOtp && order.cancellationAllowedUntil && new Date(order.cancellationAllowedUntil).getTime() < Date.now()) { %>
                             <small class="text-muted">Cancellation window closed.</small>
                         <% } else if (order.status === 'Pending' && !order.showDeliveryOtp) { %>
                            <small class="text-muted">Processing...</small>
                        <% } else if (order.status === 'Pending' && order.showDeliveryOtp) { %>
                             <small class="text-info">Awaiting delivery confirmation...</small>
                         <% } else if (order.status === 'Delivered') { %>
                              <small class="text-success">Order Completed.</small>
                         <% } else if (order.status === 'Cancelled') { %>
                              <small class="text-danger">Order Cancelled.</small>
                         <% } else if (order.status === 'PaymentFailed' || order.status === 'PaymentPending') { %>
                            <%# No specific action text here as cancel is handled by isCancellable %>
                         <% } %>
                     </div>
                </div>
            <% }) %>
        </div>
    <% } else { %>
        <p>You haven't placed any orders yet. <a href="/">Start Shopping!</a></p>
    <% } %>
</div>

<%- include('../partials/footer') %>

views/user/profile.ejs :
<%# views/user/profile.ejs %>
<%- include('../partials/header', { title: title }) %>

<div class="profile-container">
    <%# --- Combine Welcome and Name Edit --- %>
    <div class="profile-header mb-4 d-flex align-items-center justify-content-center flex-wrap">
        <h1 class="mb-0 me-3">My Profile</h1>
        <div class="d-flex align-items-center">
            <span id="saved-name-display" class="fs-5 me-2">Hi, <strong id="display-user-name"><%= user.name %></strong></span>
            <button type="button" id="edit-name-btn" class="btn btn-text btn-sm" title="Edit Name"><i class="fas fa-edit"></i></button>
            <form action="/user/profile/update-name" method="POST" id="name-form" class="hidden inline-form align-items-center ms-2 form-submit-spinner">
                <label for="name-input" class="visually-hidden">New Name:</label>
                 <%# Added Placeholder %>
                <input type="text" id="name-input" name="name" class="form-control form-control-sm me-2" value="<%= user.name %>" required minlength="2" placeholder="Enter new name">
                <button type="submit" class="btn btn-primary btn-sm me-1">Save</button>
                <button type="button" id="cancel-edit-name-btn" class="btn btn-secondary btn-sm">Cancel</button>
            </form>
        </div>
    </div>
    <p class="text-muted text-center small mb-3">Email: <strong><%= user.email %></strong></p>

    <%# --- My Orders Section --- %>
    <div class="profile-section orders-section mb-4">
        <h2>My Orders</h2>
        <div class="d-flex flex-wrap gap-2">
            <a href="/orders/my-orders" class="btn btn-secondary">
                <i class="fas fa-box"></i> View My Orders
            </a>
        </div>
    </div>

    <%# --- Conditional Dashboards Section --- %>
    <div class="profile-section dashboards-section mb-4">
        <h2>Dashboards</h2>
        <div class="d-flex flex-wrap gap-2">
            <% if (user.role === 'admin') { %>
                <a href="/admin/dashboard" class="btn btn-info"><i class="fas fa-user-shield"></i> Admin Dashboard</a>
            <% } %>
            <% if (user.role === 'seller') { %>
                <a href="/seller/dashboard" class="btn btn-success"><i class="fas fa-store"></i> Seller Dashboard</a>
            <% } %>
            <% if (user.role === 'user') { %>
                <p class="mb-0 align-self-center">Standard User Account</p>
            <% } %>
        </div>
    </div>

    <%# --- Address Management Section --- %>
    <div class="profile-section address-section mb-4">
        <h2>My Address</h2>
        <%# Display Saved Address %>
        <div id="saved-address-display" class="<%= (!user.address || !user.address.name) ? 'hidden' : '' %>">
            <% if (user.address && user.address.name) { %>
                <p class="mb-1"><strong><%= user.address.name %></strong></p>
                <p class="mb-1"><%= user.address.phone %></p>
                <p class="mb-1">
                    <%# Display House/Area first %>
                    <%= user.address.cityVillage ? user.address.cityVillage + ', ' : '' %>
                    <%# Landmark Optional %>
                    <%= user.address.landmarkNearby ? user.address.landmarkNearby + ', ' : '' %>
                    <%# Locality %>
                    <%= user.address.locality ? user.address.locality + ', ' : '' %>
                    <%# Derived Fields %>
                    <%= user.address.mandal ? user.address.mandal + ', ' : '' %>
                    <%= user.address.district ? user.address.district + ', ' : '' %>
                    <%= user.address.state ? user.address.state + ' - ' : '' %>
                    <%= user.address.pincode %>
                </p>
                <button type="button" id="edit-address-btn" class="btn btn-outline-secondary btn-sm mt-2">Edit Address</button>
            <% } else { %>
                <p class="text-muted">No address saved yet.</p>
                <button type="button" id="add-address-btn" class="btn btn-outline-primary btn-sm mt-2 hidden">Add Address</button>
            <% } %>
        </div>

        <%# Address Form %>
        <form action="/user/address/save" method="POST" id="address-form" class="address-form <%= (user.address && user.address.name) ? 'hidden' : '' %> form-submit-spinner mt-3">
            <h3 class="h5"><%= (user.address && user.address.name) ? 'Edit Address' : 'Add Address' %></h3>
            <input type="hidden" name="source" value="profile">

            <div class="form-group">
                <label for="profile-name-addr" class="form-label small">Full Name:</label>
                <%# Added Placeholder %>
                <input type="text" id="profile-name-addr" name="name" class="form-control" value="<%= addressFormData?.name || user.address?.name || '' %>" placeholder="Enter full name" required autocomplete="name">
            </div>
            <div class="form-group">
                <label for="profile-phone" class="form-label small">Phone Number:</label>
                 <%# Added Placeholder %>
                <input type="tel" id="profile-phone" name="phone" class="form-control" value="<%= addressFormData?.phone || user.address?.phone || '' %>" placeholder="10-digit mobile number" required pattern="\d{10,15}" minlength="10" maxlength="15" title="Enter 10 to 15 digit phone number" autocomplete="tel">
            </div>
            <div class="form-group">
                <label for="profile-pincode" class="form-label small">Pincode:</label>
                 <%# Added Placeholder %>
                <input type="text"
                       id="profile-pincode"
                       name="pincode"
                       class="form-control pincode-input"
                       data-target-prefix="profile"
                       value="<%= addressFormData?.pincode || user.address?.pincode || '' %>"
                       placeholder="6-digit Pincode" required pattern="\d{6}" maxlength="6" inputmode="numeric"
                       title="Enter 6-digit Pincode" autocomplete="postal-code">
                <small class="pincode-status text-muted"></small>
            </div>

            <%# --- Locality Dropdown --- %>
            <div class="form-group">
                <label for="profile-locality" class="form-label small">Locality / Post Office:</label>
                <select id="profile-locality"
                        name="locality"
                        class="form-control"
                        required
                        disabled
                        data-saved-value="<%= addressFormData?.locality || user.address?.locality || '' %>">
                    <option value="" selected disabled>Enter Pincode First</option>
                    <%# Options will be populated by JavaScript %>
                </select>
                <small class="locality-status text-muted"></small>
            </div>
            <%# --- End: Locality Dropdown --- %>

            <%# Auto-filled Fields Container %>
            <div class="auto-filled-fields-container mb-2" id="profile-auto-filled-fields"
                 style="<%= (addressFormData?.state || user.address?.state) ? 'display: block;' : 'display: none;' %>">
                <div class="form-group">
                    <label for="profile-mandal" class="form-label small">Mandal / Taluk:</label>
                    <input type="text" id="profile-mandal" class="form-control auto-filled-field" value="<%= addressFormData?.mandal || user.address?.mandal || '' %>" readonly tabindex="-1">
                </div>
                <div class="form-group">
                    <label for="profile-district" class="form-label small">District:</label>
                    <input type="text" id="profile-district" class="form-control auto-filled-field" value="<%= addressFormData?.district || user.address?.district || '' %>" readonly tabindex="-1">
                </div>
                <div class="form-group">
                    <label for="profile-state" class="form-label small">State:</label>
                    <input type="text" id="profile-state" class="form-control auto-filled-field" value="<%= addressFormData?.state || user.address?.state || '' %>" readonly tabindex="-1">
                </div>
            </div>

            <%# Hidden Inputs to Submit Derived Data %>
            <input type="hidden" id="profile-mandal-hidden" name="mandal" value="<%= addressFormData?.mandal || user.address?.mandal || '' %>">
            <input type="hidden" id="profile-district-hidden" name="district" value="<%= addressFormData?.district || user.address?.district || '' %>">
            <input type="hidden" id="profile-state-hidden" name="state" value="<%= addressFormData?.state || user.address?.state || '' %>">

            <div class="form-group">
                <label for="profile-cityVillage" class="form-label small">House No. / Building / Area:</label>
                 <%# Added Placeholder %>
                <input type="text" id="profile-cityVillage" name="cityVillage" class="form-control" value="<%= addressFormData?.cityVillage || user.address?.cityVillage || '' %>" required autocomplete="address-line1" placeholder="E.g., #123, Green Apartments">
            </div>
            <div class="form-group">
                <label for="profile-landmarkNearby" class="form-label small">Landmark (Optional):</label>
                 <%# Added Placeholder %>
                <input type="text" id="profile-landmarkNearby" name="landmarkNearby" class="form-control" value="<%= addressFormData?.landmarkNearby || user.address?.landmarkNearby || '' %>" autocomplete="address-line2" placeholder="E.g., Near City Hospital">
            </div>
            <button type="submit" class="btn btn-primary me-2">Save Address</button>
            <button type="button" id="cancel-edit-btn" class="btn btn-secondary <%= (!user.address || !user.address.name) ? 'hidden' : '' %>">Cancel Edit</button>
        </form>
    </div>

    <%# --- Logout Section --- %>
    <div class="profile-section logout-section mt-4 pt-3 border-top">
        <h2>Account Actions</h2>
        <form action="/auth/logout" method="POST" class="form-submit-spinner">
            <button type="submit" class="btn btn-danger"><i class="fas fa-sign-out-alt"></i> Logout</button>
        </form>
    </div>

</div>
<%- include('../partials/footer') %>

