config/database.js:
// config/categories.js

// ** IMPORTANT: Replace these placeholder URLs with your actual external image URLs **
const categories = [
    { name: "Electronics", iconUrl: "https://cdn.iconscout.com/icon/premium/png-512-thumb/electronics-industry-4494765-3725864.png?f=webp&w=512" },
    { name: "Food", iconUrl: "https://cdn-icons-png.flaticon.com/128/737/737967.png" },
    { name: "Home & Kitchen", iconUrl: "https://cdn.iconscout.com/icon/free/png-512/free-kitchen-icon-download-in-svg-png-gif-file-formats--appliances-stove-digital-electric-cooking-online-store-pack-miscellaneous-icons-288069.png?f=webp&w=512" },
    { name: "Books", iconUrl: "https://cdn.iconscout.com/icon/premium/png-512-thumb/books-3166435-2641511.png?f=webp&w=512" },
    { name: "Sports & Outdoors", iconUrl: "https://cdn.iconscout.com/icon/premium/png-512-thumb/sports-3552379-2971891.png?f=webp&w=512" },
    { name: "Toys & Games", iconUrl: "https://cdn.iconscout.com/icon/premium/png-512-thumb/games-3407099-2833026.png?f=webp&w=512" },
    { name: "Grocery", iconUrl: "https://cdn.iconscout.com/icon/premium/png-512-thumb/grocery-9471761-7699268.png?f=webp&w=512" },
    { name: "Health & Beauty", iconUrl: "https://cdn.iconscout.com/icon/free/png-512/free-beauty-icon-download-in-svg-png-gif-file-formats--care-cosmetics-makeup-and-pack-icons-804.png?f=webp&w=512" },
    // Add or modify categories as needed
  ];
  
  // Also export just the names for validation purposes
  const categoryNames = categories.map(cat => cat.name);
  
  module.exports = categories;
  module.exports.categoryNames = categoryNames; // Export names separately

config/database.js:
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGO_URI);
    console.log(`MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error(`Error connecting to MongoDB: ${error.message}`);
    process.exit(1);
  }
};

module.exports = connectDB;


config/gemini.js:
// config/gemini.js
const { GoogleGenerativeAI } = require("@google/generative-ai");

// Access your API key as an environment variable
if (!process.env.GEMINI_API_KEY) {
    console.warn("GEMINI_API_KEY is not set in .env file. Gemini features will be disabled.");
}

const genAI = process.env.GEMINI_API_KEY ? new GoogleGenerativeAI(process.env.GEMINI_API_KEY) : null;

const textModel = genAI ? genAI.getGenerativeModel({ model: "gemini-2.0-flash"}) : null; // Use appropriate model

if (genAI && textModel) {
    console.log("Gemini AI SDK Initialized successfully.");
} else {
     console.log("Gemini AI SDK could not be initialized (API Key missing?).");
}

module.exports = { textModel }; // Export the model instance

config/mailer.js:
const nodemailer = require('nodemailer');

const transporter = nodemailer.createTransport({
  host: process.env.MAIL_HOST,
  port: parseInt(process.env.MAIL_PORT, 10),
  secure: parseInt(process.env.MAIL_PORT, 10) === 465,
  auth: {
    user: process.env.MAIL_USER,
    pass: process.env.MAIL_PASS,
  },
});

transporter.verify((error, success) => {
  if (error) {
    console.error('Error with Nodemailer transporter configuration:', error);
  } else {
    console.log('Nodemailer transporter is ready to send emails');
  }
});

const sendEmail = async (to, subject, text, html) => {
  try {
    await transporter.sendMail({
      from: process.env.MAIL_FROM,
      to: to,
      subject: subject,
      text: text,
      html: html,
    });
    console.log(`Email sent successfully to ${to}`);
    return true;
  } catch (error) {
    console.error(`Error sending email to ${to}:`, error);
    return false;
  }
};

module.exports = { sendEmail };


controllers/adminController.js:
// controllers/adminController.js
const Product = require('../models/Product');
const Order = require('../models/Order');
const User = require('../models/User');
const BannerConfig = require('../models/BannerConfig');
const { sendEmail } = require('../config/mailer');
// *** IMPORT NEW SERVICE ***
const { generateEmailHtml } = require('../services/emailTemplateService');
const { reviewProductWithGemini } = require('../services/geminiService');
const {
    generateAndSendDirectDeliveryOTPByAdmin,
    confirmDirectDeliveryByAdmin,
} = require('./orderController');
const mongoose = require('mongoose');
const categories = require('../config/categories');
const { categoryNames } = require('../config/categories');

const cancellationReasons = [
    "📞 Unable to contact the customer",
    "❗ Out of stock/unavailable item",
    "🗺️ Address incorrect/incomplete",
    "🚫 Customer requested cancellation",
    "❓ Other (Admin)",
];

exports.getAdminDashboard = (req, res) => {
    res.render('admin/dashboard', { title: 'Admin Dashboard' });
};

exports.getUploadProductPage = (req, res) => {
    res.render('admin/upload-product', {
        title: 'Admin: Upload New Product',
        product: {},
        categories: categories
    });
};

exports.uploadProduct = async (req, res, next) => {
    const { name, category, price, stock, imageUrl, imageUrl2, specifications, shortDescription } = req.body;
    const adminUserId = req.session.user._id;
    const adminUserEmail = req.session.user.email;

    if (!name || !category || price === undefined || stock === undefined || !imageUrl) {
        req.flash('error_msg', 'Please fill in all required fields (Name, Category, Price, Stock, Primary Image URL).');
        return res.render('admin/upload-product', { title: 'Admin: Upload New Product', product: req.body, categories: categories });
    }
    if (isNaN(Number(price)) || Number(price) < 0 || isNaN(Number(stock)) || Number(stock) < 0) {
        req.flash('error_msg', 'Price and Stock must be valid non-negative numbers.');
        return res.render('admin/upload-product', { title: 'Admin: Upload New Product', product: req.body, categories: categories });
    }
    if (!categoryNames.includes(category)) {
        req.flash('error_msg', 'Invalid category selected.');
        return res.render('admin/upload-product', { title: 'Admin: Upload New Product', product: req.body, categories: categories });
    }

    try {
        const newProduct = new Product({
            name: name.trim(),
            category: category.trim(),
            shortDescription: shortDescription ? shortDescription.trim() : undefined,
            price: Number(price),
            stock: Number(stock),
            imageUrl: imageUrl.trim(),
            imageUrl2: imageUrl2 ? imageUrl2.trim() : undefined,
            specifications: specifications ? specifications.trim() : '',
            sellerId: adminUserId,
            sellerEmail: adminUserEmail,
            reviewStatus: 'pending'
        });

        await newProduct.save();
        console.log(`Product ${newProduct._id} saved initially by ADMIN ${adminUserEmail}.`);

        reviewProductWithGemini(newProduct).then(async reviewResult => {
            try {
                const productToUpdate = await Product.findById(newProduct._id);
                if (productToUpdate) {
                    productToUpdate.reviewStatus = reviewResult.status;
                    productToUpdate.rejectionReason = reviewResult.reason;
                    await productToUpdate.save();
                    console.log(`Product ${newProduct._id} (Admin Upload) review status updated to ${reviewResult.status}.`);
                }
            } catch (updateError) {
                console.error(`Error updating product ${newProduct._id} (Admin Upload) after Gemini review:`, updateError);
            }
        }).catch(reviewError => {
            console.error(`Error in Gemini review promise chain for product ${newProduct._id} (Admin Upload):`, reviewError);
            Product.findByIdAndUpdate(newProduct._id, { reviewStatus: 'pending', rejectionReason: 'AI review process failed.' }).catch(err => console.error("Failed to mark admin-uploaded product as pending after review error:", err));
        });

        req.flash('success_msg', `Product "${newProduct.name}" uploaded and submitted for review.`);
        res.redirect('/admin/manage-products');

    } catch (error) {
        if (error.name === 'ValidationError') {
           let errors = Object.values(error.errors).map(el => el.message);
           req.flash('error_msg', `Validation Error: ${errors.join(' ')}`);
           return res.render('admin/upload-product', { title: 'Admin: Upload New Product', product: req.body, categories: categories });
       }
        console.error("Error uploading product by Admin:", error);
        next(error);
    }
};

exports.getManageProductsPage = async (req, res, next) => {
    try {
        const products = await Product.find({})
                                    .populate('sellerId', 'name email')
                                    .sort({ createdAt: -1 })
                                    .lean();
        res.render('admin/manage-products', {
            title: 'Manage All Products',
            products: products
        });
    } catch (error) {
        next(error);
    }
};

exports.getEditProductPage = async (req, res, next) => {
    try {
        const product = await Product.findById(req.params.id)
                                     .populate('sellerId', 'name email')
                                     .lean();
        if (!product) {
            req.flash('error_msg', 'Product not found.');
            return res.redirect('/admin/manage-products');
        }
        res.render('admin/edit-product', {
            title: `Admin Edit: ${product.name}`,
            product: product,
            isAdminView: true,
            categories: categories
        });
    } catch (error) {
        if (error.name === 'CastError') {
            req.flash('error_msg', 'Invalid product ID format.');
            return res.redirect('/admin/manage-products');
        }
        next(error);
    }
};

exports.updateProduct = async (req, res, next) => {
    const productId = req.params.id;
    const { name, category, price, stock, imageUrl, imageUrl2, specifications, shortDescription, reviewStatus, rejectionReason } = req.body;
    const renderOptions = { title: `Admin Edit Error`, product: { _id: productId, ...req.body }, isAdminView: true, categories: categories };

    if (!name || !category || price === undefined || stock === undefined || !imageUrl) {
        req.flash('error_msg', 'Please fill in all required fields.');
        return res.render('admin/edit-product', renderOptions);
    }
    if (isNaN(Number(price)) || Number(price) < 0 || isNaN(Number(stock)) || Number(stock) < 0) {
        req.flash('error_msg', 'Price and Stock must be valid non-negative numbers.');
         return res.render('admin/edit-product', renderOptions);
    }
    if (!categoryNames.includes(category)) {
        req.flash('error_msg', 'Invalid category selected.');
         return res.render('admin/edit-product', renderOptions);
    }
    const allowedStatus = ['pending', 'approved', 'rejected'];
    if (reviewStatus && !allowedStatus.includes(reviewStatus)) {
        req.flash('error_msg', 'Invalid review status selected.');
         return res.render('admin/edit-product', renderOptions);
    }
    if (reviewStatus === 'rejected' && !rejectionReason?.trim()) {
        req.flash('error_msg', 'Rejection reason is required when setting status to Rejected.');
        return res.render('admin/edit-product', renderOptions);
    }

    try {
        const product = await Product.findById(productId);
        if (!product) {
            req.flash('error_msg', 'Product not found.');
            return res.status(404).redirect('/admin/manage-products');
        }

        product.name = name.trim();
        product.category = category.trim();
        product.shortDescription = shortDescription ? shortDescription.trim() : undefined;
        product.price = Number(price);
        product.stock = Number(stock);
        product.imageUrl = imageUrl.trim();
        product.imageUrl2 = imageUrl2 ? imageUrl2.trim() : undefined;
        product.specifications = specifications ? specifications.trim() : '';

        if (reviewStatus && allowedStatus.includes(reviewStatus)) {
            product.reviewStatus = reviewStatus;
            product.rejectionReason = (reviewStatus === 'rejected') ? rejectionReason.trim() : undefined;
        }

        await product.save();
        req.flash('success_msg', `Product "${product.name}" updated successfully by admin.`);
        res.redirect('/admin/manage-products');

    } catch (error) {
        if (error.name === 'ValidationError') {
            let errors = Object.values(error.errors).map(el => el.message);
            req.flash('error_msg', `Validation Error: ${errors.join(' ')}`);
             try {
                 const originalProduct = await Product.findById(productId).lean();
                 renderOptions.product = { ...originalProduct, ...req.body };
             } catch (fetchErr) {
                 console.error("Error refetching product on update validation fail:", fetchErr);
             }
             return res.render('admin/edit-product', renderOptions);
        }
        if (error.name === 'CastError') {
            req.flash('error_msg', 'Invalid product ID format.');
            return res.status(400).redirect('/admin/manage-products');
        }
        console.error("Error updating product by Admin:", error);
        next(error);
    }
};

exports.removeProduct = async (req, res, next) => {
    const productId = req.params.id;
    try {
        const product = await Product.findByIdAndDelete(productId);
        if (!product) {
            req.flash('error_msg', 'Product not found.');
            return res.status(404).redirect('/admin/manage-products');
        }
        req.flash('success_msg', `Product "${product.name}" removed successfully by admin.`);
        res.redirect('/admin/manage-products');
    } catch (error) {
        if (error.name === 'CastError') {
            req.flash('error_msg', 'Invalid product ID format.');
            return res.status(400).redirect('/admin/manage-products');
        }
        console.error("Error removing product by Admin:", error);
        next(error);
    }
};

exports.getManageOrdersPage = async (req, res, next) => {
    try {
        const orders = await Order.find({})
                                   .sort({ orderDate: -1 })
                                   .select('-__v -products.__v -shippingAddress._id')
                                   .populate('products.productId', 'name imageUrl _id price sellerId')
                                   .populate('userId', 'name email')
                                   .lean();

        const now = Date.now();

        orders.forEach(order => {
            order.canBeCancelledByAdmin = order.status === 'Pending';
            order.canBeDirectlyDeliveredByAdmin = order.status === 'Pending';
            order.showDeliveryOtp = order.status === 'Pending' && !!order.orderOTP && !!order.orderOTPExpires && new Date(order.orderOTPExpires).getTime() > now;

            if (order.products && order.products.length > 0) {
                order.itemsSummary = order.products.map(p => {
                    const productName = p.productId?.name || p.name || '[Product Missing]';
                    const price = p.priceAtOrder ?? 0;
                    return `${productName} (Qty: ${p.quantity}) @ ₹${price.toFixed(2)}`;
                }).join('<br>');
            } else {
                order.itemsSummary = 'No items found';
            }
        });

        res.render('admin/manage-orders', {
            title: 'Manage All Orders',
            orders: orders,
            cancellationReasons: cancellationReasons
        });
    } catch (error) {
        next(error);
    }
};

exports.sendDirectDeliveryOtpByAdmin = async (req, res, next) => {
    const { orderId } = req.params;
    try {
        const result = await generateAndSendDirectDeliveryOTPByAdmin(orderId);
        req.flash('success_msg', result.message + ' Ask customer for OTP.');
    } catch (error) {
        req.flash('error_msg', `Admin OTP Send Failed: ${error.message}`);
    }
    res.redirect('/admin/manage-orders');
};

exports.confirmDirectDeliveryByAdmin = async (req, res, next) => {
    const { orderId } = req.params;
    const { otp } = req.body;
    const adminUserId = req.session.user._id;

    if (!otp || !/^\d{6}$/.test(otp.trim())) {
        req.flash('error_msg', 'Please enter the 6-digit OTP.');
        return res.redirect('/admin/manage-orders');
    }

    try {
        const { order } = await confirmDirectDeliveryByAdmin(orderId, adminUserId, otp.trim(), res);
        req.flash('success_msg', `Order ${orderId} confirmed delivered by Admin.`);
    } catch (error) {
        req.flash('error_msg', `Admin Delivery Confirm Failed: ${error.message}`);
    }
    res.redirect('/admin/manage-orders');
};

exports.cancelOrderByAdmin = async (req, res, next) => {
    const { orderId } = req.params;
    const { reason } = req.body;
    const adminUserId = req.session.user._id;

    if (!reason || !cancellationReasons.includes(reason)) {
        req.flash('error_msg', 'Please select a valid admin reason for cancellation.');
        return res.redirect('/admin/manage-orders');
    }

    const sessionDB = await mongoose.startSession();
    sessionDB.startTransaction();
    try {
        const order = await Order.findById(orderId)
                                .populate('products.productId', 'name _id')
                                // *** Populate user name for email ***
                                .populate('userId', 'email name')
                                .session(sessionDB);

        if (!order) {
            await sessionDB.abortTransaction(); sessionDB.endSession();
            req.flash('error_msg', 'Order not found.');
            return res.status(404).redirect('/admin/manage-orders');
        }
        if (order.status !== 'Pending') {
            await sessionDB.abortTransaction(); sessionDB.endSession();
            req.flash('error_msg', `Order status is '${order.status}'. Only 'Pending' orders can be cancelled.`);
            return res.redirect('/admin/manage-orders');
        }

        const productStockRestorePromises = order.products.map(item => {
            const quantityToRestore = Number(item.quantity);
            if (!item.productId?._id || isNaN(quantityToRestore) || quantityToRestore <= 0) {
                console.warn(`Admin Cancel: Invalid item P.ID ${item.productId?._id} or Qty ${item.quantity} in O.ID ${orderId}. Skipping restore.`);
                return Promise.resolve();
            }
            return Product.updateOne(
                { _id: item.productId._id },
                { $inc: { stock: quantityToRestore, orderCount: -1 } },
                { session: sessionDB }
            ).catch(err => {
               console.error(`Admin Cancel: Failed stock/count restore P.ID ${item.productId._id} O.ID ${orderId}: ${err.message}`);
            });
        });
        await Promise.allSettled(productStockRestorePromises);

        order.status = 'Cancelled';
        order.cancellationReason = reason; // Admin reason selected from dropdown
        await order.save({ session: sessionDB });

        await sessionDB.commitTransaction();

        // *** UPDATED: Send Email Notification using template ***
        try {
            const customerEmail = order.userEmail || order.userId?.email;
            // *** Use populated name or fallback ***
            const customerName = order.shippingAddress.name || order.userId?.name || 'Customer';
            if(customerEmail) {
                const subjectCust = `Update on Your miniapp Order #${order._id}`;
                const textCust = `Your order (${order._id}) has been cancelled by administration. Reason: ${order.cancellationReason}. Contact support for questions.`;
                const htmlCust = generateEmailHtml({
                    recipientName: customerName,
                    subject: subjectCust,
                    greeting: `Regarding Your Order #${order._id}`,
                    bodyLines: [
                        `We are writing to inform you that your order (#${order._id}) has been cancelled by our administration team.`,
                        `<strong>Reason for Cancellation:</strong> ${order.cancellationReason}`, // Use the admin reason
                        `If any payment was made, a refund will be processed shortly according to our policy.`,
                        `We apologize for any inconvenience this may cause. Please contact our support team if you have any questions.`
                    ],
                     buttonUrl: `${req.protocol}://${req.get('host')}/orders/my-orders`,
                     buttonText: 'View My Orders',
                     companyName: 'miniapp'
                });
                await sendEmail(customerEmail, subjectCust, textCust, htmlCust);
            }
        } catch (emailError) {
            console.error(`Failed sending cancellation email for order ${order._id}:`, emailError);
        }
        // *** END UPDATE ***

        req.flash('success_msg', `Order ${orderId} cancelled by admin. Reason: ${reason}.`);
        res.redirect('/admin/manage-orders');

    } catch (error) {
        await sessionDB.abortTransaction();
        console.error(`Error cancelling order ${orderId} by admin ${adminUserId}:`, error);
        req.flash('error_msg', 'Failed to cancel order due to an internal error.');
        res.redirect('/admin/manage-orders');
    } finally {
        if (sessionDB && sessionDB.endSession) {
             sessionDB.endSession();
        }
    }
};

exports.getManageUsersPage = async (req, res, next) => {
    try {
        const users = await User.find({ _id: { $ne: req.session.user._id } })
                                  .select('name email role createdAt isVerified address.phone')
                                  .sort({ createdAt: -1 })
                                  .lean();
        res.render('admin/manage-users', {
            title: 'Manage Registered Users',
            users: users
        });
    } catch (error) {
        next(error);
    }
};

exports.updateUserRole = async (req, res, next) => {
    const userId = req.params.id;
    const { role } = req.body;
    const allowedRoles = ['user', 'admin', 'seller'];

    if (!role || !allowedRoles.includes(role)) {
        req.flash('error_msg', 'Invalid role selected.');
        return res.status(400).redirect('/admin/manage-users');
    }
    if (userId === req.session.user._id.toString()) {
         req.flash('error_msg', 'You cannot change your own role.');
         return res.redirect('/admin/manage-users');
    }

    try {
        const user = await User.findById(userId);
        if (!user) {
            req.flash('error_msg', 'User not found.');
            return res.status(404).redirect('/admin/manage-users');
        }
        user.role = role;
        await user.save();
        req.flash('success_msg', `User ${user.email}'s role updated to ${role}.`);
        res.redirect('/admin/manage-users');

    } catch (error) {
        if (error.name === 'CastError') {
            req.flash('error_msg', 'Invalid user ID format.');
            return res.status(400).redirect('/admin/manage-users');
        }
        console.error(`Error updating role for user ${userId}:`, error);
        req.flash('error_msg', 'Error updating user role.');
        res.redirect('/admin/manage-users');
    }
};

exports.removeUser = async (req, res, next) => {
    const userId = req.params.id;

    if (userId === req.session.user._id.toString()) {
        req.flash('error_msg', 'You cannot remove yourself.');
        return res.redirect('/admin/manage-users');
    }

    try {
        const user = await User.findById(userId);
        if (!user) {
            req.flash('error_msg', 'User not found.');
            return res.status(404).redirect('/admin/manage-users');
        }

        if (user.role === 'admin') {
            const adminCount = await User.countDocuments({ role: 'admin' });
            if (adminCount <= 1) {
                req.flash('error_msg', 'Cannot remove the last admin account.');
                return res.redirect('/admin/manage-users');
            }
        }

        // Consider implications: Should deleting a user cascade to products/orders?
        // For now, just delete the user document.
        await User.deleteOne({ _id: userId });
        req.flash('success_msg', `User ${user.email} removed successfully.`);
        res.redirect('/admin/manage-users');

    } catch (error) {
        if (error.name === 'CastError') {
            req.flash('error_msg', 'Invalid user ID format.');
            return res.status(400).redirect('/admin/manage-users');
        }
        console.error(`Error removing user ${userId}:`, error);
        req.flash('error_msg', 'Error removing user.');
        res.redirect('/admin/manage-users');
    }
};

exports.getManageBannersPage = async (req, res, next) => {
    try {
        let bannerConfig = await BannerConfig.findOne({ configKey: 'mainBanners' }).lean();
        if (!bannerConfig) {
            bannerConfig = { configKey: 'mainBanners', banners: [] };
        }
        const displayBanners = Array.from({ length: 4 }).map((_, index) => {
             return bannerConfig.banners[index] || { imageUrl: '', linkUrl: '', title: '' };
         });
        res.render('admin/manage-banners', {
            title: 'Manage Homepage Banners',
            bannerConfig: { ...bannerConfig, banners: displayBanners }
        });
    } catch (error) {
        console.error("Error fetching banner configuration:", error);
        next(error);
    }
};

exports.updateBanners = async (req, res, next) => {
    const { imageUrl1, linkUrl1, title1, imageUrl2, linkUrl2, title2, imageUrl3, linkUrl3, title3, imageUrl4, linkUrl4, title4 } = req.body;
    const adminUserId = req.session.user._id;

    const urlPattern = /^https?:\/\/.+/;
    const bannerInputs = [
        { imageUrl: imageUrl1, linkUrl: linkUrl1, title: title1 },
        { imageUrl: imageUrl2, linkUrl: linkUrl2, title: title2 },
        { imageUrl: imageUrl3, linkUrl: linkUrl3, title: title3 },
        { imageUrl: imageUrl4, linkUrl: linkUrl4, title: title4 }
    ];

    const newBanners = [];
    let validationError = false;
    for (let i = 0; i < bannerInputs.length; i++) {
        const input = bannerInputs[i];
        const trimmedImageUrl = input.imageUrl?.trim();
        const trimmedLinkUrl = input.linkUrl?.trim();
        const trimmedTitle = input.title?.trim();

        if (trimmedImageUrl) {
            if (!urlPattern.test(trimmedImageUrl)) {
                req.flash('error_msg', `Banner ${i + 1}: Image URL format is invalid.`);
                validationError = true;
            }
            if (trimmedLinkUrl && !urlPattern.test(trimmedLinkUrl)) {
                 req.flash('error_msg', `Banner ${i + 1}: Link URL format is invalid.`);
                 validationError = true;
             }
             if (!validationError) {
                newBanners.push({
                     imageUrl: trimmedImageUrl,
                     linkUrl: trimmedLinkUrl || undefined,
                     title: trimmedTitle || undefined
                 });
             }
        } else if (trimmedLinkUrl || trimmedTitle) {
             // Ensure if Link or Title is provided, Image URL is also required
             req.flash('error_msg', `Banner ${i + 1}: Image URL is required if Link URL or Title is provided.`);
             validationError = true;
        }
    }

    if (validationError) {
         const displayBannersForError = Array.from({ length: 4 }).map((_, index) => bannerInputs[index]);
         return res.render('admin/manage-banners', {
             title: 'Manage Homepage Banners',
             bannerConfig: { banners: displayBannersForError }
         });
    }

    try {
        await BannerConfig.findOneAndUpdate(
            { configKey: 'mainBanners' },
            { banners: newBanners, lastUpdatedBy: adminUserId },
            { new: true, upsert: true, runValidators: true }
        );
        req.flash('success_msg', 'Homepage banners updated successfully.');
        res.redirect('/admin/manage-banners');
    } catch (error) {
        if (error.name === 'ValidationError') {
            let errors = Object.values(error.errors).map(el => el.message);
             req.flash('error_msg', `Validation Error: ${errors.join(', ')}`);
             const displayBannersForError = Array.from({ length: 4 }).map((_, index) => bannerInputs[index]);
             return res.render('admin/manage-banners', {
                  title: 'Manage Homepage Banners',
                 bannerConfig: { banners: displayBannersForError }
             });
         }
        console.error("Error updating banners:", error);
        req.flash('error_msg', 'Failed to update banners due to a server error.');
        res.redirect('/admin/manage-banners');
    }
};

controllers/authController.js:
// controllers/authController.js
const User = require('../models/User');
const Product = require('../models/Product');
const BannerConfig = require('../models/BannerConfig');
const bcrypt = require('bcryptjs');
const crypto = require('crypto');
const { generateOTP, setOTPExpiration } = require('../services/otpService');
const { sendEmail } = require('../config/mailer');
// *** IMPORT NEW SERVICE ***
const { generateEmailHtml } = require('../services/emailTemplateService');
const categories = require('../config/categories');
const { categoryNames } = require('../config/categories');

// --- Password Complexity Regex ---
const uppercaseRegex = /[A-Z]/;
const lowercaseRegex = /[a-z]/;
const numberRegex = /[0-9]/;
const specialCharRegex = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~`]/;
const minPasswordLength = 8;

const passwordFormatErrorMsg = "password doesn't match requested format";


exports.getLoginPage = (req, res) => {
    if (req.session.user) {
         return res.redirect('/');
    }
    res.render('auth/login', { title: 'Login' });
};

exports.getRegisterPage = (req, res) => {
    if (req.session.user) {
        return res.redirect('/');
   }
    res.render('auth/register', {
        title: 'Register',
        name: req.flash('form_name')[0] || '',
        email: req.flash('form_email')[0] || ''
    });
};

exports.getVerifyOtpPage = (req, res) => {
    const email = req.query.email;
    if (!email) {
        req.flash('error_msg', 'Email required for OTP verification.');
        return res.redirect('/auth/register');
    }
     if (req.session.user) {
        return res.redirect('/');
   }
    res.render('auth/verify-otp', { title: 'Verify Email', email });
};

exports.getForgotPasswordPage = (req, res) => {
     if (req.session.user) {
         return res.redirect('/');
    }
    res.render('auth/forgot-password', { title: 'Forgot Password' });
};

exports.getResetPasswordPage = async (req, res, next) => {
     if (req.session.user) {
         req.flash('info_msg', 'You are already logged in.');
         return res.redirect('/');
    }
    try {
        const user = await User.findOne({
            resetPasswordToken: req.params.token,
            resetPasswordExpires: { $gt: Date.now() },
        });

        if (!user) {
            req.flash('error_msg', 'Password reset token is invalid or has expired.');
            return res.redirect('/auth/forgot-password');
        }
        res.render('auth/reset-password', { title: 'Reset Password', token: req.params.token });
    } catch (error) {
        next(error);
    }
};

exports.registerUser = async (req, res, next) => {
     if (req.session.user) {
        return res.redirect('/');
    }
    const { name, email, password, confirmPassword } = req.body;

    let errors = [];
    if (!name || !email || !password || !confirmPassword) { errors.push('Please fill in all fields.'); }
    if (password !== confirmPassword) { errors.push('Passwords do not match.'); }
    if (email && !/^\S+@\S+\.\S+$/.test(email)) { errors.push('Please enter a valid email address.'); }

    let passwordComplexityFailed = false;
    if (password) {
        if (
            password.length < minPasswordLength ||
            !uppercaseRegex.test(password) ||
            !lowercaseRegex.test(password) ||
            !numberRegex.test(password) ||
            !specialCharRegex.test(password)
        ) {
            passwordComplexityFailed = true;
        }
    } else {
        // Caught by initial check
    }

    if (passwordComplexityFailed) {
        if (!errors.includes(passwordFormatErrorMsg)) {
             errors.push(passwordFormatErrorMsg);
        }
    }

    if (errors.length > 0) {
        req.flash('error_msg', errors.join(' '));
        req.flash('form_name', name);
        req.flash('form_email', email);
        return res.redirect('/auth/register');
    }

    try {
        const lowerCaseEmail = email.toLowerCase();
        let user = await User.findOne({ email: lowerCaseEmail });

        if (user && user.isVerified) {
            req.flash('error_msg', 'Email is already registered and verified. Please login.');
            return res.redirect('/auth/login');
        }

        const otp = generateOTP();
        const otpExpires = setOTPExpiration(10);

        if (user && !user.isVerified) {
            user.name = name;
            if (password) { user.password = password; }
            user.otp = otp;
            user.otpExpires = otpExpires;
            user.isVerified = false;
            await user.save({ validateBeforeSave: true });
            console.log(`Updating existing unverified user: ${user.email}`);
        } else {
            user = new User({ name, email: lowerCaseEmail, password, otp, otpExpires, isVerified: false });
            await user.save();
            console.log(`New user created: ${user.email}`);
        }

        // *** UPDATED: Send OTP Email using template ***
        const subject = 'Verify Your Email Address';
        const text = `Your verification OTP is: ${otp}. It will expire in 10 minutes. Welcome to miniapp!`; // Simple text version
        const html = generateEmailHtml({
            recipientName: user.name,
            subject: subject,
            greeting: `Welcome to miniapp, ${user.name}!`,
            bodyLines: [
                `Thank you for registering. Please use the following One-Time Password (OTP) to verify your email address:`,
                // Use inline styles for better compatibility
                `<strong style="font-size: 20px; display: block; text-align: center; margin: 15px 0; letter-spacing: 2px; background-color: #f0f0f0; padding: 5px 10px; border-radius: 4px;">${otp}</strong>`,
                `This OTP will expire in 10 minutes.`,
                `If you didn't request this, you can safely ignore this email.`
            ],
            companyName: 'miniapp' // Pass your app name
            // No button needed for OTP verification usually
        });
        const emailSent = await sendEmail(user.email, subject, text, html);
        // *** END UPDATE ***

        if (emailSent) {
            req.flash('success_msg', `An OTP has been sent to ${user.email}. Please check your inbox and verify.`);
            res.redirect(`/auth/verify-otp?email=${encodeURIComponent(user.email)}`);
        } else {
             if(!user.createdAt || (Date.now() - user.createdAt.getTime()) < 5000) {
                try {
                    await User.deleteOne({ _id: user._id, isVerified: false });
                    console.log(`Cleaned up unverified user ${user.email} due to failed email send.`);
                } catch (deleteError) { console.error(`Error cleaning up unverified user ${user.email}:`, deleteError); }
             }
            req.flash('error_msg', 'Could not send OTP email. Please try registering again or contact support.');
            res.redirect('/auth/register');
        }
    } catch (error) {
        if (error.code === 11000) {
            req.flash('error_msg', 'Email already exists. Please login or use a different email.');
             req.flash('form_name', name);
             req.flash('form_email', email);
            return res.redirect('/auth/register');
        }
        if (error.name === 'ValidationError') {
           let validationErrors = Object.values(error.errors).map(el => el.message);
            if (validationErrors.some(msg => msg.includes('Password must be at least'))) {
                 if (!errors.includes(passwordFormatErrorMsg)) {
                    errors.push(passwordFormatErrorMsg);
                 }
                 validationErrors = validationErrors.filter(msg => !msg.includes('Password must be at least'));
            }
            const finalErrors = [...new Set([...errors, ...validationErrors])];
            req.flash('error_msg', finalErrors.join(' '));
            req.flash('form_name', name);
            req.flash('form_email', email);
            return res.redirect('/auth/register');
       }
        console.error("Registration Error:", error);
        next(error);
    }
};


exports.verifyOtp = async (req, res, next) => {
    const { email, otp } = req.body;
     if (req.session.user) { return res.redirect('/'); }
    if (!email || !otp) {
        req.flash('error_msg', 'Email and OTP are required.');
         return res.redirect(`/auth/verify-otp?email=${encodeURIComponent(email || '')}`);
    }
    try {
        const lowerCaseEmail = email.toLowerCase();
        const user = await User.findOne({ email: lowerCaseEmail, otp: otp.trim(), otpExpires: { $gt: Date.now() }, }).select('+password');

        if (!user) {
            const existingUser = await User.findOne({ email: lowerCaseEmail });
            let errorMessage = 'Invalid or expired OTP. Please try again or resend.';
            if (existingUser && existingUser.isVerified) {
                 errorMessage = 'This account is already verified. Please login.';
                 req.flash('error_msg', errorMessage);
                 return res.redirect('/auth/login');
            } else if (!existingUser) {
                 errorMessage = 'Verification failed. Account not found. Please register again.';
                 req.flash('error_msg', errorMessage);
                 return res.redirect('/auth/register');
            }
             req.flash('error_msg', errorMessage);
            return res.redirect(`/auth/verify-otp?email=${encodeURIComponent(email)}`);
        }

         const isPasswordReset = user.resetPasswordToken && user.resetPasswordExpires && user.resetPasswordExpires > Date.now();
         user.isVerified = true;
         user.otp = undefined;
         user.otpExpires = undefined;

         if (isPasswordReset) {
             // Don't clear reset token here, clear it in resetPassword controller
             await user.save({ validateBeforeSave: false });
             req.flash('success_msg', 'OTP Verified. Please set your new password.');
             return res.redirect(`/auth/reset-password/${user.resetPasswordToken}`);
         }
         else {
            await user.save({ validateBeforeSave: false });
             req.session.regenerate(err => {
                if (err) {
                     console.error("Session regeneration error after OTP verify:", err);
                     req.flash('error_msg', 'Verification successful, but auto-login failed. Please login manually.');
                     return res.redirect('/auth/login');
                 }
                req.session.user = { _id: user._id, name: user.name, email: user.email, role: user.role, address: user.address, cart: user.cart || [] };
                req.session.save(err => {
                   if (err) {
                        console.error("Session save error after OTP verify login:", err);
                         req.flash('error_msg', 'Verification successful, but auto-login failed. Please login manually.');
                        return res.redirect('/auth/login');
                    }
                    req.flash('success_msg', 'Email verified successfully! You are now logged in.');
                    const returnTo = req.session.returnTo || '/';
                    delete req.session.returnTo;
                    res.redirect(returnTo);
                 });
             });
         }
    } catch (error) {
        next(error);
    }
};

exports.resendOtp = async (req, res, next) => {
    const { email } = req.body;
     if (req.session.user) { return res.redirect('/'); }
    if (!email) {
        req.flash('error_msg', 'Email is required to resend OTP.');
         return res.redirect(`/auth/verify-otp?email=${encodeURIComponent(req.query.email || '')}`);
    }
    try {
        const lowerCaseEmail = email.toLowerCase();
        const user = await User.findOne({ email: lowerCaseEmail });

        if (!user) {
            console.log(`Resend OTP attempt for non-existent email: ${lowerCaseEmail}`);
            req.flash('info_msg', 'If your email is registered, a new OTP will be sent. Please check your inbox.');
            return res.redirect(`/auth/verify-otp?email=${encodeURIComponent(email)}`);
        }

        const isForReset = user.resetPasswordToken && user.resetPasswordExpires && user.resetPasswordExpires > Date.now();

        if(user.isVerified && !isForReset) {
             req.flash('error_msg', 'This account is already verified. Please login.');
            return res.redirect('/auth/login');
        }

        const otp = generateOTP();
        const otpExpires = setOTPExpiration(10);
        user.otp = otp;
        user.otpExpires = otpExpires;
        await user.save({ validateBeforeSave: false });

        // *** UPDATED: Send OTP Email using template ***
        let subject, greeting, bodyLines;
        const textOtpLine = `Your OTP is: ${otp}. It will expire in 10 minutes.`;

        if (isForReset) {
            subject = 'Your New Password Reset OTP';
            greeting = `Password Reset Request`;
            bodyLines = [
                `Here is your new One-Time Password (OTP) for your password reset request:`,
                `<strong style="font-size: 20px; display: block; text-align: center; margin: 15px 0; letter-spacing: 2px; background-color: #f0f0f0; padding: 5px 10px; border-radius: 4px;">${otp}</strong>`,
                `This OTP will expire in 10 minutes.`,
                `If you didn't request a password reset, please ignore this email.`
            ];
        } else {
             subject = 'Your New Verification OTP';
             greeting = `Verify Your Email`;
             bodyLines = [
                 `Here is your new One-Time Password (OTP) to verify your email address:`,
                 `<strong style="font-size: 20px; display: block; text-align: center; margin: 15px 0; letter-spacing: 2px; background-color: #f0f0f0; padding: 5px 10px; border-radius: 4px;">${otp}</strong>`,
                 `This OTP will expire in 10 minutes.`,
                 `If you didn't request this, please ignore this email.`
             ];
        }

        const text = `${subject}\n${textOtpLine}\nIf you didn't request this, please ignore this email.`;
        const html = generateEmailHtml({
             recipientName: user.name,
             subject: subject,
             greeting: greeting,
             bodyLines: bodyLines,
             companyName: 'miniapp'
        });
        // *** END UPDATE ***

        const emailSent = await sendEmail(user.email, subject, text, html);
        const redirectUrl = `/auth/verify-otp?email=${encodeURIComponent(user.email)}${isForReset ? '&reason=reset' : ''}`;

        if (emailSent) {
            req.flash('success_msg', `A new OTP has been sent to ${user.email}. Please check your inbox.`);
        } else {
            console.error(`Failed to resend OTP email to ${user.email}`);
            req.flash('error_msg', 'Could not resend OTP email. Please try again later or contact support.');
        }
        res.redirect(redirectUrl);
    } catch (error) {
        next(error);
    }
};

exports.loginUser = async (req, res, next) => {
     if (req.session.user) { return res.redirect('/'); }
    const { email, password } = req.body;
    if (!email || !password) {
        req.flash('error_msg', 'Please provide both email and password.');
        return res.render('auth/login', { title: 'Login', email: email });
    }
    try {
        const lowerCaseEmail = email.toLowerCase();
        const user = await User.findOne({ email: lowerCaseEmail }).select('+password').populate('cart.productId', 'name price imageUrl');

        if (!user) {
            req.flash('error_msg', 'Invalid credentials. Please check your email and password.');
            return res.render('auth/login', { title: 'Login', email: email });
        }
         if (!user.isVerified) {
            req.flash('error_msg', 'Your email is not verified. Please check your inbox for the verification OTP or request a new one.');
            return res.redirect(`/auth/verify-otp?email=${encodeURIComponent(user.email)}`);
         }
        const isMatch = await user.matchPassword(password);
        if (!isMatch) {
            req.flash('error_msg', 'Invalid credentials. Please check your email and password.');
            return res.render('auth/login', { title: 'Login', email: email });
        }

         req.session.regenerate(err => {
            if (err) {
                 console.error("Session regeneration error during login:", err);
                 req.flash('error_msg', 'Login failed due to a session error. Please try again.');
                 return res.render('auth/login', { title: 'Login', email: email });
             }
            req.session.user = {
                _id: user._id, name: user.name, email: user.email, role: user.role,
                address: user.address ? user.address.toObject() : undefined,
                cart: user.cart ? user.cart.map(item => ({ productId: item.productId?._id, quantity: item.quantity })) : []
             };
             req.session.save(err => {
                 if (err) {
                     console.error("Session save error after login:", err);
                     req.flash('error_msg', 'Login successful, but session could not be saved. Please try again.');
                      return res.render('auth/login', { title: 'Login', email: email });
                 }
                 req.flash('success_msg', 'You are now logged in successfully.');
                 const returnTo = req.session.returnTo || '/';
                 delete req.session.returnTo;
                 res.redirect(returnTo);
            });
        });
    } catch (error) {
        next(error);
    }
};

exports.logoutUser = (req, res, next) => {
    const sessionUserEmail = req.session?.user?.email || 'User';

    req.flash('success_msg', 'You have been logged out successfully.');

    if (req.session) {
        req.session.user = null;
    }

    const cookieName = req.app.get('session cookie name') || 'connect.sid';
    res.clearCookie(cookieName);
    console.log(`${sessionUserEmail} - Cleared session cookie: ${cookieName}`);

    if (req.session) {
        req.session.destroy(err => {
            if (err) {
                console.error(`${sessionUserEmail} - Session destruction error (may be ignorable):`, err);
            } else {
                console.log(`${sessionUserEmail} - Session destroyed successfully in store.`);
            }
        });
    } else {
        console.log(`${sessionUserEmail} - No active session found to destroy.`);
    }
    return res.redirect('/auth/login');
};


exports.forgotPassword = async (req, res, next) => {
    const { email } = req.body;
    if (!email) {
        req.flash('error_msg', 'Please provide an email address.');
        return res.redirect('/auth/forgot-password');
    }
    try {
        const lowerCaseEmail = email.toLowerCase();
        const user = await User.findOne({ email: lowerCaseEmail });
        const genericMessage = 'If an account with that email exists and is verified, a password reset OTP will be sent. Please check your inbox.';
        req.flash('info_msg', genericMessage);

        if (!user || !user.isVerified) {
            console.log(`Password reset request for ${lowerCaseEmail}: User ${!user ? 'not found' : 'found but not verified'}. Sending generic response.`);
            return res.redirect('/auth/forgot-password');
        }

         const otp = generateOTP();
         const resetToken = crypto.randomBytes(20).toString('hex');
        const otpExpires = setOTPExpiration(10);
        const resetExpires = setOTPExpiration(60);

        user.otp = otp;
        user.otpExpires = otpExpires;
        user.resetPasswordToken = resetToken;
        user.resetPasswordExpires = resetExpires;
        await user.save({ validateBeforeSave: false });

        // *** UPDATED: Send Email using template ***
        const subject = 'Password Reset Request - Verify OTP';
        const text = `You requested a password reset. Your OTP is: ${otp}. It expires in 10 minutes. If you did not request this, ignore this email.`;
        const html = generateEmailHtml({
            recipientName: user.name,
            subject: subject,
            greeting: `Password Reset Request`,
            bodyLines: [
                 `We received a request to reset the password for your account associated with ${user.email}.`,
                 `Please use the following One-Time Password (OTP) to verify your identity:`,
                 `<strong style="font-size: 20px; display: block; text-align: center; margin: 15px 0; letter-spacing: 2px; background-color: #f0f0f0; padding: 5px 10px; border-radius: 4px;">${otp}</strong>`,
                 `This OTP is valid for 10 minutes.`,
                 `You will be prompted to enter this OTP on the verification page. After verification, you can set a new password.`,
                 `If you did not request a password reset, please ignore this email. Your password will remain unchanged.`
            ],
            companyName: 'miniapp'
            // No button needed here, user enters OTP on site
        });
        const emailSent = await sendEmail(user.email, subject, text, html);
        // *** END UPDATE ***

        if (emailSent) {
             console.log(`Password reset OTP sent to verified user: ${user.email}`);
             res.redirect(`/auth/verify-otp?email=${encodeURIComponent(user.email)}&reason=reset`);
        } else {
            console.error(`Failed to send password reset OTP email to ${user.email}`);
            res.redirect('/auth/forgot-password');
        }
    } catch (error) {
        console.error("Error in forgotPassword:", error);
        req.flash('error_msg', 'An error occurred while processing your request. Please try again later.');
        res.redirect('/auth/forgot-password');
    }
};

exports.resetPassword = async (req, res, next) => {
    const { password, confirmPassword } = req.body;
    const token = req.params.token;

    let errors = [];
    if (!password || !confirmPassword) { errors.push('Please enter and confirm your new password.'); }
    if (password !== confirmPassword) { errors.push('Passwords do not match.'); }

    let passwordComplexityFailed = false;
    if (password) {
        if (
            password.length < minPasswordLength ||
            !uppercaseRegex.test(password) ||
            !lowercaseRegex.test(password) ||
            !numberRegex.test(password) ||
            !specialCharRegex.test(password)
        ) {
            passwordComplexityFailed = true;
        }
    }

    if (passwordComplexityFailed) {
         if (!errors.includes(passwordFormatErrorMsg)) {
            errors.push(passwordFormatErrorMsg);
         }
    }

    if (errors.length > 0) {
         req.flash('error_msg', errors.join(' '));
         return res.redirect(`/auth/reset-password/${token}`);
    }

    try {
        const user = await User.findOne({
            resetPasswordToken: token,
            resetPasswordExpires: { $gt: Date.now() },
        }).select('+password');

        if (!user) {
            req.flash('error_msg', 'Password reset token is invalid or has expired. Please request a new reset link.');
            return res.redirect('/auth/forgot-password');
        }

        user.password = password;

        user.resetPasswordToken = undefined;
        user.resetPasswordExpires = undefined;
        user.otp = undefined;
        user.otpExpires = undefined;
        user.isVerified = true;

        await user.save();

        // Optional: Send password change confirmation email
        try {
             const subject = 'Your Password Has Been Changed';
             const text = `The password for your miniapp account associated with ${user.email} was successfully changed. If you did not make this change, please contact support immediately.`;
             const html = generateEmailHtml({
                 recipientName: user.name,
                 subject: subject,
                 greeting: 'Password Successfully Reset',
                 bodyLines: [
                     `This email confirms that the password for your miniapp account has been successfully changed.`,
                     `If you made this change, no further action is required.`,
                     `If you did not initiate this password reset, please contact our support team immediately.`
                 ],
                 companyName: 'miniapp',
                 // Optional button to login
                 buttonUrl: `${req.protocol}://${req.get('host')}/auth/login`,
                 buttonText: 'Login to Your Account'
             });
             await sendEmail(user.email, subject, text, html);
        } catch (emailError) {
             console.error("Error sending password change confirmation email:", emailError);
        }


        req.session.regenerate(err => {
             if (err) {
                console.error("Session regeneration error after password reset:", err);
                req.flash('success_msg', 'Password reset successful. Please log in with your new password.');
                return res.redirect('/auth/login');
             }
              req.session.user = {
                  _id: user._id, name: user.name, email: user.email, role: user.role,
                  address: user.address ? user.address.toObject() : undefined,
                  cart: []
              };
            req.session.save(err => {
                if(err) {
                    console.error("Session save error after password reset login:", err);
                     req.flash('success_msg', 'Password reset successful. Please log in with your new password.');
                    return res.redirect('/auth/login');
                 }
                 req.flash('success_msg', 'Password has been reset successfully. You are now logged in.');
                res.redirect('/');
             });
         });
    } catch (error) {
        if (error.name === 'ValidationError') {
           let validationErrors = Object.values(error.errors).map(el => el.message);
             if (validationErrors.some(msg => msg.includes('Password must be at least'))) {
                 if (!errors.includes(passwordFormatErrorMsg)) {
                    errors.push(passwordFormatErrorMsg);
                 }
                 validationErrors = validationErrors.filter(msg => !msg.includes('Password must be at least'));
            }
            const finalErrors = [...new Set([...errors, ...validationErrors])];
            req.flash('error_msg', finalErrors.join(' '));
            return res.redirect(`/auth/reset-password/${token}`);
       }
        console.error("Reset Password Error:", error);
        next(error);
    }
};


exports.getHomePage = async (req, res, next) => {
  try {
    const searchTerm = req.query.search || '';
    const categoryFilter = req.query.category || '';

    let query = {
        reviewStatus: 'approved',
        stock: { $gt: 0 }
    };

    if (searchTerm) {
         query.$text = { $search: searchTerm };
    }
    if (categoryFilter && categoryNames.includes(categoryFilter)) {
        query.category = categoryFilter;
    } else if (categoryFilter) {
        console.warn(`Invalid category filter attempted: ${categoryFilter}`);
    }

     const projection = searchTerm ? { score: { $meta: "textScore" } } : {};
     const sort = searchTerm ? { score: { $meta: "textScore" } } : { createdAt: -1 };

    const [products, bannerConfig] = await Promise.all([
        Product.find(query, projection).sort(sort).lean(),
        BannerConfig.findOne({ configKey: 'mainBanners' }).lean()
    ]);

    const banners = bannerConfig?.banners || [];
    const validBanners = banners.filter(banner => banner.imageUrl);

    let pageTitle = 'Home';
    if (searchTerm) {
        pageTitle = `Search Results for "${searchTerm}"`;
    } else if (categoryFilter && categoryNames.includes(categoryFilter)) {
        pageTitle = `Category: ${categoryFilter}`;
    }

    res.render('products/index', {
      title: pageTitle,
      products: products,
      searchTerm: searchTerm,
      selectedCategory: categoryFilter && categoryNames.includes(categoryFilter) ? categoryFilter : null,
      homepageBanners: validBanners,
      displayCategories: categories
    });
  } catch (error) {
    console.error("Error fetching products/banners/categories for home page:", error);
    next(error);
  }
};

controllers/orderController.js:
// controllers/orderController.js
const Order = require('../models/Order');
const User = require('../models/User');
const Product = require('../models/Product');
const { sendEmail } = require('../config/mailer');
const mongoose = require('mongoose');
const { generateOTP, setOTPExpiration } = require('../services/otpService');
// *** IMPORT NEW SERVICE ***
const { generateEmailHtml } = require('../services/emailTemplateService');

exports.placeOrder = async (req, res, next) => {
    const userId = req.session.user._id;
    const sessionDB = await mongoose.startSession();
    sessionDB.startTransaction({ readConcern: { level: 'snapshot' }, writeConcern: { w: 'majority' } });

    try {
        const user = await User.findById(userId)
                              .populate('cart.productId', 'name price imageUrl stock reviewStatus sellerId')
                              .session(sessionDB);

        if (!user) {
            await sessionDB.abortTransaction(); sessionDB.endSession();
            req.flash('error_msg', 'User session not found. Please log in again.');
            return res.redirect('/auth/login');
        }
        if (!user.cart || user.cart.length === 0) {
             await sessionDB.abortTransaction(); sessionDB.endSession();
            req.flash('error_msg', 'Your cart is empty.');
            return res.redirect('/user/cart');
        }
        if (!user.address || !user.address.name || !user.address.phone || !user.address.pincode || !user.address.cityVillage || !user.address.locality) { // Added locality check
            await sessionDB.abortTransaction(); sessionDB.endSession();
            req.flash('error_msg', 'Please complete your shipping address before placing the order.');
            return res.redirect('/user/checkout');
        }

        let orderProducts = [];
        let totalAmount = 0;
        const productStockUpdates = [];
        let validationFailed = false;
        let validationErrorMessage = 'An issue occurred with your cart. Please review and try again.';
        const itemsToRemoveFromCart = [];

        for (const item of user.cart) {
            const itemQuantity = Number(item.quantity);
            if (isNaN(itemQuantity) || !Number.isInteger(itemQuantity) || itemQuantity <= 0) {
                validationErrorMessage = `Invalid quantity found for an item. It has been removed.`;
                itemsToRemoveFromCart.push(item._id);
                validationFailed = true; continue;
            }
            if (!item.productId || !item.productId._id) {
                 validationErrorMessage = `An invalid product reference was found and removed.`;
                 itemsToRemoveFromCart.push(item._id);
                 validationFailed = true; continue;
            }

            const currentProduct = item.productId;

             if (currentProduct.reviewStatus !== 'approved') {
                validationErrorMessage = `Product "${currentProduct.name}" is not available and has been removed from your cart.`;
                itemsToRemoveFromCart.push(item._id);
                validationFailed = true; continue;
            }
            if (currentProduct.stock < itemQuantity) {
                validationErrorMessage = `Insufficient stock for "${currentProduct.name}". Available: ${currentProduct.stock}. Please update your cart quantity.`;
                validationFailed = true;
                break;
            }

            orderProducts.push({
                productId: currentProduct._id,
                name: currentProduct.name,
                priceAtOrder: currentProduct.price,
                quantity: itemQuantity,
                imageUrl: currentProduct.imageUrl,
                sellerId: currentProduct.sellerId
            });
            totalAmount += currentProduct.price * itemQuantity;
            productStockUpdates.push({
                 productId: currentProduct._id,
                 quantityToDecrement: itemQuantity
             });
        }

        if (validationFailed) {
             if (itemsToRemoveFromCart.length > 0) {
                 await User.updateOne(
                    { _id: userId },
                    { $pull: { cart: { _id: { $in: itemsToRemoveFromCart } } } }
                 ).session(sessionDB);
                 console.log(`Removed ${itemsToRemoveFromCart.length} invalid items from cart for user ${userId}`);
             }
            await sessionDB.abortTransaction(); sessionDB.endSession();

             const updatedUser = await User.findById(userId).select('cart').populate('cart.productId').lean();
             req.session.user.cart = updatedUser ? updatedUser.cart.filter(i => i.productId).map(i => ({ productId: i.productId._id, quantity: i.quantity })) : [];
             await req.session.save();

             req.flash('error_msg', validationErrorMessage);
             return res.redirect('/user/cart');
         }

        for (const update of productStockUpdates) {
            const updateResult = await Product.updateOne(
                { _id: update.productId, stock: { $gte: update.quantityToDecrement } },
                { $inc: { stock: -update.quantityToDecrement, orderCount: 1 } },
                { session: sessionDB }
            );
            if (updateResult.modifiedCount === 0) {
                 await sessionDB.abortTransaction(); sessionDB.endSession();
                 req.flash('error_msg', `Checkout failed: Stock changed for a product during checkout. Please try again.`);
                 return res.redirect('/user/cart');
             }
        }

        const order = new Order({
            userId: userId,
            userEmail: user.email,
            products: orderProducts,
            totalAmount: totalAmount,
            shippingAddress: user.address,
            paymentMethod: 'COD',
            status: 'Pending',
        });
        await order.save({ session: sessionDB });

        user.cart = [];
        await user.save({ session: sessionDB });

        await sessionDB.commitTransaction();

        req.session.user.cart = [];
        await req.session.save();

        // *** UPDATED: Send Confirmation Email using template ***
        try {
            const subject = `Your miniapp Order #${order._id} Has Been Placed!`;
            // Create a more detailed text fallback
            const productListText = order.products.map(p => `- ${p.name} (Qty: ${p.quantity}) @ ₹${p.priceAtOrder.toFixed(2)}`).join('\n');
            const text = `Thank you for your order!\nOrder ID: ${order._id}\nTotal: ₹${order.totalAmount.toFixed(2)}\n\nItems:\n${productListText}\n\nShipping To: ${order.shippingAddress.name}, ${order.shippingAddress.cityVillage}, ${order.shippingAddress.pincode}\n\nWe'll notify you when it ships. You can view status here: ${req.protocol}://${req.get('host')}/orders/my-orders`;

            // Generate HTML using the template
            const productListHTML = order.products.map(p => `<li style="margin-bottom: 5px; padding-left: 0;">${p.name} (Qty: ${p.quantity}) - ₹${p.priceAtOrder.toFixed(2)}</li>`).join('');
            const html = generateEmailHtml({
                recipientName: user.name,
                subject: subject,
                greeting: `Order Confirmation #${order._id}`,
                bodyLines: [
                    `Thank you for your purchase! Your order has been successfully placed and is being processed.`,
                    `<strong>Order ID:</strong> ${order._id}`,
                    `<strong>Total Amount:</strong> ₹${order.totalAmount.toFixed(2)}`,
                    `<strong>Shipping To:</strong> ${order.shippingAddress.name}, ${order.shippingAddress.cityVillage}, ${order.shippingAddress.locality}, ${order.shippingAddress.pincode}`, // Added locality
                    `<h3 style="margin-top: 20px; margin-bottom: 10px; font-size: 16px; border-bottom: 1px solid #eee; padding-bottom: 5px;">Order Summary:</h3>
                     <ul style="list-style: none; padding: 0; margin: 0 0 15px 0;">${productListHTML}</ul>`, // Added bottom margin to ul
                    `We'll send you another email once your order has shipped.`
                ],
                buttonUrl: `${req.protocol}://${req.get('host')}/orders/my-orders`,
                buttonText: 'View Order Status',
                companyName: 'miniapp'
            });

            await sendEmail(user.email, subject, text, html); // Send both text and html
        } catch (emailError) {
            console.error(`Failed sending order confirmation email for order ${order._id}:`, emailError);
        }
        // *** END UPDATE ***

        req.flash('success_msg', 'Order placed successfully!');
        res.redirect('/orders/my-orders');

    } catch (error) {
        if (sessionDB.inTransaction()) {
             await sessionDB.abortTransaction();
        }
        console.error("Order Placement Transaction Error:", error);
        // Provide a slightly more informative error message
        let userErrorMessage = 'Order placement failed due to a server error. Please try again.';
        if (error.message && error.message.includes('Stock changed')) {
            userErrorMessage = error.message; // Use the specific stock error message
        }
        req.flash('error_msg', userErrorMessage);
        res.redirect('/user/cart');
    } finally {
        if (sessionDB && sessionDB.endSession) {
             await sessionDB.endSession();
        }
    }
};

exports.cancelOrder = async (req, res, next) => {
    const orderId = req.params.id;
    const userId = req.session.user._id;
    const sessionDB = await mongoose.startSession();
    sessionDB.startTransaction({ writeConcern: { w: 'majority' }});

    try {
        const order = await Order.findOne({
             _id: orderId,
             userId: userId,
             status: 'Pending',
             cancellationAllowedUntil: { $gt: Date.now() }
        })
        .populate('products.productId', '_id name')
        .populate('userId', 'name') // Populate user name for email
        .session(sessionDB);

        if (!order) {
             await sessionDB.abortTransaction(); sessionDB.endSession();
             req.flash('error_msg', 'Order not found, already processed/cancelled, or cancellation period expired.');
            return res.redirect('/orders/my-orders');
        }

        console.log(`User Cancellation: Restoring stock/orderCount for order ${orderId}.`);
        const productUpdatePromises = order.products.map(item => {
            const quantityToRestore = Number(item.quantity);
            if (!item.productId?._id || isNaN(quantityToRestore) || quantityToRestore <= 0) {
                 console.warn(`User Cancel: Invalid item P.ID ${item.productId?._id} or Qty ${item.quantity} in O.ID ${orderId}. Skipping stock restore.`);
                return Promise.resolve();
             }
             return Product.updateOne(
                 { _id: item.productId._id },
                 { $inc: { stock: quantityToRestore, orderCount: -1 } },
                 { session: sessionDB }
             ).catch(err => {
                console.error(`User Cancel: Failed stock/orderCount restore for P.ID ${item.productId._id} on O.ID ${orderId}: ${err.message}`);
             });
        });
        const results = await Promise.allSettled(productUpdatePromises);
        results.forEach((result, index) => {
            if (result.status === 'rejected') {
                console.error(`Failed promise during stock restore for item index ${index} in order ${orderId}: ${result.reason}`);
            }
        });
        console.log(`User Cancel: Stock/OrderCount restoration process completed for order ${orderId}.`);

        order.status = 'Cancelled';
        order.cancellationReason = "Cancelled by customer";
        await order.save({ session: sessionDB });

        await sessionDB.commitTransaction();

        // *** UPDATED: Send email confirmation using template ***
         try{
             const subject = `Your miniapp Order #${order._id} Has Been Cancelled`;
             const text = `Your order (${order._id}) has been successfully cancelled as requested. Any applicable refund will be processed shortly.`;
             const html = generateEmailHtml({
                  recipientName: order.userId?.name || req.session.user.name, // Use populated name or session name
                  subject: subject,
                  greeting: `Order Cancellation Confirmation`,
                  bodyLines: [
                      `Your order (#${order._id}) has been successfully cancelled as per your request.`,
                      `If any payment was made, a refund will be processed according to our policy. Please allow a few business days for it to reflect in your account.`,
                      `We're sorry to see this order go. We hope to serve you again soon!`
                  ],
                  buttonUrl: `${req.protocol}://${req.get('host')}/`,
                  buttonText: 'Continue Shopping',
                  companyName: 'miniapp'
             });
            await sendEmail(order.userEmail, subject, text, html);
         } catch (emailError){
             console.error(`Failed sending cancellation confirmation email for order ${order._id}:`, emailError);
         }
        // *** END UPDATE ***

        req.flash('success_msg', 'Order cancelled successfully.');
        res.redirect('/orders/my-orders');

    } catch (error) {
         if (sessionDB.inTransaction()) {
             await sessionDB.abortTransaction();
         }
         console.error("Order Cancellation Error:", error);
         req.flash('error_msg', 'Failed to cancel the order due to an internal error.');
         res.redirect('/orders/my-orders');
    } finally {
        if (sessionDB && sessionDB.endSession) { await sessionDB.endSession(); }
    }
};

exports.getMyOrders = async (req, res, next) => {
    try {
        const orders = await Order.find({ userId: req.session.user._id })
                                   .select('-__v')
                                   .sort({ orderDate: -1 })
                                   .populate('products.productId', 'name imageUrl _id price')
                                   .lean();

        const now = Date.now();
        orders.forEach(order => {
            order.isCancellable = order.status === 'Pending' && order.cancellationAllowedUntil && now < new Date(order.cancellationAllowedUntil).getTime();
            order.showDeliveryOtp = order.status === 'Pending' &&
                                    !!order.orderOTP &&
                                    !!order.orderOTPExpires &&
                                    new Date(order.orderOTPExpires).getTime() > now;
        });

        res.render('user/my-orders', {
            title: 'My Orders',
            orders: orders
        });
    } catch (error) {
        console.error("Error fetching user orders:", error);
        next(error);
    }
};

exports.generateAndSendDirectDeliveryOTPByAdmin = async (orderId) => {
    try {
        const order = await Order.findById(orderId);
        if (!order) throw new Error('Order not found.');
        if (order.status !== 'Pending') throw new Error(`Cannot generate OTP for order status '${order.status}'. Must be 'Pending'.`);

        const otp = generateOTP();
        const otpExpires = setOTPExpiration(5);
        order.orderOTP = otp;
        order.orderOTPExpires = otpExpires;
        await order.save();

        const user = await User.findById(order.userId).select('email');
        const userEmail = user ? user.email : '[User Account Missing]';

        console.log(`ADMIN generated Direct Delivery OTP for O.ID ${orderId}. OTP: ${otp}. (User: ${userEmail})`);
        // Optional: Could send an email to the user here if needed, using generateEmailHtml

        return { success: true, message: `OTP generated for order ${orderId}. It is visible on the customer's 'My Orders' page.` };
    } catch (error) {
        console.error(`Error in generateAndSendDirectDeliveryOTPByAdmin for O.ID ${orderId}:`, error);
        throw error;
    }
};

exports.generateAndSendDirectDeliveryOTPBySeller = async (orderId, sellerId) => {
    try {
        const order = await Order.findById(orderId)
                                .populate('products.productId', 'sellerId');

        if (!order) throw new Error('Order not found.');
        if (order.status !== 'Pending') throw new Error(`Cannot generate OTP for order status '${order.status}'. Must be 'Pending'.`);

        const isRelevant = order.products.some(p => p.productId?.sellerId?.toString() === sellerId.toString());
        if (!isRelevant) {
            console.warn(`Seller ${sellerId} attempted OTP generation for unrelated order ${orderId}.`);
            throw new Error('Permission Denied: Order does not contain your products.');
        }

        const otp = generateOTP();
        const otpExpires = setOTPExpiration(5);
        order.orderOTP = otp;
        order.orderOTPExpires = otpExpires;
        await order.save();

        const user = await User.findById(order.userId).select('email');
        const userEmail = user ? user.email : '[User Account Missing]';

        console.log(`SELLER (${sellerId}) generated OTP for O.ID ${orderId}. OTP: ${otp}. (User: ${userEmail})`);
        // Optional: Could send an email to the user here if needed, using generateEmailHtml

        return { success: true, message: `OTP generated for order ${orderId}. It is visible on the customer's 'My Orders' page.` };
    } catch (error) {
        console.error(`Error in generateAndSendDirectDeliveryOTPBySeller for O.ID ${orderId} by Seller ${sellerId}:`, error);
        throw error;
    }
};

exports.confirmDirectDeliveryByAdmin = async (orderId, adminUserId, providedOtp, resForHelper = null) => {
    try {
        const order = await Order.findOne({
           _id: orderId,
           status: 'Pending',
           orderOTP: providedOtp,
           orderOTPExpires: { $gt: Date.now() }
        });

        if (!order) {
           const checkOrder = await Order.findById(orderId).select('status orderOTP orderOTPExpires');
           if (!checkOrder) throw new Error('Order not found.');
           if (checkOrder.status !== 'Pending') throw new Error(`Order status is '${checkOrder.status}', cannot confirm delivery.`);
           if (checkOrder.orderOTP !== providedOtp) throw new Error('Invalid OTP.');
           if (!checkOrder.orderOTPExpires || checkOrder.orderOTPExpires <= Date.now()) throw new Error('Expired OTP.');
           throw new Error('OTP verification failed.');
        }

        order.status = 'Delivered';
        order.receivedByDate = new Date();
        order.orderOTP = undefined;
        order.orderOTPExpires = undefined;
        order.cancellationAllowedUntil = undefined;
        await order.save();

        console.log(`Order ${orderId} confirmed delivered by ADMIN ${adminUserId}`);

        // *** UPDATED: Send Confirmation Email using template ***
        try {
            const subject = `Your miniapp Order #${order._id} Has Been Delivered!`;
            const formattedDeliveryDate = resForHelper?.locals?.formatDateIST(order.receivedByDate) || new Date(order.receivedByDate).toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' });
            const text = `Great news! Your order (${order._id}) has been delivered on ${formattedDeliveryDate}. Confirmed by Admin. Thank you for shopping!`;
            const html = generateEmailHtml({
                recipientName: order.shippingAddress.name,
                subject: subject,
                greeting: `Your Order Has Arrived!`,
                bodyLines: [
                    `Great news! Your order (#${order._id}) has been successfully delivered and confirmed by administration.`,
                    `<strong>Delivered On:</strong> ${formattedDeliveryDate}`,
                    `We hope you enjoy your purchase!`,
                ],
                buttonUrl: `${resForHelper?.req?.protocol || 'http'}://${resForHelper?.req?.get('host') || 'localhost'}/orders/my-orders`,
                buttonText: 'View Order Details',
                companyName: 'miniapp'
            });
           await sendEmail(order.userEmail, subject, text, html);
        } catch (emailError){
            console.error(`Admin Confirm: Failed sending delivery confirmation email for O.ID ${order._id}:`, emailError);
        }
        // *** END UPDATE ***

        return { success: true, order: order };
    } catch (error) {
        console.error(`Error verifying ADMIN Direct Delivery OTP for O.ID ${orderId} by Admin ${adminUserId}:`, error);
        throw error;
   }
};

exports.confirmDirectDeliveryBySeller = async (orderId, sellerId, providedOtp, resForHelper = null) => {
    try {
        const order = await Order.findOne({
            _id: orderId,
            status: 'Pending',
            orderOTP: providedOtp,
            orderOTPExpires: { $gt: Date.now() }
        }).populate('products.productId', 'sellerId');

        if (!order) {
           const checkOrder = await Order.findById(orderId).select('status orderOTP orderOTPExpires');
           if (!checkOrder) throw new Error('Order not found.');
           if (checkOrder.status !== 'Pending') throw new Error(`Order status is '${checkOrder.status}'.`);
           if (checkOrder.orderOTP !== providedOtp) throw new Error('Invalid OTP.');
           if (!checkOrder.orderOTPExpires || checkOrder.orderOTPExpires <= Date.now()) throw new Error('Expired OTP.');
           throw new Error('OTP verification failed.');
        }

        const isRelevant = order.products.some(p => p.productId?.sellerId?.toString() === sellerId.toString());
        if (!isRelevant) {
           console.warn(`Seller ${sellerId} attempted to confirm unrelated order ${orderId}.`);
           throw new Error('Permission Denied: Order does not contain your products.');
        }

        order.status = 'Delivered';
        order.receivedByDate = new Date();
        order.orderOTP = undefined;
        order.orderOTPExpires = undefined;
        order.cancellationAllowedUntil = undefined;
        await order.save();

        console.log(`Order ${orderId} confirmed delivered by SELLER ${sellerId}`);

        // *** UPDATED: Send Confirmation Email using template ***
        try {
           const subject = `Your miniapp Order #${order._id} Has Been Delivered!`;
           const formattedDeliveryDate = resForHelper?.locals?.formatDateIST(order.receivedByDate) || new Date(order.receivedByDate).toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' });
           const text = `Great news! Your order (${order._id}) has been delivered on ${formattedDeliveryDate}. Confirmed by Seller. Thank you for shopping!`;
           const html = generateEmailHtml({
               recipientName: order.shippingAddress.name,
               subject: subject,
               greeting: `Your Order Has Arrived!`,
               bodyLines: [
                   `Great news! Your order (#${order._id}) has been successfully delivered and confirmed by the seller.`,
                   `<strong>Delivered On:</strong> ${formattedDeliveryDate}`,
                   `We hope you enjoy your purchase!`,
               ],
               buttonUrl: `${resForHelper?.req?.protocol || 'http'}://${resForHelper?.req?.get('host') || 'localhost'}/orders/my-orders`,
               buttonText: 'View Order Details',
               companyName: 'miniapp'
           });
           await sendEmail(order.userEmail, subject, text, html);
        } catch (emailError){
            console.error(`Seller Confirm: Failed sending delivery confirmation email for O.ID ${order._id}:`, emailError);
        }
        // *** END UPDATE ***

        return { success: true, order: order };
    } catch (error) {
        console.error(`Error verifying SELLER Direct Delivery OTP for O.ID ${orderId} by Seller ${sellerId}:`, error);
        throw error;
   }
};

controllers/productController.js:
// controllers/productController.js
const Product = require('../models/Product');
const User = require('../models/User');
// *** Import category names ***
const { categoryNames } = require('../config/categories');


function escapeRegex(string) {
  // Simple regex escape. Consider a more robust library if needed.
  return string.replace(/[-\[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
}

// --- Get Products (Handles listing, search, AND category filter) ---
exports.getProducts = async (req, res, next) => {
  try {
    const searchTerm = req.query.search || '';
    // *** Get category filter ***
    const categoryFilter = req.query.category || '';

    let query = {
        reviewStatus: 'approved', // Always filter by approved
        stock: { $gt: 0 }         // Always filter by in-stock
    };
    let sort = { createdAt: -1 }; // Default sort
    const projection = {};

    // Use Regex for sequential matching if searchTerm exists
    if (searchTerm) {
      const escapedSearchTerm = escapeRegex(searchTerm);
      const regex = new RegExp(escapedSearchTerm, 'i');
      query.$or = [
        { name: regex },
        { category: regex }
      ];
      console.log(`Regex Search Query: ${JSON.stringify(query)}`);
    }
    // Apply category filter ONLY if no search term is present
    else if (categoryFilter && categoryNames.includes(categoryFilter)) {
         query.category = categoryFilter;
    } else if (categoryFilter) {
         console.warn(`Invalid category filter attempted on /products route: ${categoryFilter}`);
    }
    // --- End Filter Logic ---

    const products = await Product.find(query, projection)
                                    .sort(sort)
                                    .lean();

    // Determine page title based on filters
    let pageTitle = 'Products';
    if (searchTerm) {
        pageTitle = `Search Results for "${searchTerm}"`;
    } else if (categoryFilter && categoryNames.includes(categoryFilter)) {
        pageTitle = `Category: ${categoryFilter}`;
    }

    // Render the same index page, passing search term and category for display
    res.render('products/index', {
      title: pageTitle,
      products: products,
      searchTerm: searchTerm,
      selectedCategory: categoryFilter && categoryNames.includes(categoryFilter) ? categoryFilter : null, // Pass selected category
      // Note: displayCategories are typically passed by getHomePage, not needed here unless specifically rendering categories on this route
      // displayCategories: require('../config/categories') // Uncomment if needed here
    });
  } catch (error) {
    console.error("Error fetching products:", error);
    next(error); // Pass error to central handler
  }
};


// --- Get Product Details (No changes needed) ---
exports.getProductDetails = async (req, res, next) => {
  try {
    const product = await Product.findById(req.params.id)
                                    .populate('sellerId', 'name email')
                                    .lean();

    if (!product) {
       const error = new Error('Product not found');
       error.status = 404;
       return next(error);
    }

    const isApproved = product.reviewStatus === 'approved';
    const user = req.session.user;
    const isAdmin = user?.role === 'admin';
    const isOwner = user && product.sellerId?._id && user._id.toString() === product.sellerId._id.toString();

    if (!isApproved && !isAdmin && !isOwner) {
         const error = new Error('Product not available');
         error.status = 404;
         return next(error);
    }

    let userRating = null;
    if (user) {
       const ratingData = product.ratings?.find(r => r.userId?.toString() === user._id.toString());
       userRating = ratingData ? ratingData.rating : null;
    }

    const ratingCounts = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };
    let totalRatings = 0;
    if (product.ratings && product.ratings.length > 0) {
        totalRatings = product.ratings.length;
        product.ratings.forEach(r => {
            if (r.rating && ratingCounts.hasOwnProperty(r.rating)) {
                ratingCounts[r.rating]++;
            }
        });
    }
    const displayTotalRatings = product.numReviews || totalRatings;

    res.render('products/detail', {
      title: product.name,
      product: product,
      isApproved: isApproved,
      isAdminView: isAdmin,
      isOwnerView: isOwner,
      userRating: userRating,
      userCanRate: user ? true : false,
      ratingCounts: ratingCounts,
      totalRatings: displayTotalRatings
    });
  } catch (error) {
       if (error.name === 'CastError') {
           const notFoundError = new Error('Product not found (Invalid ID)');
           notFoundError.status = 404;
           return next(notFoundError);
       }
    next(error);
  }
};


// --- Rate Product (No changes needed) ---
 exports.rateProduct = async (req, res, next) => {
     const { rating } = req.body;
    const productId = req.params.id;
    const userId = req.session.user._id;

     if (!rating || isNaN(Number(rating)) || rating < 1 || rating > 5) {
         req.flash('error_msg', 'Please provide a valid rating between 1 and 5.');
        return res.redirect('back');
     }

    try {
        const product = await Product.findById(productId);

         if (!product) {
             req.flash('error_msg', 'Product not found.');
             return res.status(404).redirect('/');
         }

         const existingRatingIndex = product.ratings.findIndex(r => r.userId?.toString() === userId.toString());

         if (existingRatingIndex > -1) {
            product.ratings[existingRatingIndex].rating = Number(rating);
         } else {
            product.ratings.push({ userId, rating: Number(rating) });
         }

        await product.save();

         req.flash('success_msg', 'Thank you for your rating!');
         res.redirect(`/products/${productId}`);

     } catch (error) {
        if (error.name === 'CastError') {
            req.flash('error_msg', 'Invalid product ID.');
            return res.status(400).redirect('/');
        }
        console.error("Error rating product:", error);
        next(error);
     }
 };

 // --- Get Product Suggestions (Updated for sequential matching - no category changes needed here) ---
 exports.getProductSuggestions = async (req, res, next) => {
    const searchTerm = req.query.q;
    const limit = 8;

    if (!searchTerm || searchTerm.trim().length < 2) {
        return res.json([]);
    }

    try {
        const escapedSearchTerm = escapeRegex(searchTerm);
        const regex = new RegExp(escapedSearchTerm, 'i');

        const query = {
            $or: [ { name: regex }, { category: regex } ],
            reviewStatus: 'approved',
            stock: { $gt: 0 }
        };

        const suggestions = await Product.find(query)
            .select('_id name imageUrl')
            .limit(limit)
            .sort({ name: 1 })
            .lean();

        res.json(suggestions);

    } catch (error) {
        console.error("Error fetching product suggestions:", error);
        res.status(500).json({ error: 'Failed to fetch suggestions' });
    }
 };

controllers/userController.js:
// controllers/userController.js
const User = require('../models/User');
const Product = require('../models/Product');
const mongoose = require('mongoose');
const axios = require('axios');

// ===================================================
// Existing functions (getUserProfilePage, updateUserName - NO CHANGES)
// ===================================================
exports.getUserProfilePage = async (req, res, next) => {
    try {
        const userId = req.session.user._id;
        const user = await User.findById(userId)
                            .select('name email role address createdAt')
                            .lean();

        if (!user) {
            console.warn(`User not found in DB despite active session: ${userId}`);
            req.flash('error_msg', 'User session invalid. Please log in again.');
            return req.session.destroy(err => {
                if (err) return next(err);
                res.redirect('/auth/login');
            });
        }

        res.render('user/profile', {
            title: 'My Profile',
            user: user
        });

    } catch (error) {
        next(error);
    }
};

exports.updateUserName = async (req, res, next) => {
    const { name } = req.body;
    const userId = req.session.user._id;

    if (!name || typeof name !== 'string' || name.trim().length < 2) {
        req.flash('error_msg', 'Please enter a valid name (at least 2 characters).');
        return res.redirect('/user/profile');
    }

    const trimmedName = name.trim();

    try {
        const user = await User.findById(userId);
        if (!user) {
            req.flash('error_msg', 'User not found. Please log in again.');
            return res.redirect('/auth/login');
        }

        user.name = trimmedName;
        await user.save();

        req.session.user.name = user.name;
        await req.session.save();

        req.flash('success_msg', 'Name updated successfully.');
        res.redirect('/user/profile');

    } catch (error) {
        if (error.name === 'ValidationError') {
            let validationErrors = Object.values(error.errors).map(el => el.message);
            req.flash('error_msg', `Validation Error: ${validationErrors.join(' ')}`);
            return res.redirect('/user/profile');
        }
        console.error("Error updating user name:", error);
        next(error);
    }
};

// ===================================================
// UPDATED saveAddress function
// ===================================================
exports.saveAddress = async (req, res, next) => {
    // Destructure locality along with other fields
    const { name, phone, pincode, locality, cityVillage, landmarkNearby, source, state, district, mandal } = req.body;
    const userId = req.session.user._id;
    const redirectPath = (source === 'profile') ? '/user/profile' : '/user/checkout';

    // --- Input Validation ---
    let errors = [];
    // Add locality check
    if (!name || !phone || !pincode || !locality || !cityVillage) {
        errors.push('Please provide Name, Phone, Pincode, select a Locality, and enter House No/Building/Area.');
    }
    if (phone && !/^\d{10,15}$/.test(phone.trim())) { errors.push('Please enter a valid phone number (10-15 digits, numbers only).'); }
    if (pincode && !/^\d{6}$/.test(pincode.trim())) { errors.push('Please enter a valid 6-digit pincode.'); }
    if (!state || !district || !mandal) { errors.push('State, District, and Mandal/Taluk could not be determined. Please verify the Pincode and try saving again.'); }
    // Check if locality is empty if state/district/mandal were determined
    if (state && (!locality || locality.trim() === '')) {
        errors.push('Please select a Locality/Post Office from the dropdown after entering the Pincode.');
    }

    if (errors.length > 0) {
         req.flash('error_msg', errors.join(' '));
        // Pass back data to repopulate form
        req.session.addressFormData = req.body; // Store temporarily
        return res.redirect(redirectPath);
    }

    // --- Save Address Logic ---
    try {
        const user = await User.findById(userId);
        if (!user) {
            req.flash('error_msg', 'User not found.');
            delete req.session.addressFormData; // Clean up session data
            return res.redirect('/auth/login');
        }

        user.address = {
            name: name.trim(),
            phone: phone.trim(),
            pincode: pincode.trim(),
            locality: locality.trim(), // Save locality
            cityVillage: cityVillage.trim(), // Save House No/Building/Area
            landmarkNearby: landmarkNearby ? landmarkNearby.trim() : undefined, // Save Landmark
            mandal: mandal?.trim() || undefined,
            district: district?.trim() || undefined,
            state: state?.trim() || undefined
        };

        await user.save();

        // --- Update Session ---
        req.session.user.address = user.address.toObject();
        await req.session.save();
        delete req.session.addressFormData; // Clean up temporary form data

        req.flash('success_msg', 'Address saved successfully.');
        res.redirect(redirectPath);

    } catch (error) {
        delete req.session.addressFormData; // Clean up session data
        if (error.name === 'ValidationError') {
            let validationErrors = Object.values(error.errors).map(el => el.message);
             if (!state || !district || !mandal || !locality) {
                validationErrors.unshift('Pincode or Locality data might be missing.');
             }
            req.flash('error_msg', `Validation Error: ${validationErrors.join(' ')}`);
            req.session.addressFormData = req.body; // Store temporarily for repopulation
            return res.redirect(redirectPath);
        }
        next(error);
    }
};

// ===================================================
// Cart/Checkout functions
// ===================================================
exports.getCart = async (req, res, next) => {
    try {
        const userId = req.session.user._id;
        const user = await User.findById(userId)
                                    .populate('cart.productId', 'name price imageUrl stock _id reviewStatus')
                                    .lean();

        if (!user) {
           console.warn(`User not found in getCart despite session: ${userId}`);
           req.flash('error_msg', 'User not found.');
           return req.session.destroy(err => {
                if(err) return next(err);
                res.redirect('/auth/login');
           });
         }

        let cartTotal = 0;
        let populatedCart = [];
        let cartUpdated = false;

        if (user.cart && user.cart.length > 0) {
             populatedCart = user.cart.map(item => {
                 if (!item.productId || !item.productId._id) {
                     console.warn(`Cart item refers to a non-existent product ID for user: ${user.email}. Will filter.`);
                     cartUpdated = true;
                     return null;
                 }
                 if (item.productId.reviewStatus !== 'approved') {
                      console.warn(`Product ${item.productId.name} (${item.productId._id}) in cart is not approved. Will filter.`);
                      cartUpdated = true;
                      return null;
                 }
                const itemSubtotal = item.productId.price * item.quantity;
                cartTotal += itemSubtotal;
                return {
                    productId: item.productId._id,
                    name: item.productId.name,
                    price: item.productId.price,
                    imageUrl: item.productId.imageUrl,
                    stock: item.productId.stock,
                    quantity: item.quantity,
                    subtotal: itemSubtotal
                };
             }).filter(item => item !== null);

             if (cartUpdated) {
                 const validCartItems = populatedCart.map(item => ({ productId: item.productId, quantity: item.quantity }));
                 req.session.user.cart = validCartItems;
                 await req.session.save(); // Save updated session cart
                  console.log(`Session cart updated for user ${user.email} due to invalid/unapproved items found.`);
             }
         }

        res.render('user/cart', {
          title: 'Your Shopping Cart',
          cart: populatedCart,
          cartTotal: cartTotal
        });
      } catch (error) {
        next(error);
      }
};

// Handles 'Add to Cart' from forms (e.g., Product Detail Page)
exports.addToCart = async (req, res, next) => {
    const { productId, quantity = 1 } = req.body;
    const userId = req.session.user._id;
    const numQuantity = parseInt(quantity, 10);

     if (!productId || !mongoose.Types.ObjectId.isValid(productId) || isNaN(numQuantity) || numQuantity < 1) {
         req.flash('error_msg', 'Invalid product or quantity.');
         return res.redirect(req.headers.referer || '/');
     }

    try {
        const [user, product] = await Promise.all([
            User.findById(userId),
            Product.findById(productId).select('name stock reviewStatus')
        ]);

        if (!user) {
            req.flash('error_msg', 'User session error. Please log in again.');
            return res.redirect('/auth/login');
        }
        if (!product) {
            req.flash('error_msg', 'Product not found.');
            return res.redirect(req.headers.referer || '/');
        }

        if (product.reviewStatus !== 'approved') {
             req.flash('error_msg', `Sorry, "${product.name}" is currently unavailable.`);
             return res.redirect(req.headers.referer || '/');
        }

       if (product.stock <= 0) {
            req.flash('error_msg', `${product.name} is currently out of stock.`);
            return res.redirect(req.headers.referer || '/');
        }

       const existingCartItemIndex = user.cart.findIndex(item => item.productId.toString() === productId.toString());

       if (existingCartItemIndex > -1) {
           const existingQuantity = user.cart[existingCartItemIndex].quantity;
           const newQuantity = existingQuantity + numQuantity;
            if (product.stock < newQuantity) {
               req.flash('error_msg', `Cannot add ${numQuantity} more ${product.name}. Only ${product.stock} available in total (you have ${existingQuantity} in cart).`);
                // Redirect back to product page if adding too many from detail page
                return res.redirect(req.headers.referer?.includes(`/products/${productId}`) ? `/products/${productId}` : '/');
           }
            user.cart[existingCartItemIndex].quantity = newQuantity;
       } else {
           if (product.stock < numQuantity) {
               req.flash('error_msg', `Insufficient stock for ${product.name}. Only ${product.stock} available.`);
               // Redirect back to product page if adding too many from detail page
                return res.redirect(req.headers.referer?.includes(`/products/${productId}`) ? `/products/${productId}` : '/');
           }
           user.cart.push({ productId, quantity: numQuantity });
       }

        await user.save();

       req.session.user.cart = user.cart.map(item => ({ productId: item.productId, quantity: item.quantity }));
       await req.session.save();

        req.flash('success_msg', `${product.name} added to cart!`);

       // --- MODIFIED REDIRECT LOGIC ---
       if(req.query.redirectTo === 'checkout') {
           // This is for the "Buy Now" button functionality
           return res.redirect('/user/checkout');
       } else {
           // For the standard "Add to Cart" button (e.g., from product detail page),
           // redirect to the cart page.
           return res.redirect('/user/cart'); // <<<<<<<<<<< THIS IS THE CHANGE
       }
       // --- END MODIFIED REDIRECT LOGIC ---

    } catch (error) {
         if (error.name === 'CastError') {
            req.flash('error_msg', 'Invalid product ID format.');
             return res.redirect('/');
         }
         console.error("Add to Cart Error:", error);
        next(error);
    }
};

// Handles 'Add to Cart' from AJAX requests (e.g., Product Index Page)
exports.addToCartAjax = async (req, res, next) => {
    const { productId, quantity = 1 } = req.body;
    const userId = req.session.user._id;
    const numQuantity = parseInt(quantity, 10);

    // Basic Validation
    if (!productId || !mongoose.Types.ObjectId.isValid(productId)) {
        return res.status(400).json({ success: false, message: 'Invalid product ID.' });
    }
    if (isNaN(numQuantity) || numQuantity < 1) {
        return res.status(400).json({ success: false, message: 'Invalid quantity.' });
    }

    try {
        const [user, product] = await Promise.all([
            User.findById(userId),
            Product.findById(productId).select('name stock reviewStatus')
        ]);

        if (!user) { // Should not happen if isAuthenticated is used
            return res.status(401).json({ success: false, message: 'User session error. Please log in again.' });
        }
        if (!product) {
            return res.status(404).json({ success: false, message: 'Product not found.' });
        }

        if (product.reviewStatus !== 'approved') {
            return res.status(400).json({ success: false, message: `Sorry, "${product.name}" is currently unavailable.` });
        }

        if (product.stock <= 0) {
            return res.status(400).json({ success: false, message: `${product.name} is currently out of stock.` });
        }

        const existingCartItemIndex = user.cart.findIndex(item => item.productId.toString() === productId.toString());

        let finalQuantityInCart = 0;

        if (existingCartItemIndex > -1) {
            const existingQuantity = user.cart[existingCartItemIndex].quantity;
            const newQuantity = existingQuantity + numQuantity;
            if (product.stock < newQuantity) {
                return res.status(400).json({ success: false, message: `Cannot add ${numQuantity} more ${product.name}. Only ${product.stock} available in total (you have ${existingQuantity} in cart).` });
            }
            user.cart[existingCartItemIndex].quantity = newQuantity;
            finalQuantityInCart = newQuantity;
        } else {
            if (product.stock < numQuantity) {
                return res.status(400).json({ success: false, message: `Insufficient stock for ${product.name}. Only ${product.stock} available.` });
            }
            user.cart.push({ productId, quantity: numQuantity });
            finalQuantityInCart = numQuantity;
        }

        await user.save();

        // Update session cart
        req.session.user.cart = user.cart.map(item => ({ productId: item.productId, quantity: item.quantity }));
        await req.session.save();

        // Calculate updated cart item count for the response
        const updatedCartItemCount = user.cart.reduce((count, item) => count + (item.quantity || 0), 0);

        return res.status(200).json({
            success: true,
            message: `${product.name} added to cart!`,
            cartItemCount: updatedCartItemCount // Send back the updated count
        });

    } catch (error) {
        console.error("AJAX Add to Cart Error:", error);
        let statusCode = 500;
        let message = 'Error adding item to cart.';
        if (error.name === 'CastError') {
            statusCode = 400;
            message = 'Invalid product ID format.';
        }
        return res.status(statusCode).json({ success: false, message: message });
    }
};

exports.updateCartQuantity = async (req, res, next) => {
         const { productId, quantity } = req.body;
         const userId = req.session.user._id;
         const numQuantity = parseInt(quantity, 10);

         if (!productId || !mongoose.Types.ObjectId.isValid(productId) || isNaN(numQuantity) || numQuantity < 0) {
              return res.status(400).json({ success: false, message: 'Invalid product ID or quantity.' });
         }

        try {
            const [user, product] = await Promise.all([
                 User.findById(userId),
                 Product.findById(productId).select('stock price reviewStatus name')
            ]);

            if (!user) {
               return res.status(404).json({ success: false, message: 'User not found.' });
            }
            if (!product) {
               return res.status(404).json({ success: false, message: 'Product not found.' });
            }

            if (product.reviewStatus !== 'approved') {
                const itemIndexToRemove = user.cart.findIndex(item => item.productId.toString() === productId.toString());
                if (itemIndexToRemove > -1) {
                    user.cart.splice(itemIndexToRemove, 1);
                    await user.save();
                    req.session.user.cart = user.cart.map(i => ({ productId: i.productId, quantity: i.quantity }));
                    await req.session.save();
                }
                return res.status(400).json({ success: false, message: `Product "${product.name}" is unavailable and has been removed.`, removal: true });
            }

            const cartItemIndex = user.cart.findIndex(item => item.productId.toString() === productId.toString());

            if (numQuantity === 0) {
                if (cartItemIndex > -1) {
                    user.cart.splice(cartItemIndex, 1);
                }
            }
            else {
               if (product.stock < numQuantity) {
                  return res.status(400).json({ success: false, message: `Insufficient stock for ${product.name}. Only ${product.stock} available.` });
                 }
                if (cartItemIndex > -1) {
                    user.cart[cartItemIndex].quantity = numQuantity;
                } else {
                     // Avoid adding if quantity > stock during direct update
                    if (product.stock >= numQuantity) {
                       user.cart.push({ productId, quantity: numQuantity });
                    } else {
                         return res.status(400).json({ success: false, message: `Insufficient stock for ${product.name}. Only ${product.stock} available.` });
                    }
                 }
            }

            await user.save();
            // Refresh session data after save
            req.session.user.cart = user.cart.map(item => ({ productId: item.productId, quantity: item.quantity }));

            let cartTotal = 0;
            let itemSubtotal = 0;
             // Repopulate with prices after save
            const updatedUser = await User.findById(userId).populate('cart.productId', 'price').lean();

             for (const item of updatedUser.cart) {
                 if (item.productId && typeof item.productId.price === 'number') {
                    const currentItemSubtotal = item.productId.price * item.quantity;
                    cartTotal += currentItemSubtotal;
                    if (item.productId._id.toString() === productId.toString()) {
                         itemSubtotal = currentItemSubtotal;
                     }
                 }
            }
             await req.session.save(); // Save the potentially updated cart count/total info

            res.json({
                 success: true,
                 message: 'Cart updated successfully.',
                 newQuantity: user.cart.find(item => item.productId.toString() === productId.toString())?.quantity ?? 0,
                 itemSubtotal: itemSubtotal,
                 cartTotal: cartTotal,
                 itemId: productId
             });

        } catch (error) {
            console.error("Cart Update Error:", error);
            res.status(500).json({ success: false, message: 'Error updating cart quantity.' });
        }
};

exports.removeFromCart = async (req, res, next) => {
    const { productId } = req.params;
    const userId = req.session.user._id;

    if (!productId || !mongoose.Types.ObjectId.isValid(productId)) {
       req.flash('error_msg', 'Invalid Product ID.');
       return res.redirect('/user/cart');
     }

    try {
        // Fetch user to get the current cart before update
        const userBeforeUpdate = await User.findById(userId).lean();
        const initialCartLength = userBeforeUpdate ? userBeforeUpdate.cart.length : 0;

        const user = await User.findOneAndUpdate(
            { _id: userId },
            { $pull: { cart: { productId: productId } } },
            { new: true } // Return updated document
        );

         if (!user) {
             req.flash('error_msg', 'User not found.');
            return res.redirect('/auth/login');
         }

         // Update session cart
         req.session.user.cart = user.cart.map(item => ({ productId: item.productId, quantity: item.quantity }));
         await req.session.save();

         // Check if an item was actually removed
         if (user.cart.length < initialCartLength) {
             req.flash('success_msg', 'Item removed from cart.');
         } else {
              req.flash('info_msg', 'Item not found in cart.'); // Or no message
         }
         res.redirect('/user/cart');

    } catch (error) {
       console.error("Remove From Cart Error:", error);
       next(error);
    }
};

exports.getCheckoutPage = async (req, res, next) => {
    try {
       const userId = req.session.user._id;
       const user = await User.findById(userId)
                              .populate('cart.productId', 'name price imageUrl stock reviewStatus sellerId _id')
                              .lean();

       if (!user) {
           req.flash('error_msg', 'User session expired. Please login.');
           return res.redirect('/auth/login');
       }
       if (!user.cart || user.cart.length === 0) {
           req.flash('error_msg', 'Your cart is empty.');
           return res.redirect('/user/cart');
       }

       let subTotal = 0;
        let checkoutItems = [];
        let issuesFound = false;
        let issueMessages = [];
        let itemsToRemoveFromCartOnRedirect = []; // Track items to remove

       for (const item of user.cart) {
           const productName = item.productId?.name || '[Unknown Product]';
           const productStock = item.productId?.stock ?? 0;
           const productStatus = item.productId?.reviewStatus ?? 'unavailable';

           if (!item.productId || !item.productId._id) {
               issueMessages.push(`An invalid item was detected in your cart.`);
               issuesFound = true;
               itemsToRemoveFromCartOnRedirect.push(item._id);
               continue;
           }
            if(productStatus !== 'approved'){
                issueMessages.push(`"${productName}" is currently unavailable.`);
                issuesFound = true;
                itemsToRemoveFromCartOnRedirect.push(item._id);
                continue;
            }
            if(productStock < item.quantity){
                issueMessages.push(`Insufficient stock for "${productName}" (Only ${productStock} left).`);
                issuesFound = true;
                 continue;
            }
            const itemPrice = typeof item.productId.price === 'number' ? item.productId.price : 0;
            const itemTotal = itemPrice * item.quantity;
            subTotal += itemTotal;
           checkoutItems.push({
               productId: item.productId._id,
               name: productName,
               price: itemPrice,
               imageUrl: item.productId.imageUrl || '/images/placeholder.png',
               quantity: item.quantity,
               stock: productStock,
               itemTotal: itemTotal
            });
       }

        if (issuesFound) {
             if (itemsToRemoveFromCartOnRedirect.length > 0) {
                 await User.updateOne(
                     { _id: userId },
                     { $pull: { cart: { _id: { $in: itemsToRemoveFromCartOnRedirect } } } }
                 );
                 const updatedUser = await User.findById(userId).select('cart').lean();
                 req.session.user.cart = updatedUser ? updatedUser.cart.map(i => ({ productId: i.productId, quantity: i.quantity })) : [];
                 await req.session.save();
                 issueMessages.push('Problematic items have been removed.');
             }
             req.flash('error_msg', "Please resolve the following issues in your cart: " + issueMessages.join(' '));
             return res.redirect('/user/cart');
        }

        const totalAmount = subTotal;

       res.render('user/checkout', {
           title: 'Checkout',
           userAddress: user.address,
           items: checkoutItems,
           subTotal: subTotal,
           totalAmount: totalAmount,
           paymentMethod: 'COD'
       });

   } catch (error) {
       next(error);
   }
};

// ============================================================
// Pincode Lookup
// ============================================================
exports.lookupPincode = async (req, res) => {
    const pincode = req.params.pincode;
    const API_URL = `https://api.postalpincode.in/pincode/${pincode}`;

    if (!pincode || !/^\d{6}$/.test(pincode)) {
        return res.status(400).json({ success: false, message: 'Invalid Pincode format (must be 6 digits).' });
    }

    try {
        console.log(`[Pincode Lookup] Requesting data for Pincode: ${pincode}`);
        const response = await axios.get(API_URL, { timeout: 7000 });

        if (response.status !== 200) {
            console.error(`[Pincode Lookup] API request failed for ${pincode}. Status: ${response.status}`);
            return res.status(502).json({ success: false, message: `Pincode API unavailable (${response.statusText})` });
        }

        const data = response.data;

        if (!Array.isArray(data) || data.length === 0 || !data[0]) {
            console.error(`[Pincode Lookup] Unexpected API response format for ${pincode}. Data:`, JSON.stringify(data));
            return res.status(500).json({ success: false, message: 'Unexpected API response format.' });
        }

        const result = data[0];

        if (result.Status !== 'Success') {
            console.log(`[Pincode Lookup] Pincode ${pincode} not found by API. Message: ${result.Message}`);
            return res.status(404).json({ success: false, message: `Pincode not found (${result.Message || 'No records'})` });
        }

        // Check if PostOffice data exists
        if (!result.PostOffice || !Array.isArray(result.PostOffice) || result.PostOffice.length === 0) {
            console.warn(`[Pincode Lookup] Pincode ${pincode} found (Status: Success) but no PostOffice data returned.`);
            return res.json({
                success: true,
                location: {
                    pinCode: pincode,
                    mandalName: '',
                    districtName: '',
                    stateName: '',
                    localities: [] // Return empty array
                }
            });
        }

        // --- Extract and Map Data ---
        const postOffices = result.PostOffice;
        const firstPO = postOffices[0];

        // --- Extract list of localities ---
        const localitiesList = postOffices
            .map(po => po.Name)
            .filter(name => name && name.trim() !== '' && name.toUpperCase() !== 'NA')
            .sort(); // Optional: sort

        const uniqueLocalities = [...new Set(localitiesList)];

        const transformedLocation = {
            pinCode: firstPO.Pincode || pincode,
            mandalName: firstPO.Block && firstPO.Block !== 'NA'
                            ? firstPO.Block
                            : (firstPO.Taluk && firstPO.Taluk !== 'NA'
                                ? firstPO.Taluk
                                : firstPO.Division || ''),
            districtName: firstPO.District || '',
            stateName: firstPO.State || '',
            localities: uniqueLocalities
        };

        console.log(`[Pincode Lookup] Success for ${pincode}. Location:`, transformedLocation);
        res.json({ success: true, location: transformedLocation });

    } catch (error) {
        console.error(`[Pincode Lookup] Network/Request Error for pincode ${pincode}:`, error.message);
        let statusCode = 500;
        let message = 'Error looking up pincode information.';
        if (axios.isAxiosError(error)) {
            if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {
                message = 'Pincode lookup timed out. Please try again.';
                statusCode = 504;
            } else if (error.response) {
                 message = `Pincode API error (${error.response.status}).`;
                 statusCode = 502;
            } else if (error.request) {
                message = 'Network error during pincode lookup.';
                statusCode = 502;
            }
        }
        res.status(statusCode).json({ success: false, message: message });
    }
};

controllers/sellerController.js:
// controllers/sellerController.js
const Product = require('../models/Product');
const Order = require('../models/Order');
const User = require('../models/User');
const { sendEmail } = require('../config/mailer');
// *** IMPORT NEW SERVICE ***
const { generateEmailHtml } = require('../services/emailTemplateService');
const { reviewProductWithGemini } = require('../services/geminiService');
const {
    generateAndSendDirectDeliveryOTPBySeller,
    confirmDirectDeliveryBySeller
} = require('./orderController');
const mongoose = require('mongoose');
const categories = require('../config/categories');
const { categoryNames } = require('../config/categories');

const sellerCancellationReasons = [
    "❗ Item Out of Stock",
    "🚚 Unable to Fulfill/Ship",
    "👤 Technical Issue",
    "❓ Other Reason",
];

exports.getSellerDashboard = (req, res) => {
    res.render('seller/dashboard', { title: 'Seller Dashboard' });
};

exports.getUploadProductPage = (req, res) => {
    res.render('seller/upload-product', {
        title: 'Upload New Product',
        product: {},
        categories: categories
    });
};

exports.uploadProduct = async (req, res, next) => {
    const { name, category, price, stock, imageUrl, imageUrl2, specifications, shortDescription } = req.body;
    const sellerId = req.session.user._id;
    const sellerEmail = req.session.user.email;

     if (!name || !category || price === undefined || stock === undefined || !imageUrl) {
        req.flash('error_msg', 'Please fill in all required fields (Name, Category, Price, Stock, Primary Image URL).');
        return res.render('seller/upload-product', { title: 'Upload New Product', product: req.body, categories: categories });
    }
     if (isNaN(Number(price)) || Number(price) < 0 || isNaN(Number(stock)) || Number(stock) < 0) {
        req.flash('error_msg', 'Price and Stock must be valid non-negative numbers.');
         return res.render('seller/upload-product', { title: 'Upload New Product', product: req.body, categories: categories });
     }
     if (!categoryNames.includes(category)) {
        req.flash('error_msg', 'Invalid category selected.');
        return res.render('seller/upload-product', { title: 'Upload New Product', product: req.body, categories: categories });
    }

    try {
        const newProduct = new Product({
            name: name.trim(),
            category: category.trim(),
            shortDescription: shortDescription ? shortDescription.trim() : undefined,
            price: Number(price),
            stock: Number(stock),
            imageUrl: imageUrl.trim(),
            imageUrl2: imageUrl2 ? imageUrl2.trim() : undefined,
            specifications: specifications ? specifications.trim() : '',
            sellerId: sellerId,
            sellerEmail: sellerEmail,
            reviewStatus: 'pending'
        });

        await newProduct.save();
        console.log(`Product ${newProduct._id} saved initially by seller ${sellerEmail}.`);

        reviewProductWithGemini(newProduct).then(async reviewResult => {
             try {
                 const productToUpdate = await Product.findById(newProduct._id);
                 if (productToUpdate) {
                    productToUpdate.reviewStatus = reviewResult.status;
                    productToUpdate.rejectionReason = reviewResult.reason;
                    await productToUpdate.save();
                    console.log(`Product ${newProduct._id} review status updated to ${reviewResult.status}.`);
                 } else {
                     console.warn(`Product ${newProduct._id} not found for status update after Gemini review.`);
                 }
             } catch (updateError) {
                console.error(`Error updating product ${newProduct._id} after Gemini review:`, updateError);
             }
        }).catch(reviewError => {
             console.error(`Error in Gemini review promise chain for product ${newProduct._id}:`, reviewError);
              Product.findByIdAndUpdate(newProduct._id, { reviewStatus: 'pending', rejectionReason: 'AI review process failed.' }).catch(err => console.error("Failed to mark product as pending after review error:", err));
        });

        req.flash('success_msg', `Product "${newProduct.name}" submitted for review.`);
        res.redirect('/seller/products');

    } catch (error) {
        if (error.name === 'ValidationError') {
           let errors = Object.values(error.errors).map(el => el.message);
           req.flash('error_msg', `Validation Error: ${errors.join(' ')}`);
           return res.render('seller/upload-product', { title: 'Upload New Product', product: req.body, categories: categories });
       }
        console.error("Error uploading product:", error);
        next(error);
    }
};

exports.getManageProductsPage = async (req, res, next) => {
    try {
        const sellerId = req.session.user._id;
        const products = await Product.find({ sellerId: sellerId })
                                    .sort({ createdAt: -1 })
                                    .lean();

        res.render('seller/manage-products', {
            title: 'Manage Your Products',
            products: products
        });
    } catch (error) {
        next(error);
    }
};

exports.getEditProductPage = async (req, res, next) => {
     try {
        const product = await Product.findOne({ _id: req.params.id, sellerId: req.session.user._id }) // Ensure ownership
                                     .lean();
        if (!product) {
           req.flash('error_msg', 'Product not found or access denied.');
           return res.redirect('/seller/products');
       }
       res.render('seller/edit-product', {
           title: `Edit Product: ${product.name}`,
           product: product,
           categories: categories
       });
   } catch (error) {
        if (error.name === 'CastError') {
          req.flash('error_msg', 'Invalid product ID format.');
           return res.redirect('/seller/products');
      }
       next(error);
    }
};

exports.updateProduct = async (req, res, next) => {
    const productId = req.params.id;
    const sellerId = req.session.user._id;
    const { name, category, price, stock, imageUrl, imageUrl2, specifications, shortDescription } = req.body;
    const renderOptions = { title: `Edit Product Error`, product: { _id: productId, ...req.body }, categories: categories };

     if (!name || !category || price === undefined || stock === undefined || !imageUrl) {
        req.flash('error_msg', 'Please fill in all required fields.');
        try { const originalProduct = await Product.findOne({ _id: productId, sellerId: sellerId }).lean(); renderOptions.product = { ...originalProduct, ...req.body }; } catch (fetchErr) { console.error("Error refetching product on update validation fail:", fetchErr); }
        return res.render('seller/edit-product', renderOptions);
    }
     if (isNaN(Number(price)) || Number(price) < 0 || isNaN(Number(stock)) || Number(stock) < 0) {
         req.flash('error_msg', 'Price and Stock must be valid non-negative numbers.');
         try { const originalProduct = await Product.findOne({ _id: productId, sellerId: sellerId }).lean(); renderOptions.product = { ...originalProduct, ...req.body }; } catch (fetchErr) { console.error("Error refetching product on update validation fail:", fetchErr); }
         return res.render('seller/edit-product', renderOptions);
     }
     if (!categoryNames.includes(category)) {
        req.flash('error_msg', 'Invalid category selected.');
         try { const originalProduct = await Product.findOne({ _id: productId, sellerId: sellerId }).lean(); renderOptions.product = { ...originalProduct, ...req.body }; } catch (fetchErr) { console.error("Error refetching product on update validation fail:", fetchErr); }
        return res.render('seller/edit-product', renderOptions);
    }

    try {
        const product = await Product.findOne({ _id: productId, sellerId: sellerId });

        if (!product) {
            req.flash('error_msg', 'Product not found or access denied.');
            return res.status(404).redirect('/seller/products');
         }

         product.name = name.trim();
         product.category = category.trim();
         product.shortDescription = shortDescription ? shortDescription.trim() : undefined;
         product.price = Number(price);
         product.stock = Number(stock);
         product.imageUrl = imageUrl.trim();
         product.imageUrl2 = imageUrl2 ? imageUrl2.trim() : undefined;
         product.specifications = specifications ? specifications.trim() : '';
         product.reviewStatus = 'pending';
         product.rejectionReason = undefined;

         await product.save();
         console.log(`Product ${productId} updated by seller, set to pending review.`);

        reviewProductWithGemini(product).then(async reviewResult => {
             try {
                 const productToUpdate = await Product.findById(product._id);
                 if (productToUpdate) {
                    productToUpdate.reviewStatus = reviewResult.status;
                    productToUpdate.rejectionReason = reviewResult.reason;
                    await productToUpdate.save();
                    console.log(`Product ${product._id} review status updated to ${reviewResult.status} after edit.`);
                 }
             } catch (updateError) {
                console.error(`Error updating product ${product._id} after Gemini review (post-edit):`, updateError);
             }
        }).catch(reviewError => {
             console.error(`Error in Gemini review promise chain for edited product ${product._id}:`, reviewError);
              Product.findByIdAndUpdate(product._id, { reviewStatus: 'pending', rejectionReason: 'AI review process failed after edit.' }).catch(err => console.error("Failed to mark edited product as pending after review error:", err));
         });

         req.flash('success_msg', `Product "${product.name}" updated and resubmitted for review.`);
         res.redirect('/seller/products');

    } catch (error) {
         if (error.name === 'ValidationError') {
            let errors = Object.values(error.errors).map(el => el.message);
             req.flash('error_msg', `Validation Error: ${errors.join(' ')}`);
              try { const originalProduct = await Product.findOne({ _id: productId, sellerId: sellerId }).lean(); renderOptions.product = { ...originalProduct, ...req.body }; } catch (fetchErr) { console.error("Error refetching product on update validation fail:", fetchErr); }
             return res.render('seller/edit-product', renderOptions);
         }
         console.error("Error updating product:", error);
         next(error);
     }
 };

exports.removeProduct = async (req, res, next) => {
    const productId = req.params.id;
    const sellerId = req.session.user._id;

    try {
         const product = await Product.findOneAndDelete({ _id: productId, sellerId: sellerId });

        if (!product) {
             req.flash('error_msg', 'Product not found or already removed.');
             return res.status(404).redirect('/seller/products');
         }
         req.flash('success_msg', `Product "${product.name}" removed successfully.`);
         res.redirect('/seller/products');
    } catch (error) {
        if (error.name === 'CastError') {
             req.flash('error_msg', 'Invalid product ID format.');
            return res.status(400).redirect('/seller/products');
        }
        console.error("Error removing product:", error);
        req.flash('error_msg', 'Error removing product.');
        res.redirect('/seller/products');
    }
};

exports.getManageOrdersPage = async (req, res, next) => {
    try {
        const sellerId = req.session.user._id;

        const sellerProductRefs = await Product.find({ sellerId: sellerId }).select('_id').lean();
        const sellerProductIds = sellerProductRefs.map(p => p._id);

        if (sellerProductIds.length === 0) {
             return res.render('seller/manage-orders', {
                 title: 'Manage Your Orders',
                 orders: [],
                 message: 'You have no products listed, so no orders to manage yet.',
                 sellerCancellationReasons: sellerCancellationReasons
             });
        }

        // Find orders containing ANY of the seller's products
        const orders = await Order.find({ 'products.productId': { $in: sellerProductIds } })
                                   .sort({ orderDate: -1 })
                                   .populate('products.productId', 'name imageUrl _id price sellerId')
                                   .populate('userId', 'name email')
                                   .lean();

        const now = Date.now();
        orders.forEach(order => {
             // Mark if the order is relevant (already guaranteed by query, but good for clarity)
             order.isRelevantToSeller = true;
             // Conditions for seller actions
             order.canBeDirectlyDeliveredBySeller = order.status === 'Pending';
             order.canBeCancelledBySeller = order.status === 'Pending';

             order.showDeliveryOtp = order.status === 'Pending' &&
                                     !!order.orderOTP &&
                                     !!order.orderOTPExpires &&
                                     new Date(order.orderOTPExpires).getTime() > now;

            // Create summary, highlighting seller's items
            if (order.products && order.products.length > 0) {
                order.itemsSummary = order.products.map(p => {
                    const isSellerItem = p.productId?.sellerId?.toString() === sellerId.toString();
                    const price = (p.priceAtOrder !== undefined && p.priceAtOrder !== null) ? p.priceAtOrder : (p.productId?.price ?? 0);
                    const productName = p.productId?.name || p.name || '[Product Name Missing]';
                    // Highlight seller's item
                    return `${isSellerItem ? '<strong class="text-success">' : ''}${productName} (Qty: ${p.quantity}) @ ₹${price.toFixed(2)}${isSellerItem ? ' (Your Item)</strong>' : ''}`;
                }).join('<br>');
            } else {
                 order.itemsSummary = 'No items found';
            }
        });
        res.render('seller/manage-orders', {
            title: 'Manage Your Orders',
            orders: orders,
            message: null,
            sellerCancellationReasons: sellerCancellationReasons
        });
    } catch (error) {
        next(error);
    }
};

exports.sendDirectDeliveryOtpBySeller = async (req, res, next) => {
    const { orderId } = req.params;
    const sellerId = req.session.user._id;

    try {
        // Basic check before calling the service function
        const order = await Order.findById(orderId).select('status'); // Select minimal field
        if (!order) throw new Error("Order not found.");
        if (order.status !== 'Pending') throw new Error(`Cannot send OTP for order status ${order.status}.`);

        // isOrderRelevantToSeller middleware already checked relevance
        const result = await generateAndSendDirectDeliveryOTPBySeller(orderId, sellerId);
        req.flash('success_msg', result.message + ' Ask customer for OTP.');
    } catch (error) {
        req.flash('error_msg', `Failed to send delivery OTP: ${error.message}`);
    }
    res.redirect('/seller/orders');
};

exports.confirmDirectDeliveryBySeller = async (req, res, next) => {
    const { orderId } = req.params;
    const { otp } = req.body;
    const sellerId = req.session.user._id;

    if (!otp || !/^\d{6}$/.test(otp.trim())) {
        req.flash('error_msg', 'Please enter the 6-digit OTP.');
        return res.redirect('/seller/orders');
    }

    try {
         // isOrderRelevantToSeller middleware already checked relevance
         const { order } = await confirmDirectDeliveryBySeller(orderId, sellerId, otp.trim(), res);
        req.flash('success_msg', `Order ${orderId} confirmed delivered by you.`);
    } catch (error) {
        req.flash('error_msg', `Delivery confirmation failed: ${error.message}`);
    }
    res.redirect('/seller/orders');
};

exports.cancelOrderBySeller = async (req, res, next) => {
    const { orderId } = req.params;
    const { reason } = req.body;
    const sellerId = req.session.user._id;
    const sellerEmail = req.session.user.email;

    if (!reason || !sellerCancellationReasons.includes(reason)) {
        req.flash('error_msg', 'Please select a valid seller reason for cancellation.');
        return res.redirect('/seller/orders');
    }

    const sessionDB = await mongoose.startSession();
    sessionDB.startTransaction();
    try {
        // isOrderRelevantToSeller middleware ensures relevance
        const order = await Order.findById(orderId)
                                .populate('products.productId', 'sellerId name _id')
                                // *** Populate user name for email ***
                                .populate('userId', 'email name')
                                .session(sessionDB);

        if (!order) { // Should not happen if middleware worked, but good check
            await sessionDB.abortTransaction(); sessionDB.endSession();
            req.flash('error_msg', 'Order not found.');
            return res.status(404).redirect('/seller/orders');
        }

        if (order.status !== 'Pending') {
            await sessionDB.abortTransaction(); sessionDB.endSession();
            req.flash('error_msg', `Order status is '${order.status}'. Only 'Pending' orders can be cancelled by seller.`);
            return res.redirect('/seller/orders');
        }

        console.log(`Seller Cancel: Restoring stock for seller ${sellerId}'s items in order ${orderId}.`);
        const productStockRestorePromises = order.products
            .filter(item => item.productId?.sellerId?.toString() === sellerId.toString()) // Filter only seller's items
            .map(item => {
                const quantityToRestore = Number(item.quantity);
                 if (!item.productId?._id || isNaN(quantityToRestore) || quantityToRestore <= 0) {
                    console.warn(`Seller Cancel: Invalid P.ID ${item.productId?._id} or Qty ${item.quantity} for seller's item in O.ID ${orderId}. Skipping restore.`);
                    return Promise.resolve();
                }
                console.log(`Seller Cancel: Restoring ${quantityToRestore} stock for P.ID ${item.productId._id}`);
                 // Restore stock AND decrement order count for the specific product
                 return Product.updateOne(
                     { _id: item.productId._id },
                     { $inc: { stock: quantityToRestore, orderCount: -1 } }, // Also decrement orderCount
                     { session: sessionDB }
                 ).catch(err => {
                    console.error(`Seller Cancel: Failed stock/count restore P.ID ${item.productId._id} O.ID ${orderId}: ${err.message}`);
                 });
            });

        await Promise.allSettled(productStockRestorePromises);
        console.log(`Seller Cancel: Stock restoration attempts completed for seller ${sellerId} in order ${orderId}.`);

        // Set order status to Cancelled - This applies to the whole order
        order.status = 'Cancelled';
        order.cancellationReason = `Cancelled by Seller: ${reason}`;
        // Clear OTP fields (handled by pre-save hook as well)
        order.orderOTP = undefined;
        order.orderOTPExpires = undefined;
        order.cancellationAllowedUntil = undefined;

        await order.save({ session: sessionDB });

        await sessionDB.commitTransaction();

        // *** UPDATED: Send Cancellation Email to Customer using template ***
        try {
            const customerEmail = order.userEmail || order.userId?.email;
            // *** Use populated name or fallback ***
            const customerName = order.shippingAddress.name || order.userId?.name || 'Customer';
            if(customerEmail) {
                const subjectCust = `Update on Your miniapp Order #${order._id}`;
                const textCust = `Unfortunately, your order (${order._id}) has been cancelled by the seller. Reason: ${reason}. Contact support for questions.`;
                const htmlCust = generateEmailHtml({
                    recipientName: customerName,
                    subject: subjectCust,
                    greeting: `Regarding Your Order #${order._id}`,
                    bodyLines: [
                        `We are writing to inform you that item(s) in your order (#${order._id}) had to be cancelled by the seller.`,
                        `<strong>Reason:</strong> ${reason}`, // Use the seller's reason
                        `If any payment was made for the cancelled items, a refund will be processed according to our policy.`,
                        `We apologize for any inconvenience. Please contact support if you have questions.`
                    ],
                    buttonUrl: `${req.protocol}://${req.get('host')}/orders/my-orders`,
                    buttonText: 'View My Orders',
                    companyName: 'miniapp'
                });
                await sendEmail(customerEmail, subjectCust, textCust, htmlCust);
            } else {
                console.warn(`Seller Cancel: Could not find customer email for order ${orderId} notification.`);
            }
        } catch (emailError) {
            console.error(`Seller Cancel: Failed sending cancellation email for order ${order._id}:`, emailError);
        }
        // *** END UPDATE ***

        req.flash('success_msg', `Order ${orderId} cancelled successfully. Reason: ${reason}. Customer notified.`);
        res.redirect('/seller/orders');

    } catch (error) {
        if(sessionDB.inTransaction()) {
            await sessionDB.abortTransaction();
        }
        console.error(`Error cancelling order ${orderId} by seller ${sellerEmail} (${sellerId}):`, error);
        req.flash('error_msg', 'Failed to cancel order due to an internal error.');
        res.redirect('/seller/orders');
    } finally {
        if (sessionDB && sessionDB.endSession) {
            sessionDB.endSession();
        }
    }
};

middleware/authMiddleware.js:
const User = require('../models/User');

const isAuthenticated = (req, res, next) => {
    if (req.session && req.session.user) {
        User.findById(req.session.user._id).then(user => {
            if (!user) {
                req.session.destroy(err => {
                    if (err) {
                        console.error('Session destruction error:', err);
                        return next(err);
                    }
                    req.flash('error_msg', 'Session expired or user not found. Please login again.');
                    res.redirect('/auth/login');
                });
            } else {
                req.user = user;
                res.locals.currentUser = user;
                next();
            }
        }).catch(err => {
            console.error("Error checking user authentication:", err);
            req.flash('error_msg', 'An error occurred during authentication.');
            res.redirect('/auth/login');
        });
    } else {
        req.flash('error_msg', 'You must be logged in to view this page.');
        req.session.returnTo = req.originalUrl;
        res.redirect('/auth/login');
    }
};

module.exports = { isAuthenticated };


middleware/errorMiddleware.js:
const notFound = (req, res, next) => {
  const error = new Error(`Not Found - ${req.originalUrl}`);
  res.status(404);
  next(error);
};

const errorHandler = (err, req, res, next) => {
  let statusCode = res.statusCode === 200 ? 500 : res.statusCode;
  let message = err.message;

  if (err.name === 'CastError' && err.kind === 'ObjectId') {
    statusCode = 404;
    message = 'Resource not found';
  }
   if (err.name === 'ValidationError') {
       statusCode = 400;
       const errors = Object.values(err.errors).map(el => el.message);
       message = `Validation Error: ${errors.join(', ')}`;
   }
    if (err.code === 11000) {
       statusCode = 400;
       message = `Duplicate field value entered: ${Object.keys(err.keyValue)} already exists.`;
    }


  console.error("ERROR STACK: ", err.stack);

  if (req.accepts('html')) {
      res.status(statusCode).render('error', {
          title: 'Error',
          message: message,
          stack: process.env.NODE_ENV === 'development' ? err.stack : null,
          statusCode: statusCode
      });
  } else {
      res.status(statusCode).json({
          message: message,
          stack: process.env.NODE_ENV === 'development' ? err.stack : null,
      });
  }
};

module.exports = { notFound, errorHandler };


middleware/roleMiddleware.js:
// middleware/roleMiddleware.js
const Product = require('../models/Product');
const Order = require('../models/Order');
const mongoose = require('mongoose');

const isAdmin = (req, res, next) => {
  // Ensure user exists and has the 'admin' role
  if (req.session.user && req.session.user.role === 'admin') {
    return next(); // Use return to avoid executing further code
  } else {
    req.flash('error_msg', 'Access Denied: Admin privileges required.');
    return res.status(403).redirect('/'); // Use return
  }
};

// *** NEW: Middleware to check if user is a seller ***
const isSeller = (req, res, next) => {
  if (req.session.user && req.session.user.role === 'seller') {
    return next();
  } else {
    req.flash('error_msg', 'Access Denied: Seller privileges required.');
    return res.status(403).redirect('/');
  }
};

// *** NEW: Middleware to check if user is admin OR seller ***
const isAdminOrSeller = (req, res, next) => {
   if (req.session.user && (req.session.user.role === 'admin' || req.session.user.role === 'seller')) {
     return next();
   } else {
     req.flash('error_msg', 'Access Denied: Admin or Seller privileges required.');
     return res.status(403).redirect('/');
   }
};


// *** NEW: Middleware to check if the product belongs to the logged-in seller ***
// Apply this AFTER isAuthenticated and isSeller
const isProductOwner = async (req, res, next) => {
    const productId = req.params.id || req.params.productId; // Check common param names
    const sellerId = req.session.user._id;

    if (!mongoose.Types.ObjectId.isValid(productId)) {
         req.flash('error_msg', 'Invalid Product ID format.');
         return res.status(400).redirect('back'); // Redirect back if possible
    }

    try {
        const product = await Product.findById(productId).select('sellerId').lean(); // Only fetch sellerId

        if (!product) {
            req.flash('error_msg', 'Product not found.');
            return res.status(404).redirect('back');
        }

        if (product.sellerId.toString() !== sellerId.toString()) {
            req.flash('error_msg', 'Access Denied: You do not own this product.');
            return res.status(403).redirect('/seller/products'); // Redirect to their products page
        }

        // Attach product briefly for potential use later? Maybe not necessary.
        // req.product = product;
        next();
    } catch (error) {
         console.error("Error in isProductOwner middleware:", error);
         // Handle CastError specifically if lean() is removed or select changes
         if (error.name === 'CastError') {
             req.flash('error_msg', 'Invalid Product ID format.');
             return res.status(400).redirect('back');
         }
         req.flash('error_msg', 'An error occurred while verifying product ownership.');
         return res.status(500).redirect('back');
    }
};


// *** NEW: Middleware to check if an order contains products relevant to the logged-in seller ***
// Apply this AFTER isAuthenticated and isSeller
const isOrderRelevantToSeller = async (req, res, next) => {
    const orderId = req.params.orderId || req.params.id;
    const sellerId = req.session.user._id;

     if (!mongoose.Types.ObjectId.isValid(orderId)) {
         req.flash('error_msg', 'Invalid Order ID format.');
         return res.status(400).redirect('back');
    }

    try {
        // 1. Find products sold by this seller
        const sellerProductIds = await Product.find({ sellerId: sellerId }, '_id').lean();
        const sellerProductIdStrings = sellerProductIds.map(p => p._id.toString());

        if (sellerProductIdStrings.length === 0) {
             req.flash('error_msg', 'Access Denied: You have no products listed.');
             return res.status(403).redirect('/seller/orders');
        }

        // 2. Find the order and check if any product matches the seller's products
        // We only need to know IF there's a match, not the full order details yet
        const order = await Order.findOne({
            _id: orderId,
            'products.productId': { $in: sellerProductIdStrings.map(id => new mongoose.Types.ObjectId(id)) } // Convert back to ObjectId for query
        }).select('_id').lean(); // Select minimal field

        if (!order) {
            req.flash('error_msg', 'Order not found or does not contain your products.');
            return res.status(404).redirect('/seller/orders');
        }

        // Order is relevant
        next();

    } catch (error) {
        console.error("Error in isOrderRelevantToSeller middleware:", error);
         if (error.name === 'CastError') {
             req.flash('error_msg', 'Invalid ID format encountered.');
             return res.status(400).redirect('back');
         }
        req.flash('error_msg', 'An error occurred while verifying order relevance.');
        return res.status(500).redirect('back');
    }
};

module.exports = {
    isAdmin,
    isSeller,         // Export new middleware
    isAdminOrSeller,  // Export new middleware
    isProductOwner,   // Export new middleware
    isOrderRelevantToSeller // Export new middleware
};

models/BannerConfig.js:
// models/BannerConfig.js
const mongoose = require('mongoose');

const BannerSchema = new mongoose.Schema({
  imageUrl: { type: String, trim: true, required: true },
  linkUrl: { type: String, trim: true }, // Optional: URL to navigate to when banner is clicked
  title: { type: String, trim: true }, // Optional: Title/Alt text for the banner
}, { _id: false }); // Don't need separate IDs for each banner item in the array

const BannerConfigSchema = new mongoose.Schema({
  // Using a known key to ensure we only have one document (singleton pattern)
  configKey: {
    type: String,
    default: 'mainBanners',
    unique: true, // Enforces only one banner config document
    required: true,
  },
  banners: {
    type: [BannerSchema],
    validate: [arrayLimit, '{PATH} exceeds the limit of 4 banners'] // Custom validator
  },
  lastUpdatedBy: { // Track who last updated it
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }
}, {
  timestamps: true // Adds createdAt and updatedAt
});

// Custom validator function for array limit
function arrayLimit(val) {
  return val.length <= 4;
}

const BannerConfig = mongoose.model('BannerConfig', BannerConfigSchema);

module.exports = BannerConfig;

models/Order.js:
// models/Order.js
const mongoose = require('mongoose');

const OrderProductSchema = new mongoose.Schema({
    productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
    name: { type: String, required: true },
    priceAtOrder: { type: Number, required: true },
    quantity: { type: Number, required: true, min: 1 },
    imageUrl: { type: String },
    sellerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
}, { _id: false });

const OrderAddressSchema = new mongoose.Schema({
    name: { type: String, trim: true, required: true },
    phone: { type: String, trim: true, required: true },
    pincode: { type: String, trim: true, required: true },
    // **** ADD LOCALITY ****
    locality: { type: String, trim: true, required: true }, // Selected from dropdown
    // **** END LOCALITY ****
    cityVillage: { type: String, trim: true, required: true }, // For House No / Building / Area
    landmarkNearby: { type: String, trim: true }, // Optional Landmark
    mandal: { type: String, trim: true },     // Derived from pincode lookup
    district: { type: String, trim: true },   // Derived from pincode lookup
    state: { type: String, trim: true },      // Derived from pincode lookup
}, { _id: false });


const OrderSchema = new mongoose.Schema({
    userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true,
    },
    userEmail: {
        type: String,
        required: true,
        lowercase: true,
        trim: true,
    },
    products: [OrderProductSchema],
    totalAmount: {
        type: Number,
        required: true,
        min: 0,
    },
    shippingAddress: {
        type: OrderAddressSchema, // Now includes the locality field
        required: true
    },
    paymentMethod: {
        type: String,
        enum: ['COD'],
        required: true,
        default: 'COD',
    },
    status: {
        type: String,
        enum: ['Pending', 'Delivered', 'Cancelled'],
        default: 'Pending',
    },
    orderDate: {
        type: Date,
        default: Date.now,
    },
    receivedByDate: {
        type: Date,
    },
    orderOTP: String,
    orderOTPExpires: Date,
    cancellationAllowedUntil: {
        type: Date,
    },
    cancellationReason: {
        type: String,
        trim: true,
    }
}, {
    timestamps: true
});

OrderSchema.pre('save', function(next) {
    if (this.isNew && !this.cancellationAllowedUntil) {
        const now = this.orderDate || Date.now();
        this.cancellationAllowedUntil = new Date(now.getTime() + 60 * 60 * 1000); // 1 hour
    }

    // Clear OTP and related fields on cancellation or delivery
    if (this.isModified('status') && (this.status === 'Cancelled' || this.status === 'Delivered')) {
        this.orderOTP = undefined;
        this.orderOTPExpires = undefined;
        this.cancellationAllowedUntil = undefined; // Disable cancellation
        if (this.status === 'Cancelled') {
            this.receivedByDate = undefined; // Clear received date if cancelled
        }
    }
     // Also clear OTP if status changes FROM Pending to something else (but might be redundant with above)
     if (this.isModified('status') && this.status !== 'Pending') {
        this.orderOTP = undefined;
        this.orderOTPExpires = undefined;
    }

    next();
});

const Order = mongoose.model('Order', OrderSchema);

module.exports = Order;

models/Product.js:
// models/Product.js
const mongoose = require('mongoose');
const { categoryNames } = require('../config/categories');

const RatingSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    rating: { type: Number, required: true, min: 1, max: 5 },
    comment: { type: String, trim: true },
}, { _id: false, timestamps: true });


const ProductSchema = new mongoose.Schema({
    name: {
        type: String,
        required: [true, 'Please provide a product name'],
        trim: true,
        index: true
    },
    shortDescription: {
        type: String,
        trim: true,
        maxlength: 200
    },
    category: {
        type: String,
        required: [true, 'Please select a product category'],
        trim: true,
        index: true,
        enum: {
            values: categoryNames,
            message: '{VALUE} is not a supported category.'
        }
    },
    price: {
        type: Number,
        required: [true, 'Please provide a product price'],
        min: 0,
    },
    stock: {
        type: Number,
        required: [true, 'Please provide product stock quantity'],
        min: 0,
        default: 0,
    },
    imageUrl: { // First (required) image
        type: String,
        required: [true, 'Please provide a product image URL'],
        trim: true,
    },
    // --- UPDATED: Added imageUrl2 ---
    imageUrl2: { // Second (optional) image
        type: String,
        trim: true,
    },
    // --- END UPDATED ---
    specifications: {
        type: String,
        trim: true,
    },
    sellerId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true,
        index: true
    },
    sellerEmail: {
        type: String,
        required: true,
        lowercase: true,
        trim: true,
    },
    ratings: [RatingSchema],
    averageRating: {
      type: Number,
      default: 0,
    },
    numReviews: {
        type: Number,
        default: 0,
    },
    orderCount: {
        type: Number,
        default: 0,
    },
    reviewStatus: {
        type: String,
        enum: ['pending', 'approved', 'rejected'],
        default: 'pending',
        index: true
    },
    rejectionReason: {
        type: String,
        trim: true
    }
}, {
    timestamps: true
});

// Pre-save hook remains the same
ProductSchema.pre('save', function(next) {
    if (this.isModified('ratings')) {
        if (this.ratings && this.ratings.length > 0) {
            this.numReviews = this.ratings.length;
            this.averageRating = this.ratings.reduce((acc, item) => item.rating + acc, 0) / this.ratings.length;
        } else {
            this.numReviews = 0;
            this.averageRating = 0;
        }
    }

    if (this.isModified('reviewStatus') && this.reviewStatus !== 'rejected') {
        this.rejectionReason = undefined;
    }
    next();
});

ProductSchema.index({ name: 'text', category: 'text', specifications: 'text' });


const Product = mongoose.model('Product', ProductSchema);

module.exports = Product;

models/User.js:
// models/User.js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const AddressSchema = new mongoose.Schema({
    name: { type: String, trim: true },
    phone: { type: String, trim: true },
    pincode: { type: String, trim: true },
    // **** ADD LOCALITY ****
    locality: { type: String, trim: true }, // Selected from dropdown
    // **** END LOCALITY ****
    cityVillage: { type: String, trim: true }, // For House No / Building / Area
    landmarkNearby: { type: String, trim: true }, // Optional Landmark
    mandal: { type: String, trim: true },     // Derived from pincode lookup
    district: { type: String, trim: true },   // Derived from pincode lookup
    state: { type: String, trim: true },      // Derived from pincode lookup
}, { _id: false });

const CartItemSchema = new mongoose.Schema({
    productId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Product',
        required: true,
    },
    quantity: {
        type: Number,
        required: true,
        min: 1,
        default: 1,
    }
}, { _id: false });

const UserSchema = new mongoose.Schema({
    name: {
        type: String,
        required: [true, 'Please provide your name'],
        trim: true,
    },
    email: {
        type: String,
        required: [true, 'Please provide your email'],
        unique: true,
        match: [
            /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/,
            'Please provide a valid email address',
        ],
        lowercase: true,
        trim: true,
    },
    password: {
        type: String,
        required: [true, 'Please provide a password'],
        minlength: [8, 'Password must be at least 8 characters long'], // <-- INCREASED MIN LENGTH VALIDATION
        select: false, // Keep password hidden by default
    },
    role: {
        type: String,
        enum: ['user', 'admin', 'seller'],
        default: 'user',
    },
    isVerified: {
        type: Boolean,
        default: false,
    },
    otp: { type: String },
    otpExpires: { type: Date },
    address: AddressSchema, // Contains the new fields now
    cart: [CartItemSchema],

    resetPasswordToken: String,
    resetPasswordExpires: Date,
}, {
    timestamps: true
});

// Hash password before saving
UserSchema.pre('save', async function(next) {
    // Only hash the password if it has been modified (or is new)
    if (!this.isModified('password')) return next();

    // Password complexity validation should happen *before* this hook.
    // This hook only handles the hashing.

    try {
        const salt = await bcrypt.genSalt(10);
        this.password = await bcrypt.hash(this.password, salt);
        next();
    } catch (error) {
        next(error); // Pass error to mongoose error handling
    }
});

// Method to compare entered password with hashed password
UserSchema.methods.matchPassword = async function(enteredPassword) {
    // If password field wasn't selected during query, fetch it explicitly
    if (!this.password) {
        // Need to re-fetch the user document including the password field
        const userWithPassword = await mongoose.model('User').findById(this._id).select('+password').exec();
        if (!userWithPassword || !userWithPassword.password) return false; // User not found or no password set
        return await bcrypt.compare(enteredPassword, userWithPassword.password);
    }
    // If password field was already selected
    return await bcrypt.compare(enteredPassword, this.password);
};

const User = mongoose.model('User', UserSchema);

module.exports = User;

public/css/style.css:
/* public/css/style.css */

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

:root {
  /* Core Color Palette */
  --primary-color: #007bff;
  --primary-hover: #0056b3;
  --secondary-color: #6c757d;
  --secondary-hover: #5a6268;
  --success-color: #28a745;
  --success-hover: #218838;
  --danger-color: #dc3545;
  --danger-hover: #c82333;
  --warning-color: #ffc107;
  --warning-hover: #e0a800;
  --info-color: #17a2b8;
  --info-hover: #138496;
  --light-color: #f8f9fa;
  --dark-color: #343a40;

  /* Text & Links */
  --text-color: #333;
  --link-color: var(--primary-color);

  /* Layout & Components */
  --card-bg: #ffffff;
  --card-shadow: 0 2px 5px rgba(0, 0, 0, 0.12);
  --border-color: #dee2e6;
  --border-radius: 0.6rem; /* Smoother corners */
  --spacing-unit: 1rem;

  /* Gradient Background Colors */
  --gradient-start: #e9f1ff;
  --gradient-mid1: #d0e0ff;
  --gradient-mid2: #e0ebf7;
  --gradient-end: #f0f5fd;
}

html {
  font-size: 16px;
  scroll-behavior: smooth;
}

body {
  font-family: 'Roboto', sans-serif;
  line-height: 1.6;
  color: var(--text-color);
  background: linear-gradient(135deg,
      var(--gradient-start) 0%,
      var(--gradient-mid1) 25%,
      var(--gradient-mid2) 55%,
      var(--gradient-end) 100%
    );
  background-attachment: fixed;
  background-size: cover;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

a {
  color: var(--link-color);
  text-decoration: none;
  transition: color 0.2s ease-in-out;
}

a:hover {
  color: var(--primary-hover);
  text-decoration: underline;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
}

h1, h2, h3, h4, h5, h6 {
  margin-bottom: calc(var(--spacing-unit) * 0.75);
  line-height: 1.3;
  font-weight: 500;
}

p {
  margin-bottom: var(--spacing-unit);
}

ul, ol {
    margin-bottom: var(--spacing-unit);
    padding-left: calc(var(--spacing-unit) * 1.5);
}

/* Utility Classes */
.hidden { display: none !important; }
.hide { display: none !important; } /* Alias */
.text-center { text-align: center; }
.text-danger { color: var(--danger-color) !important; }
.text-success { color: var(--success-color) !important; }
.text-warning { color: var(--warning-color) !important; }
.text-info { color: var(--info-color) !important; }
.text-muted { color: var(--secondary-color) !important; }
.mb-1 { margin-bottom: calc(var(--spacing-unit) * 0.25) !important; }
.mb-2 { margin-bottom: calc(var(--spacing-unit) * 0.5) !important; }
.mb-3 { margin-bottom: var(--spacing-unit) !important; }
.mb-4 { margin-bottom: calc(var(--spacing-unit) * 1.5) !important; }
.mt-1 { margin-top: calc(var(--spacing-unit) * 0.25) !important; }
.mt-2 { margin-top: calc(var(--spacing-unit) * 0.5) !important; }
.mt-3 { margin-top: var(--spacing-unit) !important; }
.mt-4 { margin-top: calc(var(--spacing-unit) * 1.5) !important; }
.ms-1 { margin-left: calc(var(--spacing-unit) * 0.25) !important; } /* Margin start */
.ms-2 { margin-left: calc(var(--spacing-unit) * 0.5) !important; }
.me-1 { margin-right: calc(var(--spacing-unit) * 0.25) !important; }
.me-2 { margin-right: calc(var(--spacing-unit) * 0.5) !important; } /* Margin end */
.me-3 { margin-right: var(--spacing-unit) !important; }
.p-1 { padding: calc(var(--spacing-unit) * 0.25) !important; }
.p-2 { padding: calc(var(--spacing-unit) * 0.5) !important; }
.p-3 { padding: var(--spacing-unit) !important; }
.pt-1 { padding-top: calc(var(--spacing-unit) * 0.25) !important; }
.pt-2 { padding-top: calc(var(--spacing-unit) * 0.5) !important; }
.pt-3 { padding-top: var(--spacing-unit) !important; }
.pb-1 { padding-bottom: calc(var(--spacing-unit) * 0.25) !important; }
.pb-2 { padding-bottom: calc(var(--spacing-unit) * 0.5) !important; }
.pb-3 { padding-bottom: var(--spacing-unit) !important; }
.d-flex { display: flex !important; }
.d-inline-flex { display: inline-flex !important; }
.d-block { display: block !important; }
.d-inline-block { display: inline-block !important; }
.align-items-center { align-items: center !important; }
.justify-content-between { justify-content: space-between !important; }
.justify-content-center { justify-content: center !important; }
.flex-wrap { flex-wrap: wrap !important; }
.flex-grow-1 { flex-grow: 1 !important; }
.gap-1 { gap: calc(var(--spacing-unit) * 0.25) !important; }
.gap-2 { gap: calc(var(--spacing-unit) * 0.5) !important; }
.gap-3 { gap: var(--spacing-unit) !important; }
.small { font-size: 0.875em; }
.fs-5 { font-size: 1.25rem !important; }
.w-100 { width: 100% !important; }
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}
.fw-bold { font-weight: bold !important; }
.fw-normal { font-weight: normal !important; }
.fw-light { font-weight: lighter !important; }
.text-capitalize { text-transform: capitalize !important; }
.border { border: 1px solid var(--border-color) !important; }
.border-top { border-top: 1px solid var(--border-color) !important; }
.border-bottom { border-bottom: 1px solid var(--border-color) !important; }
.rounded { border-radius: var(--border-radius) !important; }


/* Forms */
.inline-form {
    display: inline-block;
    margin-bottom: 0;
    vertical-align: middle;
}
.inline-form > * {
    margin-bottom: 0;
    vertical-align: middle;
}
.inline-form + .inline-form {
    margin-left: calc(var(--spacing-unit) * 0.3);
}


.form-group {
  margin-bottom: calc(var(--spacing-unit) * 0.8);
}

label:not(.form-label-inline) {
  display: block;
  margin-bottom: calc(var(--spacing-unit) * 0.3);
  font-weight: 500;
}
label.form-label-inline {
    margin-bottom: 0;
    margin-right: calc(var(--spacing-unit) * 0.4);
    font-weight: normal;
}

/* --- ADDED: Position relative for password wrapper --- */
.password-wrapper {
    position: relative;
}

input[type="text"],
input[type="email"],
input[type="password"],
input[type="tel"],
input[type="url"],
input[type="number"],
input[type="search"],
textarea,
select {
  width: 100%;
  padding: calc(var(--spacing-unit) * 0.6) calc(var(--spacing-unit) * 0.75);
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  font-size: 1rem;
  line-height: 1.5;
  background-color: #fff;
  color: var(--text-color);
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

/* --- ADDED: Padding-right for password input when toggle is present --- */
.password-wrapper input[type="password"],
.password-wrapper input[type="text"] {
    /* Adjust padding-right to make space for the icon */
    padding-right: calc(var(--spacing-unit) * 2.5) !important;
}


.form-control {
    display: block;
    width: 100%;
    padding: calc(var(--spacing-unit) * 0.6) calc(var(--spacing-unit) * 0.75);
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: var(--text-color);
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid var(--border-color);
    appearance: none;
    border-radius: var(--border-radius);
    transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
}

/* Helper text style */
.form-text {
    display: block;
    margin-top: .25rem;
    font-size: .8em; /* Smaller font size */
    color: var(--secondary-color); /* Muted color */
}


input[type="number"] {
    appearance: textfield;
    -moz-appearance: textfield;
}
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

textarea {
  resize: vertical;
  min-height: 80px;
}

input:focus,
textarea:focus,
select:focus,
.form-control:focus {
  border-color: var(--primary-color);
  outline: 0;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.form-control-sm {
  min-height: calc(1.5em + 0.5rem + 2px);
  height: auto;
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
  line-height: 1.5;
  border-radius: calc(var(--border-radius) * 0.75);
}
select.form-control-sm {
  height: calc(1.8125rem + 2px);
}

/* --- ADDED: Password Toggle Icon Button --- */
.password-toggle-btn {
    position: absolute;
    right: 10px; /* Adjust as needed */
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    color: var(--secondary-color); /* Icon color */
    font-size: 1rem; /* Adjust icon size */
    line-height: 1;
    z-index: 10; /* Ensure it's clickable */
}
.password-toggle-btn:hover,
.password-toggle-btn:focus {
    color: var(--primary-color);
    outline: none;
}
.password-toggle-btn i {
    display: block; /* Helps with vertical alignment if needed */
    width: 1em; /* Ensure consistent width for icon change */
    text-align: center;
}


/* Buttons */
.btn {
  display: inline-block;
  font-weight: 400;
  color: #fff;
  text-align: center;
  vertical-align: middle;
  cursor: pointer;
  user-select: none;
  background-color: var(--primary-color);
  border: 1px solid var(--primary-color);
  padding: calc(var(--spacing-unit) * 0.5) var(--spacing-unit);
  font-size: 1rem;
  line-height: 1.5;
  border-radius: var(--border-radius);
  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, opacity 0.15s ease-in-out; /* Added opacity transition */
  text-transform: capitalize;
}

.btn:hover {
  color: #fff;
  text-decoration: none;
  background-color: var(--primary-hover);
  border-color: var(--primary-hover);
}

.btn:focus {
  outline: 0;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);
}

.btn:disabled {
  opacity: 0.65;
  cursor: not-allowed;
  pointer-events: none;
}
.btn.loading {
    opacity: 0.75;
    cursor: wait;
    pointer-events: none;
}

/* --- ADDED: AJAX Add to Cart Button States --- */
.btn-ajax-add-to-cart.loading {
    opacity: 0.7;
    cursor: wait;
    pointer-events: none;
}
.btn-ajax-add-to-cart.success {
    background-color: var(--success-color);
    border-color: var(--success-color);
    color: white;
    pointer-events: none; /* Optionally disable clicks while showing success */
}


.btn-primary { background-color: var(--primary-color); border-color: var(--primary-color); color: #fff;}
.btn-primary:hover { background-color: var(--primary-hover); border-color: var(--primary-hover); }
.btn-secondary { background-color: var(--secondary-color); border-color: var(--secondary-color); color: #fff; }
.btn-secondary:hover { background-color: var(--secondary-hover); border-color: var(--secondary-hover); }
.btn-success { background-color: var(--success-color); border-color: var(--success-color); color: #fff;}
.btn-success:hover { background-color: var(--success-hover); border-color: var(--success-hover); }
.btn-danger { background-color: var(--danger-color); border-color: var(--danger-color); color: #fff;}
.btn-danger:hover { background-color: var(--danger-hover); border-color: var(--danger-hover); }
.btn-warning { background-color: var(--warning-color); border-color: var(--warning-color); color: #212529;}
.btn-warning:hover { background-color: var(--warning-hover); border-color: var(--warning-hover); }
.btn-info { background-color: var(--info-color); border-color: var(--info-color); color: #fff;}
.btn-info:hover { background-color: var(--info-hover); border-color: var(--info-hover); }
.btn-light { background-color: var(--light-color); border-color: var(--light-color); color: #212529;}
.btn-light:hover { background-color: #e2e6ea; border-color: #dae0e5; }
.btn-dark { background-color: var(--dark-color); border-color: var(--dark-color); color: #fff;}
.btn-dark:hover { background-color: #23272b; border-color: #1d2124; }

.btn-outline-secondary { color: var(--secondary-color); border-color: var(--secondary-color); background-color: transparent;}
.btn-outline-secondary:hover { color: #fff; background-color: var(--secondary-color); }
.btn-outline-primary { color: var(--primary-color); border-color: var(--primary-color); background-color: transparent;}
.btn-outline-primary:hover { color: #fff; background-color: var(--primary-color); }

.btn-text {
    background-color: transparent;
    border-color: transparent;
    color: var(--link-color);
    padding: calc(var(--spacing-unit) * 0.25) calc(var(--spacing-unit) * 0.4);
    border-radius: var(--border-radius);
    vertical-align: middle;
}
.btn-text:hover,
.btn-text:focus {
    background-color: rgba(0, 0, 0, 0.05);
    color: var(--primary-hover);
    text-decoration: none;
    outline: none;
    box-shadow: none;
}
.btn-text.btn-danger { color: var(--danger-color); }
.btn-text.btn-danger:hover,
.btn-text.btn-danger:focus { color: var(--danger-hover); background-color: rgba(220, 53, 69, 0.1); }

.btn-sm {
  padding: calc(var(--spacing-unit) * 0.25) calc(var(--spacing-unit) * 0.5);
  font-size: 0.875rem;
  line-height: 1.5;
  border-radius: calc(var(--border-radius) * 0.8);
}
.btn-lg {
    padding: calc(var(--spacing-unit) * 0.75) calc(var(--spacing-unit) * 1.25);
    font-size: 1.1rem;
}

.btn-block {
    display: block;
    width: 100%;
}

.btn .fa-spinner {
    margin-right: calc(var(--spacing-unit) * 0.25);
    animation: fa-spin 1s infinite linear;
}
@keyframes fa-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Alerts */
.alert {
  padding: calc(var(--spacing-unit) * 0.8) var(--spacing-unit);
  margin-bottom: var(--spacing-unit);
  border: 1px solid transparent;
  border-radius: var(--border-radius);
  position: relative;
}
.alert-success { color: #155724; background-color: #d4edda; border-color: #c3e6cb; }
.alert-danger { color: #721c24; background-color: #f8d7da; border-color: #f5c6cb; }
.alert-warning { color: #856404; background-color: #fff3cd; border-color: #ffeeba; }
.alert-info { color: #0c5460; background-color: #d1ecf1; border-color: #bee5eb; }
.alert-link { font-weight: bold; color: inherit; text-decoration: underline; }

.close-alert {
  position: absolute;
  top: 50%;
  right: 10px;
  transform: translateY(-50%);
  font-size: 1.2rem;
  line-height: 1;
  background: none;
  border: none;
  color: inherit;
  opacity: 0.7;
  cursor: pointer;
  padding: 0.2rem 0.4rem;
}
.close-alert:hover { opacity: 1; }

/* Toast Notifications */
.toast-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1055;
  width: auto;
  max-width: 350px;
  pointer-events: none;
}

.toast {
  background-color: var(--card-bg);
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: var(--border-radius);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  margin-bottom: var(--spacing-unit);
  padding: calc(var(--spacing-unit) * 0.75);
  padding-right: calc(var(--spacing-unit) * 2.5);
  position: relative;
  opacity: 0;
  transform: translateX(110%);
  transition: opacity 0.4s ease-in-out, transform 0.4s ease-in-out;
  width: 100%;
  pointer-events: auto;
  min-height: 50px;
  display: flex;
  align-items: center;
  overflow: hidden;
}

.toast.show {
  opacity: 1;
  transform: translateX(0);
}

.toast.hide {
    opacity: 0;
    transition: opacity 0.3s ease-in, transform 0.3s ease-in;
}

.toast-body {
  flex-grow: 1;
  font-size: 0.9rem;
  line-height: 1.4;
}

.toast-close-btn {
  position: absolute;
  top: 50%;
  right: 15px;
  transform: translateY(-50%);
  background: transparent;
  border: none;
  font-size: 1.4rem;
  line-height: 1;
  font-weight: bold;
  color: inherit;
  opacity: 0.6;
  cursor: pointer;
  padding: 0.1rem 0.4rem;
}
.toast-close-btn:hover {
  opacity: 1;
  text-decoration: none;
}

.toast-success { background-color: #d4edda; color: #155724; border-left: 5px solid var(--success-color); }
.toast-success .toast-close-btn { color: #155724; }
.toast-danger { background-color: #f8d7da; color: #721c24; border-left: 5px solid var(--danger-color); }
.toast-danger .toast-close-btn { color: #721c24; }
.toast-warning { background-color: #fff3cd; color: #856404; border-left: 5px solid var(--warning-color); }
.toast-warning .toast-close-btn { color: #856404; }
.toast-info { background-color: #d1ecf1; color: #0c5460; border-left: 5px solid var(--info-color); }
.toast-info .toast-close-btn { color: #0c5460; }


/* ============================ */
/* Header Styles                */
/* ============================ */

.app-header {
  background-color: var(--primary-color);
  color: var(--light-color);
  padding: calc(var(--spacing-unit) * 0.4) var(--spacing-unit);
  position: sticky;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 1000;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 1200px;
  margin: 0 auto;
  gap: calc(var(--spacing-unit) * 0.5);
  min-height: 40px;
}

/* Left Side (Logo) */
.nav-left {
  display: flex;
  align-items: center;
  flex-shrink: 0;
  margin-right: auto;
}

.app-logo {
  display: flex;
  align-items: center;
  color: var(--light-color);
  font-size: 1.1rem;
  font-weight: 500;
  text-decoration: none;
  margin-right: calc(var(--spacing-unit) * 0.5);
}
.app-logo:hover,
.app-logo:focus {
  color: var(--warning-color);
  text-decoration: none;
}
.app-logo i {
  margin-right: calc(var(--spacing-unit) * 0.3);
  font-size: 1.2em;
}

/* Center Section (Search Container) */
.search-container-dynamic {
  flex-grow: 0;
  max-width: none;
  order: 1;
  margin: 0;
  position: static;
}

/* --- Search Bar Black & White Styling (Shared) --- */
.search-form-dynamic {
  display: flex;
  align-items: center;
  width: 100%;
  height: 38px;
  background-color: #ffffff;
  border: 1px solid #ccc;
  border-radius: var(--border-radius);
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
  overflow: hidden;
  color: var(--dark-color);
}
#search-input-dynamic {
  flex-grow: 1;
  padding: 0 calc(var(--spacing-unit) * 0.75);
  border: none;
  background-color: transparent;
  color: var(--dark-color);
  font-size: 0.9rem;
  height: 100%;
  outline: none;
}
#search-input-dynamic::placeholder {
  color: #6c757d;
  opacity: 1;
}
.search-submit-btn-dynamic {
  background: transparent;
  border: none;
  color: var(--dark-color);
  padding: 0 calc(var(--spacing-unit) * 0.75);
  cursor: pointer;
  font-size: 1rem;
  height: 100%;
  display: flex;
  align-items: center;
  flex-shrink: 0;
  transition: background-color 0.15s ease-in-out;
}
.search-submit-btn-dynamic:hover {
  background-color: rgba(0, 0, 0, 0.05);
}
/* --- End Shared Search Bar Styling --- */

/* Suggestions Dropdown (Shared) */
.suggestions-dropdown {
    display: none;
    position: absolute;
    left: 0;
    right: 0;
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    border-top: none;
    border-radius: 0 0 var(--border-radius) var(--border-radius);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    max-height: 400px;
    overflow-y: auto;
    z-index: 1010;
}
.suggestions-dropdown.active { display: block; }
.suggestion-item {
    display: flex;
    align-items: center;
    padding: calc(var(--spacing-unit) * 0.5) calc(var(--spacing-unit) * 0.75);
    cursor: pointer;
    color: var(--text-color);
    text-decoration: none;
    border-bottom: 1px solid var(--border-color);
    gap: calc(var(--spacing-unit) * 0.5);
}
.suggestion-item:last-child { border-bottom: none; }
.suggestion-item:hover,
.suggestion-item:focus {
    background-color: var(--light-color);
    text-decoration: none;
    color: var(--text-color);
}
.suggestion-item img {
    width: 35px;
    height: 35px;
    object-fit: cover;
    border-radius: calc(var(--border-radius) * 0.75);
    flex-shrink: 0;
}
.suggestion-item span {
    font-size: 0.9rem;
    line-height: 1.3;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}
.suggestion-item i {
    font-style: normal;
    color: var(--secondary-color);
}


/* Right Side (Nav Links, Profile, Login) */
.nav-right {
  display: flex;
  align-items: center;
  flex-shrink: 0;
  gap: calc(var(--spacing-unit) * 0.4);
}

/* General Nav Link Styling (Mobile Base) */
.nav-link {
  color: var(--light-color);
  padding: calc(var(--spacing-unit) * 0.5) calc(var(--spacing-unit) * 0.6);
  border-radius: var(--border-radius);
  display: flex;
  flex-direction: column;
  align-items: center;
  font-size: 0.7rem;
  text-decoration: none;
  background: none;
  border: none;
  cursor: pointer;
  transition: background-color 0.2s ease;
  line-height: 1.2;
}
.nav-link span { display: none; }
.nav-link i { font-size: 1.2rem; margin-bottom: 2px; }

.nav-link:hover,
.nav-link.active,
.nav-link:focus {
  background-color: rgba(255, 255, 255, 0.15);
  color: #fff;
  text-decoration: none;
  outline: none;
}

/* Cart Badge */
.nav-link-cart { position: relative; }
.cart-badge {
  position: absolute;
  top: 0px;
  right: 0px;
  background-color: var(--danger-color);
  color: white;
  border-radius: 50%;
  padding: 1px 5px;
  font-size: 0.7rem;
  font-weight: bold;
  line-height: 1;
  pointer-events: none;
}
.cart-badge.hide { display: none; }

/* Login/Register Button */
.btn-login-register {
    font-size: 0.85rem;
    padding: calc(var(--spacing-unit) * 0.4) calc(var(--spacing-unit) * 0.8);
    background-color: rgba(255, 255, 255, 0.9);
    color: var(--primary-color);
    border: none;
    font-weight: 500;
}
.btn-login-register:hover,
.btn-login-register:focus {
    background-color: #fff;
    color: var(--primary-hover);
}
.btn-login-register i {
    margin-right: calc(var(--spacing-unit) * 0.3);
}


/* Profile Avatar */
.profile-avatar-link {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background-color: var(--light-color);
    color: var(--primary-color);
    font-weight: 500;
    font-size: 0.9rem;
    text-decoration: none;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    border: 1px solid transparent;
    margin-left: calc(var(--spacing-unit) * 0.2);
}
.profile-avatar-link:hover,
.profile-avatar-link:focus,
.profile-avatar-link.active {
    text-decoration: none;
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3);
    outline: none;
}
.profile-avatar-initials { line-height: 1; }

/* Mobile Search Toggle Button */
.search-toggle-btn {
    display: flex;
    order: 0;
}

/* Container and Footer */
.container {
  width: 100%;
  padding: var(--spacing-unit);
  margin: 0 auto;
  flex-grow: 1;
}

.app-footer {
  display: none;
  padding: var(--spacing-unit);
  text-align: center;
  font-size: 0.85rem;
  color: var(--secondary-color);
  background-color: rgba(248, 249, 250, 0.9);
  border-top: 1px solid var(--border-color);
  margin-top: auto;
}


/* Product Index */
.product-index-container h1 { font-size: 1.5rem; }

.product-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: calc(var(--spacing-unit) * 0.75);
}

.product-card {
  background-color: var(--card-bg);
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  box-shadow: var(--card-shadow);
  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}
.product-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.product-link {
  color: inherit;
  text-decoration: none;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}
.product-link:hover{
  color: inherit;
  text-decoration: none;
}

.product-image {
  width: 100%;
  aspect-ratio: 1 / 1;
  object-fit: cover;
}

.product-info {
  padding: calc(var(--spacing-unit) * 0.6);
  flex-grow: 1;
}

.product-name {
  font-size: 0.95rem;
  font-weight: 500;
  margin-bottom: calc(var(--spacing-unit) * 0.25);
  line-height: 1.3;
  height: 2.6em;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}

.product-price {
  font-weight: 500;
  color: var(--success-color);
  margin-bottom: calc(var(--spacing-unit) * 0.2);
  font-size: 1rem;
}

.product-stock,
.product-rating {
  font-size: 0.8rem;
  color: var(--secondary-color);
  margin-bottom: calc(var(--spacing-unit) * 0.2);
}
.product-rating .fa-star, .product-rating .fa-star-half-alt { color: #f8d347; }
.product-rating .fa-star-regular { color: #e4e5e9; }

/* --- UPDATED: Add to Cart Form (AJAX) Container --- */
.product-card-actions {
    padding: 0 calc(var(--spacing-unit) * 0.6) calc(var(--spacing-unit) * 0.6);
}
/* --- UPDATED: Styling for AJAX Add Button --- */
.btn-ajax-add-to-cart {
  width: 100%;
  padding: calc(var(--spacing-unit) * 0.5);
  font-size: 0.9rem;
}
.btn-ajax-add-to-cart i {
    margin-right: calc(var(--spacing-unit) * 0.25);
    /* Ensure spinner aligns well */
    vertical-align: middle;
}


/* Product Detail */
.product-detail-container {
  background-color: var(--card-bg);
  padding: var(--spacing-unit);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
}
.product-detail-main {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-unit);
}
.product-detail-image { /* This styles the actual img tag */
    display: block; /* Remove extra space below image */
    width: 100%;
    height: 100%;
    object-fit: cover; /* Cover the area, might crop */
    /* object-fit: contain; */ /* Uncomment if you prefer to see the whole image */
    object-position: center center; /* Center the image */
    border-radius: inherit; /* Inherit border-radius from container */
}
.product-detail-info h1 {
    font-size: 1.6rem;
    margin-bottom: calc(var(--spacing-unit) * 0.5);
}
.detail-price {
    font-size: 1.4rem;
    font-weight: bold;
    color: var(--success-color);
    margin-bottom: calc(var(--spacing-unit) * 0.3);
}
.detail-stock {
    font-size: 0.9rem;
    color: var(--secondary-color);
    margin-bottom: calc(var(--spacing-unit) * 0.3);
}
.detail-rating {
    margin-bottom: calc(var(--spacing-unit) * 0.75);
    color: var(--secondary-color);
}
.detail-rating i { color: #f8d347; }
.detail-rating .fa-star-regular { color: #e4e5e9; }

.product-actions {
    margin: calc(var(--spacing-unit) * 1.2) 0;
    display: flex;
    flex-direction: column;
    gap: calc(var(--spacing-unit) * 0.5);
}
.quantity-selector {
    display: flex;
    align-items: center;
    margin-bottom: calc(var(--spacing-unit) * 0.5);
    max-width: 150px;
}
.quantity-selector label {
    margin: 0 calc(var(--spacing-unit) * 0.4) 0 0;
    font-size: 0.9rem;
}
.quantity-selector input {
    text-align: center;
    font-size: 1rem;
    padding: calc(var(--spacing-unit) * 0.4);
}
.product-actions .btn {
    width: 100%;
    padding: calc(var(--spacing-unit) * 0.6) var(--spacing-unit);
    font-size: 1rem;
}

.share-section { margin: calc(var(--spacing-unit) * 1.2) 0; }
.fallback-share-links { margin-top: 0.5rem; }
.fallback-share-links a { margin: 0 0.3rem; font-size: 1.5rem; }

.product-specifications { margin-top: calc(var(--spacing-unit) * 1.5); }
.product-specifications h3 { font-size: 1.1rem; border-bottom: 1px solid var(--border-color); padding-bottom: 0.3rem; margin-bottom: 0.5rem;}
.product-specifications pre {
    white-space: pre-wrap;
    font-size: 0.9rem;
    background-color: #f8f8f8;
    padding: calc(var(--spacing-unit) * 0.5);
    border-radius: var(--border-radius);
    max-height: 200px;
    overflow-y: auto;
}

/* Rating Section */
.product-rating-section {
    margin-top: var(--spacing-unit);
    border-top: 1px solid var(--border-color);
    padding-top: var(--spacing-unit);
}
.product-rating-section h3 {
    margin-bottom: calc(var(--spacing-unit) * 0.6);
    font-size: 1.2em;
}

.rating-stars { display: inline-flex; flex-direction: row-reverse; justify-content: flex-end; margin-bottom: calc(var(--spacing-unit) * 0.8); }
.rating-stars input[type="radio"] { display: none; }
.rating-stars label { display: inline-block; cursor: pointer; font-size: 1.8rem; color: lightgray; padding: 0 0.1em; margin: 0; transition: color 0.2s ease-in-out; }
.rating-stars label:hover, .rating-stars label:hover ~ label { color: #f8d347; }
.rating-stars input[type="radio"]:checked ~ label { color: #f8d347; }

.rating-stats-container { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; }
.rating-stats-container h3 { margin-bottom: 15px; font-size: 1.4em; color: #333; }
.rating-summary { display: flex; align-items: center; margin-bottom: 20px; gap: 15px; }
.rating-average { display: flex; align-items: center; }
.rating-average-value { font-size: 2.5em; font-weight: 500; margin-right: 5px; color: #222; }
.rating-average .fa-star { font-size: 1.2em; color: #666; margin-bottom: 8px; }
.rating-total { font-size: 0.95em; color: #555; }
.rating-bars { max-width: 400px; margin: 0 auto; }
.rating-bar-row { display: flex; align-items: center; margin-bottom: 8px; gap: 10px; }
.rating-bar-label { width: 45px; font-size: 0.9em; color: #444; text-align: right; flex-shrink: 0; }
.rating-bar-label .fa-star { color: #f8c107; font-size: 0.9em; }
.rating-bar-progress { flex-grow: 1; height: 8px; background-color: #e0e0e0; border-radius: 4px; overflow: hidden; }
.progress { background-color: #e9ecef; border-radius: 4px; display: flex; height: 1rem; overflow: hidden; font-size: .75rem;}
.progress-bar { background-color: var(--primary-color); color: #fff; display: flex; flex-direction: column; justify-content: center; overflow: hidden; text-align: center; white-space: nowrap; transition: width .6s ease;}
.rating-bar-fill { height: 100%; background-color: #28a745; border-radius: 4px; transition: width 0.3s ease-in-out; }
.rating-bar-row:nth-child(1) .rating-bar-fill { background-color: #28a745; } /* 5 stars */
.rating-bar-row:nth-child(2) .rating-bar-fill { background-color: #84c54c; } /* 4 stars */
.rating-bar-row:nth-child(3) .rating-bar-fill { background-color: #ffc107; } /* 3 stars */
.rating-bar-row:nth-child(4) .rating-bar-fill { background-color: #fd7e14; } /* 2 stars */
.rating-bar-row:nth-child(5) .rating-bar-fill { background-color: #dc3545; } /* 1 star */
.rating-bar-count { width: 40px; font-size: 0.9em; color: #555; text-align: right; flex-shrink: 0; }


/* Auth */
.auth-container {
  max-width: 450px;
  margin: var(--spacing-unit) auto;
  padding: var(--spacing-unit);
  background-color: var(--card-bg);
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
}
.auth-container h1 { font-size: 1.6rem; text-align: center; margin-bottom: var(--spacing-unit); }
.auth-form .btn { width: 100%; margin-top: calc(var(--spacing-unit) * 0.5); padding: calc(var(--spacing-unit) * 0.7); }
.auth-links { margin-top: var(--spacing-unit); font-size: 0.9rem; text-align: center; }
.auth-links p { margin-bottom: calc(var(--spacing-unit) * 0.4); }
.auth-container p { text-align: center; margin-bottom: var(--spacing-unit);}
.auth-container form ~ .auth-links { border-top: 1px solid var(--border-color); padding-top: var(--spacing-unit); }
#otp { text-align: center; font-size: 1.2rem; letter-spacing: 4px; }


/* Cart */
.cart-container h1 { font-size: 1.5rem; margin-bottom: var(--spacing-unit); }
.cart-items { margin-bottom: var(--spacing-unit); }

.cart-item {
  display: grid;
  grid-template-columns: 80px 1fr auto;
  grid-template-areas:
    "image details remove"
    "image quantity subtotal";
  gap: calc(var(--spacing-unit) * 0.75);
  background-color: var(--card-bg);
  padding: calc(var(--spacing-unit) * 0.75);
  border-bottom: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  margin-bottom: var(--spacing-unit);
  box-shadow: var(--card-shadow);
}

.cart-item-image { grid-area: image; align-self: center;}
.cart-item-image img {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: calc(var(--border-radius) * 0.75);
}
.cart-item-details { grid-area: details; }
.cart-item-quantity { grid-area: quantity; display: flex; align-items: center; gap: 0.3rem; }
.cart-item-subtotal { grid-area: subtotal; text-align: right; font-weight: 500; align-self: center; }
.cart-item-remove { grid-area: remove; text-align: right; align-self: start;}
.cart-item-name { font-size: 1rem; font-weight: 500; margin-bottom: calc(var(--spacing-unit) * 0.2); }
.cart-item-price { font-size: 0.9rem; color: var(--secondary-color); margin-bottom: calc(var(--spacing-unit) * 0.2); }
.cart-item-stock { font-size: 0.8rem; color: #6c757d; }
.cart-item-quantity label { font-size: 0.9rem; margin-bottom: 0; display: none; }
.cart-item-quantity input { width: 50px; padding: calc(var(--spacing-unit) * 0.3) calc(var(--spacing-unit) * 0.4); text-align: center; font-size: 0.9rem; }
.cart-item-quantity .btn-update-qty { font-size: 0.8rem; padding: calc(var(--spacing-unit) * 0.3) calc(var(--spacing-unit) * 0.6); }
.cart-item-subtotal { font-size: 0.9rem; white-space: nowrap; }
.cart-item-subtotal .item-subtotal-value { font-weight: 500; }
.cart-item-remove .btn { padding: 0.2rem 0.4rem; font-size: 0.8rem; ; }

.cart-summary {
  margin-top: calc(var(--spacing-unit) * 1.5);
  padding: var(--spacing-unit);
  background-color: #f8f9fa;
  border-top: 2px solid var(--primary-color);
  border-radius: var(--border-radius);
  text-align: right;
}
.cart-summary h2 { font-size: 1.3rem; margin-bottom: calc(var(--spacing-unit) * 0.75); }
.btn-checkout { width: 100%; padding: calc(var(--spacing-unit) * 0.7); font-size: 1.1rem; }


/* Checkout */
.checkout-container h1 { font-size: 1.5rem; margin-bottom: var(--spacing-unit);}
.checkout-grid { display: flex; flex-direction: column; gap: var(--spacing-unit); }

.checkout-address, .checkout-summary {
    background-color: var(--card-bg);
    padding: var(--spacing-unit);
    border-radius: var(--border-radius);
    border: 1px solid var(--border-color);
    box-shadow: var(--card-shadow);
}
.checkout-address h2, .checkout-summary h2 { font-size: 1.2rem; border-bottom: 1px solid var(--border-color); padding-bottom: calc(var(--spacing-unit) * 0.4); margin-bottom: var(--spacing-unit); }
.saved-address { font-size: 0.95rem; margin-bottom: var(--spacing-unit); }
.saved-address p { margin-bottom: calc(var(--spacing-unit) * 0.2); line-height: 1.4; }
#edit-address-btn { margin-top: calc(var(--spacing-unit) * 0.5); }
.address-form h3 { font-size: 1.1rem; }

.checkout-items { max-height: 200px; overflow-y: auto; margin-bottom: var(--spacing-unit); padding-right: calc(var(--spacing-unit) * 0.5); }
.checkout-item { display: flex; align-items: center; gap: calc(var(--spacing-unit) * 0.5); margin-bottom: calc(var(--spacing-unit) * 0.5); font-size: 0.9rem; }
.checkout-item-image img {
    width: 40px;
    height: 40px;
    object-fit: cover;
    border-radius: calc(var(--border-radius) * 0.75);
}
.checkout-item-info { flex-grow: 1; }
.checkout-item-price { font-weight: 500; white-space: nowrap;}

.checkout-totals { font-size: 0.95rem; }
.checkout-totals p { display: flex; justify-content: space-between; margin-bottom: calc(var(--spacing-unit) * 0.3); }
.checkout-totals hr { margin: calc(var(--spacing-unit) * 0.5) 0; border-color: var(--border-color); opacity: 0.5;}
.checkout-totals strong { font-weight: bold; }

.checkout-payment h3 { font-size: 1.1rem; margin: calc(var(--spacing-unit) * 1) 0 calc(var(--spacing-unit) * 0.5) 0; }
.payment-option {
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    background-color: #f0f0f0;
    opacity: 0.8;
    margin-bottom: 0.5rem;
    cursor: pointer;
}
.payment-option.selected { border-color: var(--primary-color); opacity: 1; background-color: #e7f3ff; }
.payment-option label { font-weight: normal; display: flex; align-items: center; cursor: pointer; margin-bottom: 0; }
.payment-option input[type="radio"] { margin-right: 0.5rem; }
.payment-option i { margin-right: 0.3rem; color: var(--success-color);}

.place-order-form { margin-top: var(--spacing-unit); }
.btn-place-order { width: 100%; font-size: 1.1rem; padding: calc(var(--spacing-unit) * 0.7); }


/* My Orders */
.my-orders-container h1 { font-size: 1.5rem; margin-bottom: var(--spacing-unit); }
.order-list { display: flex; flex-direction: column; gap: var(--spacing-unit); }
.order-card {
  background-color: var(--card-bg);
  border-radius: var(--border-radius);
  border: 1px solid var(--border-color);
  box-shadow: var(--card-shadow);
  overflow: hidden;
}

.order-header {
  background-color: #f8f9fa;
  padding: calc(var(--spacing-unit) * 0.6);
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  font-size: 0.85rem;
  color: var(--secondary-color);
  border-bottom: 1px solid var(--border-color);
}
.order-header > div { margin-right: calc(var(--spacing-unit) * 0.8); margin-bottom: calc(var(--spacing-unit) * 0.2); white-space: nowrap; }
.order-header strong { color: var(--text-color); }
.order-status { display: inline-block; } /* Used within header */

.order-body { padding: calc(var(--spacing-unit) * 0.75); display: flex; flex-direction: column; gap: calc(var(--spacing-unit) * 0.75); }

/* Order Item Images (Shared) */
.order-items-images { display: flex; flex-wrap: wrap; gap: 8px; padding-left: 0; list-style: none; }
.order-item-thumbnail {
    display: inline-block;
    width: 40px;
    height: 40px;
    object-fit: cover;
    border-radius: calc(var(--border-radius) * 0.75);
    border: 1px solid var(--border-color);
    transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
    vertical-align: middle;
    background-color: #f8f9fa;
}
.order-item-thumbnail:hover { opacity: 0.85; transform: scale(1.05); z-index: 10; }
.order-item-thumbnail-placeholder {
    display: inline-flex; align-items: center; justify-content: center; width: 40px; height: 40px;
    border-radius: calc(var(--border-radius) * 0.75);
    border: 1px dashed var(--secondary-color); background-color: var(--light-color); color: var(--secondary-color); font-size: 0.6rem; font-weight: bold; text-align: center; text-decoration: none; transition: background-color 0.2s ease-in-out; vertical-align: middle; line-height: 1; padding: 2px;
}
.order-item-thumbnail-placeholder:hover { background-color: #e2e6ea; text-decoration: none; }

.order-details { font-size: 0.9rem; line-height: 1.5;}
.order-details p { margin-bottom: calc(var(--spacing-unit) * 0.3); }
.order-actions { padding: 0 calc(var(--spacing-unit) * 0.75) calc(var(--spacing-unit) * 0.75); text-align: right; }


/* Status Badge */
.status-badge {
    font-weight: bold;
    padding: 0.2em 0.5em;
    border-radius: var(--border-radius);
    color: #333;
    background-color: var(--secondary-color);
    font-size: 0.85em;
    display: inline-block;
    vertical-align: middle;
    text-transform: capitalize;
}
.status-pending, .status-badge.status-pending { background-color: #fff3cd; color: #856404; }
.status-out-for-delivery, .status-badge.status-out-for-delivery { background-color: #d1ecf1; color: #0c5460; }
.status-delivered, .status-badge.status-delivered { background-color: #d4edda; color: #155724; }
.status-cancelled, .status-badge.status-cancelled { background-color: #f8d7da; color: #721c24; }
.status-approved, .status-badge.status-approved { background-color: #d4edda; color: #155724; }
.status-rejected, .status-badge.status-rejected { background-color: #f8d7da; color: #721c24; }

.order-card.status-cancelled, .data-table tr.status-cancelled { opacity: 0.9; }
.data-table tr.status-rejected { opacity: 0.85; }
.data-table tr.status-pending { /* Optional: style pending rows */ }

/* Admin/Seller Pages */
.admin-manage-container, .admin-dashboard-container { padding: var(--spacing-unit); }
.admin-manage-container h1, .admin-dashboard-container h1 { font-size: 1.5rem; margin-bottom: var(--spacing-unit); border-bottom: 1px solid var(--border-color); padding-bottom: calc(var(--spacing-unit) * 0.5); }


/* Responsive Tables */
.table-container { overflow-x: auto; margin-bottom: var(--spacing-unit); }

.data-table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  font-size: 0.9rem;
  background-color: var(--card-bg);
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  overflow: hidden;
}

.data-table thead {
  display: none;
  background-color: #f8f9fa;
  font-weight: 500;
  color: var(--dark-color);
  font-size: 0.85rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}
.data-table th { padding: calc(var(--spacing-unit) * 0.7) calc(var(--spacing-unit) * 0.6); text-align: left; border-bottom: 1px solid var(--border-color); }

/* Mobile Table Rows (Card-like) */
.data-table tbody tr {
  display: block;
  margin-bottom: calc(var(--spacing-unit) * 1);
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  padding: calc(var(--spacing-unit) * 0.8);
  background-color: var(--card-bg);
  box-shadow: var(--card-shadow);
  transition: box-shadow 0.2s ease-in-out;
}
.data-table tbody tr:last-child { margin-bottom: 0; }
.data-table tbody tr:hover { box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1); }

.data-table td { display: block; text-align: right; padding: calc(var(--spacing-unit) * 0.4) 0; position: relative; border-bottom: 1px dashed #eee; }
.data-table td:last-child { border-bottom: none; }
.data-table td::before { content: attr(data-label); position: absolute; left: 0; font-weight: 500; text-align: left; padding-right: 10px; color: var(--secondary-color); width: 40%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; font-size: 0.85em; }

.table-img {
    max-width: 50px;
    border-radius: calc(var(--border-radius) * 0.75);
    display: inline-block;
    margin-left: 45%;
    vertical-align: middle;
}
.data-table td:has(img) { text-align: right; padding: 5px 0; }

/* Mobile Actions Cell */
.data-table td.actions-cell { padding-top: calc(var(--spacing-unit) * 0.6); }
.data-table td.actions-cell::before { display: none; }
.actions-cell .action-group { border-top: 1px solid #eee; padding-top: calc(var(--spacing-unit) * 0.6); margin-top: calc(var(--spacing-unit) * 0.6); text-align: left; }
.actions-cell .action-group:first-child { border-top: none; margin-top: 0; padding-top: 0; }
.actions-cell .action-group-title { font-size: 0.8em; font-weight: bold; color: var(--secondary-color); margin-bottom: calc(var(--spacing-unit) * 0.4); display: block; text-align: left; }
.actions-cell form, .actions-cell .btn { margin: calc(var(--spacing-unit) * 0.25) 0; display: block; width: 100%; }
.actions-cell .inline-form { display: flex; flex-wrap: wrap; gap: calc(var(--spacing-unit) * 0.4); align-items: center; }
.actions-cell .inline-form input, .actions-cell .inline-form button { width: auto; flex-grow: 1; }
.actions-cell .inline-form button { flex-grow: 0; flex-shrink: 0; }
.actions-cell select.form-control-sm { margin-bottom: 5px; font-size: 0.9rem; padding: calc(var(--spacing-unit)*0.4) calc(var(--spacing-unit)*0.6); height: auto; width: 100%; }
.actions-cell .no-actions-text { display: block; text-align: left; margin-top: calc(var(--spacing-unit) * 0.5); color: var(--secondary-color); font-style: italic; }

/* Mobile Order Table Specifics */
.order-table td[data-label="Items"] .order-items-summary { font-size: 0.85em; line-height: 1.5; margin-bottom: calc(var(--spacing-unit) * 0.5); text-align: left; margin-left: 45%; }
.order-table td[data-label="Items"] .order-items-summary strong { color: var(--dark-color); }
.order-table .order-items-images { margin-top: calc(var(--spacing-unit) * 0.4); justify-content: flex-end; margin-left: 45%; }
.order-table td[data-label="Total"].order-total strong { font-size: 1.1em; color: var(--success-color); }
.order-table td[data-label="Status"] .status-badge { float: right; margin-bottom: 5px; }
.order-table td[data-label="Status"] small { clear: both; display: block; text-align: right; margin-top: calc(var(--spacing-unit) * 0.3); }

/* Mobile Delivery OTP */
.delivery-otp-display {
    margin-top: 10px;
    padding: 8px 12px;
    background-color: #e6ffed;
    border: 1px solid #b7e4c7;
    border-radius: var(--border-radius);
    font-size: 0.9rem;
    text-align: left;
    clear: both;
    margin-left: 45%;
}
.delivery-otp-display p { margin-bottom: 3px !important; }
.delivery-otp-code {
    font-weight: bold;
    color: #2b9348;
    font-size: 1.1em;
    margin: 0 3px;
    letter-spacing: 1px;
    background-color: #fff;
    padding: 1px 4px;
    border-radius: calc(var(--border-radius) * 0.5);
}
.delivery-otp-display small { display: block; margin-top: 3px; color: #555; }
.verify-otp-form { display: flex; align-items: center; gap: 5px; width: 100%; }
.verify-otp-form input[name="otp"] { flex-grow: 1; max-width: 150px; padding: calc(var(--spacing-unit)*0.4) calc(var(--spacing-unit)*0.6); font-size: 0.9rem; text-align: center; border-radius: var(--border-radius); }
.verify-otp-form button { flex-shrink: 0; width: auto; padding: calc(var(--spacing-unit)*0.4) calc(var(--spacing-unit)*0.6); font-size: 0.9rem; line-height: 1.4; }

/* Admin Actions Grid */
.admin-actions-grid { display: grid; grid-template-columns: repeat(1, 1fr); gap: var(--spacing-unit); margin-top: var(--spacing-unit); }
.admin-action-card {
    background-color: var(--card-bg);
    padding: var(--spacing-unit);
    border-radius: var(--border-radius);
    border: 1px solid var(--border-color);
    text-align: center;
    box-shadow: var(--card-shadow);
    transition: transform 0.2s, box-shadow 0.2s;
    color: var(--text-color);
    text-decoration: none;
}
.admin-action-card:hover { transform: translateY(-3px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); text-decoration: none; }
.admin-action-card i { font-size: 2rem; color: var(--primary-color); margin-bottom: 0.5rem; }
.admin-action-card h3 { font-size: 1.1rem; margin-bottom: 0.3rem; color: var(--text-color); }
.admin-action-card p { font-size: 0.85rem; color: var(--secondary-color); margin-bottom: 0.5rem; }


/* Error Page */
.error-container { text-align: center; padding-top: 2rem; }
.error-container h1 { color: var(--danger-color); margin-bottom: 0.5rem; }
.error-container .lead { font-size: 1.1rem; }
.error-container details {
    text-align: left;
    margin-top: 1rem;
    background: #f1f1f1;
    padding: 0.5rem;
    border-radius: var(--border-radius);
}
.error-container details summary { cursor: pointer; font-weight: bold; }
.error-container details pre { white-space: pre-wrap; font-size: 0.8em; margin-top: 0.5rem; }


/* Profile Page */
.profile-container {
    max-width: 800px;
    margin: var(--spacing-unit) auto;
    padding: calc(var(--spacing-unit) * 1.5);
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    box-shadow: var(--card-shadow);
}
.profile-container h1 { font-size: 1.8rem; text-align: center; margin-bottom: calc(var(--spacing-unit) * 0.5); }
.profile-container > p.text-muted { text-align: center; font-size: 1.1rem; }
.profile-section { margin-top: calc(var(--spacing-unit) * 1.5); padding-top: calc(var(--spacing-unit) * 1); border-top: 1px solid var(--border-color); }
.profile-section:first-of-type { border-top: none; padding-top: 0; margin-top: calc(var(--spacing-unit) * 0.8); }
.profile-section h2 { font-size: 1.4rem; margin-bottom: calc(var(--spacing-unit) * 0.8); color: var(--primary-color); }
#saved-address-display p { margin-bottom: calc(var(--spacing-unit) * 0.3); line-height: 1.5; font-size: 1rem; }
#saved-address-display strong { font-weight: 500; }
#edit-address-btn, #add-address-btn { margin-top: calc(var(--spacing-unit) * 0.5); }
.address-form { max-width: 500px; }
.address-form h3 { font-size: 1.2rem; margin-bottom: var(--spacing-unit); font-weight: 500; }
#cancel-edit-btn { margin-left: calc(var(--spacing-unit) * 0.5); }
.dashboards-section .btn,
.orders-section .btn {
    margin-right: 10px; margin-bottom: 10px;
}
.logout-section .btn { min-width: 120px; }


/* Banner Slider Styles */
.banner-slider-container {
  position: relative;
  width: 100%;
  aspect-ratio: 2.5 / 1;
  overflow: hidden;
  border-radius: var(--border-radius);
  background-color: #e0e0e0;
  touch-action: pan-y; /* Enable vertical scroll, handle horizontal swipe in JS */
  -webkit-tap-highlight-color: transparent; /* Optional: Remove tap highlight on mobile */
}

.banner-slides {
  position: relative;
  width: 100%;
  height: 100%;
}

.banner-slide {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.6s ease-in-out;
  background-color: #eee;
}

.banner-slide.active {
  opacity: 1;
  visibility: visible;
  z-index: 1;
}

.banner-link {
  display: block;
  width: 100%;
  height: 100%;
}

.banner-image {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* Navigation Arrows */
.banner-nav {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background-color: rgba(0, 0, 0, 0.4);
  color: white;
  border: none;
  border-radius: 50%;
  width: 35px;
  height: 35px;
  font-size: 0.9rem;
  cursor: pointer;
  z-index: 2;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s ease;
  opacity: 0.8;
}

.banner-nav:hover {
  background-color: rgba(0, 0, 0, 0.6);
  opacity: 1;
}

.banner-prev { left: 10px; }
.banner-next { right: 10px; }

/* Navigation Dots */
.banner-dots {
  position: absolute;
  bottom: 10px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 8px;
  z-index: 2;
}

.banner-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.5);
  border: 1px solid rgba(0, 0, 0, 0.2);
  cursor: pointer;
  padding: 0;
  transition: background-color 0.3s ease;
}

.banner-dot.active { background-color: white; }


/* ============================ */
/* Category Icons Section       */
/* ============================ */

.category-icons-section {
    /* padding: calc(var(--spacing-unit) * 0.8) 0; */
}

.category-icons-section h2 {
  font-size: 1.2rem;
  font-weight: 500;
  color: var(--dark-color);
  text-align: center;
  margin-bottom: calc(var(--spacing-unit) * 1);
}

.category-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: calc(var(--spacing-unit) * 0.6);
}

.category-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  padding: calc(var(--spacing-unit) * 0.4);
  border-radius: calc(var(--border-radius) * 0.8);
  transition: background-color 0.2s ease-in-out, transform 0.15s ease-in-out;
  color: var(--text-color);
  text-decoration: none;
  cursor: pointer;
}

.category-item:hover {
  background-color: rgba(0, 0, 0, 0.05);
  text-decoration: none;
  transform: translateY(-2px);
}

.category-item.active {
  background-color: rgba(0, 123, 255, 0.1);
  transform: translateY(-1px);
}
.category-item.active .category-name {
  color: var(--primary-color);
  font-weight: 500;
}


.category-icon-wrapper {
  width: 55px;
  height: 55px;
  margin-bottom: calc(var(--spacing-unit) * 0.4);
  background-color: rgb(255, 255, 255);
  border-radius: 15px;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  border: 1px solid rgba(0,0,0,0.05);
  transition: box-shadow 0.2s ease;
}
.category-item:hover .category-icon-wrapper {
    box-shadow: 0 2px 4px rgba(0,0,0,0.15);
}

.category-icon {
  max-width: 65%;
  max-height: 65%;
  object-fit: contain;
  display: block;
}

.category-name {
  font-size: 0.7rem;
  font-weight: 400;
  line-height: 1.3;
  color: rgb(66, 66, 66);
}

/* ============================ */
/* **** Pincode Lookup Styles **** */
/* ============================ */

/* Style for the container holding auto-filled fields */
.auto-filled-fields-container {
    background-color: #f8f9fa; /* Light grey background */
    border-left: 3px solid var(--primary-color); /* Accent border */
    padding: calc(var(--spacing-unit) * 0.6) calc(var(--spacing-unit) * 0.8);
    border-radius: 0 var(--border-radius) var(--border-radius) 0;
    margin-top: calc(var(--spacing-unit) * -0.5); /* Pull slightly closer to pincode */
    margin-bottom: var(--spacing-unit);
}

.auto-filled-fields-container .form-group {
    margin-bottom: calc(var(--spacing-unit) * 0.5); /* Reduce margin inside */
}

.auto-filled-fields-container .form-group:last-child {
    margin-bottom: 0;
}

/* Style for the read-only auto-filled fields */
.auto-filled-field[readonly] {
    background-color: #e9ecef; /* Standard readonly background */
    opacity: 1; /* Ensure full opacity */
    cursor: not-allowed;
    border: 1px solid #ced4da; /* Slightly lighter border */
    font-weight: 500; /* Make text slightly bolder */
    color: #495057; /* Standard text color */
}

/* Pincode status message styling */
.pincode-status {
    display: block; /* Ensure it takes its own line */
    margin-top: 4px;
    font-size: 0.8em;
    min-height: 1.2em; /* Reserve space */
    transition: color 0.2s ease-in-out; /* Smooth color transition */
}
.pincode-status.text-success { color: var(--success-color) !important; }
.pincode-status.text-danger { color: var(--danger-color) !important; }
.pincode-status.text-muted { color: var(--secondary-color) !important; }


/* ============================ */
/* Media Queries                */
/* ============================ */

/* --- Mobile Specific Search Bar --- */
@media (max-width: 767px) {
  .search-container-dynamic {
      position: static;
      order: 1;
  }
  .search-form-dynamic {
      position: absolute;
      top: calc(100% + 8px);
      left: var(--spacing-unit);
      right: var(--spacing-unit);
      width: calc(100% - (2 * var(--spacing-unit)));
      background-color: var(--card-bg);
      border: 1px solid var(--border-color);
      box-shadow: 0 3px 6px rgba(0,0,0,0.15);
      opacity: 0;
      visibility: hidden;
      transform: translateY(-10px) scaleY(0.95);
      transform-origin: top center;
      transition: opacity 0.25s ease, transform 0.25s ease, visibility 0s linear 0.25s;
      z-index: 1005;
      border-radius: var(--border-radius);
      height: 42px;
  }
  .search-container-dynamic.active .search-form-dynamic {
      opacity: 1;
      visibility: visible;
      transform: translateY(0) scaleY(1);
      transition: opacity 0.25s ease, transform 0.25s ease, visibility 0s linear 0s;
  }
  .suggestions-dropdown {
      top: calc(100% + 8px + 42px + 4px);
      left: var(--spacing-unit);
      right: var(--spacing-unit);
      width: calc(100% - (2 * var(--spacing-unit)));
      z-index: 1010;
      border-top: 1px solid var(--border-color);
  }
   .search-container-dynamic.active .suggestions-dropdown.active {
      display: block;
   }
}

/* Small devices (landscape phones, 576px and up) */
@media (min-width: 576px) {
    .category-grid {
        grid-template-columns: repeat(5, 1fr);
        gap: calc(var(--spacing-unit) * 0.75);
    }
    .category-icon-wrapper { width: 60px; height: 60px; border-radius: 18px; }
    .category-name { font-size: 0.75rem; }
    .admin-actions-grid { grid-template-columns: repeat(2, 1fr); }
}

/* Medium devices (tablets, 768px and up) */
@media (min-width: 768px) {
  .container { max-width: 720px; }
  .app-footer { display: block; }
  .product-grid { grid-template-columns: repeat(3, 1fr); }
  .product-name { height: auto; white-space: normal; display: block; -webkit-line-clamp: unset; -webkit-box-orient: unset; }
  .product-detail-main { flex-direction: row; align-items: flex-start; }
  .product-detail-info { flex: 1 1 60%; }
  .product-detail-image-section { flex: 1 1 40%; width: auto; max-width: none; margin: 0; }
  .product-actions { flex-direction: row; align-items: center; }
  .product-actions .btn { width: auto; }
  .quantity-selector { max-width: 120px; margin-bottom: 0; }
  .auth-container { margin: calc(var(--spacing-unit) * 2) auto; }
  .cart-item { grid-template-columns: 100px 1fr 100px 150px 80px; grid-template-areas: "image details price quantity remove"; align-items: center; padding: var(--spacing-unit); }
  .cart-item-details { grid-area: details; }
  .cart-item-price { display: block; grid-area: price; text-align: right; font-weight: 500; font-size: 1rem; color: var(--text-color); margin-bottom: 0; }
  .cart-item-quantity { grid-area: quantity; justify-content: center; }
  .cart-item-subtotal { display: none; }
  .cart-item-remove { grid-area: remove; align-self: center; text-align: center; }
  .checkout-grid { flex-direction: row; gap: calc(var(--spacing-unit) * 1.5); align-items: flex-start; }
  .checkout-address { flex: 1 1 55%; }
  .checkout-summary { flex: 1 1 45%; }

  /* --- Restore Table Layout --- */
  .data-table thead { display: table-header-group; }
  .data-table tbody tr { display: table-row; margin-bottom: 0; border: none; padding: 0; box-shadow: none; background-color: transparent; border-bottom: 1px solid var(--border-color); border-radius: 0; }
  .data-table tbody tr:last-child { border-bottom: none; }
  .data-table tbody tr:hover { background-color: #f1f5f9; }
  .data-table td { display: table-cell; text-align: left; padding: calc(var(--spacing-unit) * 0.6) calc(var(--spacing-unit) * 0.6); vertical-align: middle; border-bottom: none; position: static; margin-left: 0 !important; }
  .data-table td::before { content: none; }
  .table-img { max-width: 60px; margin-left: 0; }
  .data-table td:has(img) { text-align: left; width: 80px; }
  .data-table th[data-label*="Price"], .data-table td[data-label*="Price"],
  .data-table th[data-label*="Stock"], .data-table td[data-label*="Stock"],
  .data-table th[data-label*="Total"], .data-table td[data-label*="Total"],
  .data-table td.order-total { text-align: right; width: 100px; }
  .data-table th[data-label="Status"], .data-table td[data-label="Status"],
  .data-table td.order-status-cell { text-align: center; width: 150px; }
  .data-table td[data-label="Status"] .status-badge, .order-status-cell .status-badge { float: none; display: inline-block; }
  .order-status-cell small { text-align: center; }
  .data-table th.actions-cell, .data-table td.actions-cell { text-align: right !important; width: 250px; white-space: normal; }
  .actions-cell .action-group { border: none; padding: 0; margin: 0 0 calc(var(--spacing-unit) * 0.5) 0; display: block; text-align: right; }
  .actions-cell .action-group:last-child { margin-bottom: 0; }
  .actions-cell .action-group-title { display: none; }
  .actions-cell form, .actions-cell .btn { display: inline-block; width: auto; margin: 0 0 0 calc(var(--spacing-unit) * 0.3); vertical-align: middle; }
  .actions-cell .inline-form { display: inline-flex; width: auto; margin-left: 0; }
  .actions-cell .inline-form + .inline-form { margin-left: calc(var(--spacing-unit) * 0.3); }
  .actions-cell .verify-otp-form input { max-width: 100px; }
  .actions-cell select.form-control-sm { width: auto; display: inline-block; margin-right: 5px;}
  .actions-cell .no-actions-text { display: inline-block; text-align: right; width: 100%;}
  .w-md-auto { width: auto !important; }
  .order-table td[data-label="Items"] .order-items-summary { margin-left: 0; text-align: left; }
  .order-table .order-items-images { justify-content: flex-start; margin-left: 0; }
  .delivery-otp-display { margin-left: 0; margin-top: 5px; padding: 5px 8px; font-size: 0.85rem; display: inline-block; width: auto; text-align: center; }
  .delivery-otp-display p { margin-bottom: 0 !important; }
  .delivery-otp-display small { display: none; }
  /* --- End Table Restore --- */

  /* --- Header/Navbar for Tablet+ --- */
  .app-header { padding: calc(var(--spacing-unit) * 0.5) var(--spacing-unit); }
  .navbar { gap: var(--spacing-unit); }
  .app-logo .app-name { display: inline; }
  .app-logo { font-size: 1.2rem; }
  .search-toggle-btn { display: none; }

  .search-container-dynamic {
      display: flex;
      flex-grow: 1;
      justify-content: center;
      order: 0;
      margin: 0 calc(var(--spacing-unit) * 0.5);
      max-width: 500px;
      position: relative;
  }
  .nav-left { margin-right: 0; }

  .search-form-dynamic {
      position: relative;
      top: auto; left: auto; right: auto; width: 100%;
      box-shadow: none;
      opacity: 1; visibility: visible; transform: none;
      transition: border-color 0.2s ease, box-shadow 0.2s ease;
      height: 38px;
  }
  /* --- End Header/Navbar Tablet+ --- */


  /* Category Grid Tablet */
  .category-grid { grid-template-columns: repeat(6, 1fr); gap: calc(var(--spacing-unit) * 0.8); }
  .category-icon-wrapper { width: 65px; height: 65px; border-radius: 20px; }
  .category-name { font-size: 0.8rem; }
  .category-icons-section { padding: calc(var(--spacing-unit) * 1.2); }
  .category-icons-section h2 { font-size: 1.4rem; }

  /* Banner Slider Tablet */
  .banner-slider-container {
      aspect-ratio: 24 / 7;
      /* touch-action is inherited */
  }
  .banner-nav { width: 40px; height: 40px; font-size: 1rem; }
  .banner-dots { bottom: 15px; }
  .banner-dot { width: 10px; height: 10px; }

  /* Rating Stats Layout */
  .rating-stats-container { display: flex; align-items: flex-start; gap: calc(var(--spacing-unit) * 2); }
  .rating-summary { flex-direction: column; align-items: center; margin-bottom: 0; flex-basis: 150px; flex-shrink: 0; }
  .rating-average-value { font-size: 3em; }
  .rating-total { font-size: 1em; }
  .rating-bars { max-width: none; flex-grow: 1; margin: 0; }

  .profile-container { padding: calc(var(--spacing-unit) * 2); }

  /* Nav links Tablet+ */
  .nav-link { flex-direction: row; font-size: 0.9rem; align-items: center; padding: calc(var(--spacing-unit) * 0.4) calc(var(--spacing-unit) * 0.8); }
  .nav-link span { display: inline; margin-left: calc(var(--spacing-unit) * 0.3); }
  .nav-link i { font-size: 1rem; margin-bottom: 0; margin-right: 0; }
  .nav-right { gap: calc(var(--spacing-unit) * 0.75); }
  .profile-avatar-link { width: 38px; height: 38px; }
  .btn-login-register { font-size: 0.9rem; }
  .suggestions-dropdown { position: absolute; top: 100%; left: 0; right: 0; width: 100%; }


} /* End @media (min-width: 768px) */


/* Large devices (desktops, 992px and up) */
@media (min-width: 992px) {
  .container { max-width: 960px; }
  .product-grid { grid-template-columns: repeat(4, 1fr); }
  .product-grid, .admin-actions-grid { gap: calc(var(--spacing-unit) * 1); }
  .admin-actions-grid { grid-template-columns: repeat(3, 1fr); }
  .navbar { max-width: 960px; }

  /* Category Grid Desktop */
  .category-grid { grid-template-columns: repeat(8, 1fr); gap: var(--spacing-unit); }
  .category-icon-wrapper { width: 70px; height: 70px; border-radius: 22px; }
  .category-name { font-size: 0.85rem; }
  .category-icons-section { padding: calc(var(--spacing-unit) * 1.5); }

  .banner-slider-container { aspect-ratio: 24 / 6; }

} /* End @media (min-width: 992px) */


/* Extra large devices (large desktops, 1200px and up) */
@media (min-width: 1200px) {
    .container { max-width: 1140px; }
    .navbar { max-width: 1140px; }
    .admin-actions-grid { grid-template-columns: repeat(4, 1fr); }
    /* Optional: Increase product grid columns */
    /* .product-grid { grid-template-columns: repeat(5, 1fr); } */
    /* Category Grid Large Desktop */
    /* .category-grid { grid-template-columns: repeat(10, 1fr); } */
    .category-icon-wrapper { width: 75px; height: 75px; border-radius: 25px; }
} /* End @media (min-width: 1200px) */

/* Add this rule or adjust existing margins */
.admin-manage-container .form-group.mb-3 { /* Target the specific filter group */
  margin-bottom: var(--spacing-unit) !important; /* Ensure space below filter */
}

/* Style for the "no results" row */
#no-admin-orders-found td,
#no-seller-orders-found td,
#no-admin-products-found td,
#no-seller-products-found td,
#no-admin-users-found td {
    text-align: center;
    padding: var(--spacing-unit);
    color: var(--secondary-color);
    font-style: italic;
}

/* Ensure hidden rows are truly hidden */
tr.hidden {
    display: none !important;
}

/* ============================ */
/* **** Product Image Slider Styles **** */
/* ============================ */

/* Container for the image section (either single or slider) */
.product-detail-image-section {
  position: relative;
  width: 100%; /* Full width on mobile */
  max-width: 450px; /* Limit width on larger screens if needed */
  margin: 0 auto var(--spacing-unit) auto; /* Center and add bottom margin on mobile */
  aspect-ratio: 1 / 1; /* Maintain square aspect ratio */
  overflow: hidden;
  border-radius: calc(var(--border-radius) + 2px);
  background-color: #f8f9fa; /* Placeholder background */
  border: 1px solid var(--border-color); /* Add a subtle border */
}
/* Desktop Layout Alignment (aligns with existing product detail layout) */
@media (min-width: 768px) {
  .product-detail-image-section {
      flex: 1 1 40%; /* Take 40% of the flex space */
      width: auto; /* Override mobile width */
      max-width: none; /* Remove max-width limit */
      margin: 0; /* Remove mobile margin */
  }
}

/* Slider specific container */
.product-image-slider-container {
  position: relative; /* Needed for absolute positioning of children */
  width: 100%;
  height: 100%;
  overflow: hidden; /* Hide slides outside the container */
  touch-action: pan-y; /* <<<--- ADD FOR PRODUCT SLIDER */
  -webkit-tap-highlight-color: transparent; /* <<<--- ADD FOR PRODUCT SLIDER */
}

.product-image-slides {
  position: relative;
  width: 100%;
  height: 100%;
}

/* Individual slide styling */
.product-image-slide {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0; /* Hidden by default */
  visibility: hidden;
  transition: opacity 0.5s ease-in-out; /* Smooth fade transition */
  background-color: #eee; /* Fallback background if image is slow */
}

/* Active slide is visible */
.product-image-slide.active {
  opacity: 1;
  visibility: visible;
  z-index: 1; /* Ensure active slide is on top */
}

/* The actual image element (shared by slider and single image) */
/* .product-detail-image styles are already defined above */

/* Slider Navigation Arrows */
.product-image-nav {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background-color: rgba(0, 0, 0, 0.4);
  color: white;
  border: none;
  border-radius: 50%;
  width: 30px; /* Adjust size as needed */
  height: 30px;
  font-size: 1rem; /* Adjust icon size */
  font-weight: bold;
  line-height: 1; /* Center icon vertically */
  cursor: pointer;
  z-index: 2; /* Above the slides */
  display: flex; /* Use flexbox to center icon */
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s ease;
  opacity: 0.8; /* Slightly transparent */
  -webkit-tap-highlight-color: transparent; /* Prevent blue highlight on mobile tap */
}
.product-image-nav:hover,
.product-image-nav:focus {
  background-color: rgba(0, 0, 0, 0.6);
  opacity: 1;
  outline: none; /* Remove default focus outline */
}
.product-image-prev { left: 8px; }
.product-image-next { right: 8px; }

/* Slider Navigation Dots */
.product-image-dots {
  position: absolute;
  bottom: 8px; /* Position dots at the bottom */
  left: 50%;
  transform: translateX(-50%); /* Center the dots horizontally */
  display: flex;
  gap: 6px; /* Space between dots */
  z-index: 2; /* Above the slides */
}
.product-image-dot {
  width: 7px; /* Size of the dots */
  height: 7px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.6); /* Semi-transparent white */
  border: 1px solid rgba(0, 0, 0, 0.3); /* Subtle border */
  cursor: pointer;
  padding: 0;
  transition: background-color 0.3s ease;
  -webkit-tap-highlight-color: transparent; /* Prevent blue highlight on mobile tap */
}
.product-image-dot.active {
  background-color: white; /* Active dot is solid white */
}
.product-image-dot:focus {
   outline: 1px dotted white; /* Simple focus style for accessibility */
   outline-offset: 1px;
}


/* Optional: Container for the single image case (if you added it in the EJS) */
.product-detail-image-single {
  width: 100%;
  height: 100%;
}

/* --- End Product Image Slider Styles --- */

public/js/main.js:
// public/js/main.js
console.log("Main JS loaded.");

document.addEventListener('DOMContentLoaded', () => {

    // --- Button Spinner Logic ---
    document.querySelectorAll('form.form-submit-spinner').forEach(form => {
        form.addEventListener('submit', (event) => {
            const submitButton = form.querySelector('button[type="submit"]');
            if (submitButton && !submitButton.disabled) {
                // Basic HTML5 validation check
                if (typeof form.checkValidity === 'function' && !form.checkValidity()) {
                    // If form is invalid, don't disable button or show spinner
                    return;
                }
                const originalText = submitButton.innerHTML;
                submitButton.dataset.originalText = originalText; // Store original HTML
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Working...';

                // Reset button if user navigates back without form submitting (browser specific)
                window.addEventListener('pageshow', function(pageEvent) { // Renamed event variable
                    if (pageEvent.persisted && submitButton.disabled) {
                        // Restore button only if it still has the loading state
                        if (submitButton.dataset.originalText) {
                            submitButton.innerHTML = submitButton.dataset.originalText;
                        }
                        submitButton.disabled = false;
                    }
                });
            }
        });
    });

    // --- Responsive Table Logic ---
    function responsiveTables() {
        const tables = document.querySelectorAll('.data-table');
        tables.forEach(table => {
            const headerElements = table.querySelectorAll('thead th');
            if (!headerElements || headerElements.length === 0) return;

            const headers = Array.from(headerElements).map(th => th.textContent.trim());
            const rows = table.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                cells.forEach((cell, index) => {
                    // Add data-label only if it doesn't exist and header exists
                    if (!cell.hasAttribute('data-label') && headers[index] !== undefined && headers[index] !== '') {
                         cell.setAttribute('data-label', headers[index]);
                    }
                });
            });
        });
    }
     if (document.querySelector('.data-table')) {
         responsiveTables();
     }

    // --- Share Button Logic ---
    const shareButton = document.getElementById('share-product-btn');
    const fallbackLinks = document.getElementById('fallback-share-links');
    if (shareButton && fallbackLinks) {
        shareButton.addEventListener('click', async () => {
            const title = shareButton.dataset.title || document.title; // Fallback to page title
            const text = shareButton.dataset.text || `Check out ${title}`; // Fallback text
            const url = shareButton.dataset.url || window.location.href; // Fallback url

            if (navigator.share) {
                try {
                    await navigator.share({ title, text, url });
                    console.log('Product shared successfully!');
                    showToast('Link shared!', 'success'); // Optional feedback
                } catch (error) {
                    console.error('Error sharing:', error);
                    // Don't show fallback if user explicitly cancelled (AbortError)
                    if (error.name !== 'AbortError') {
                         fallbackLinks.classList.remove('hidden');
                         showToast('Sharing failed, use fallback links.', 'warning');
                    }
                }
            } else {
                console.log('Web Share API not supported, showing fallback links.');
                fallbackLinks.classList.remove('hidden');
                showToast('Web Share not supported, use link options.', 'info');
            }
        });
    }

    // --- Profile Page Specific Logic ---
    const profilePage = document.querySelector('.profile-container'); // Check if we are on profile page
    if (profilePage) {
        // --- Address Edit/Add Logic ---
        const editAddressBtn = document.getElementById('edit-address-btn');
        const addAddressBtn = document.getElementById('add-address-btn'); // Get the Add button
        const cancelAddressBtn = document.getElementById('cancel-edit-btn');
        const addressForm = document.getElementById('address-form');
        const savedAddressDiv = document.getElementById('saved-address-display');

        const showAddressForm = () => {
            if (!addressForm || !savedAddressDiv) return;
            addressForm.classList.remove('hidden');
            const isEditing = savedAddressDiv.querySelector('strong') !== null;
            addressForm.querySelector('h3').textContent = isEditing ? 'Edit Address' : 'Add Address';
            savedAddressDiv.classList.add('hidden');
            if (addAddressBtn) addAddressBtn.classList.add('hidden'); // Hide Add button when form is visible
            if (cancelAddressBtn) cancelAddressBtn.classList.remove('hidden'); // Always show Cancel when form is open

            // Trigger pincode check for edit
            const pincodeInput = addressForm.querySelector('#profile-pincode');
            const localitySelect = addressForm.querySelector('#profile-locality');
            // Get the potentially pre-filled value from the EJS render
            const savedLocality = localitySelect ? localitySelect.dataset.savedValue : null;

            if (pincodeInput && pincodeInput.value.length === 6 && /^\d{6}$/.test(pincodeInput.value)) {
                fetchPincodeData(pincodeInput.value, 'profile', savedLocality); // Pass saved locality
            } else if (localitySelect) {
                // Ensure locality is reset if pincode isn't valid when opening form
                localitySelect.innerHTML = '<option value="" selected disabled>Enter Pincode First</option>';
                localitySelect.disabled = true;
            }
        };

        const hideAddressForm = () => {
            if (!addressForm || !savedAddressDiv) return;
            addressForm.classList.add('hidden');
            savedAddressDiv.classList.remove('hidden'); // Show the container (has address or "No address" text)
            if (cancelAddressBtn) cancelAddressBtn.classList.add('hidden');
            // Show Add button only if there's no saved address content
            if (!savedAddressDiv.querySelector('strong') && addAddressBtn) {
                 addAddressBtn.classList.remove('hidden');
            }
            // Clear status messages when hiding
            const statusElement = addressForm.querySelector('.pincode-status');
            if (statusElement) statusElement.textContent = '';
             // Also clear locality dropdown and other derived fields
            clearAutoFilledFields('profile'); // This will reset locality too
        };

        if (editAddressBtn) {
            editAddressBtn.addEventListener('click', showAddressForm);
        }
        if (addAddressBtn) {
             addAddressBtn.addEventListener('click', () => {
                 if(addressForm) addressForm.reset(); // Clear form fields when adding new
                 clearAutoFilledFields('profile'); // Clear auto-filled fields too
                 showAddressForm();
             });
        }
        if (cancelAddressBtn) {
            cancelAddressBtn.addEventListener('click', hideAddressForm);
        }

        // Initial state check: Show Add button only if no address exists and form is hidden
        if (savedAddressDiv && addressForm && addAddressBtn) {
            if (!savedAddressDiv.querySelector('strong') && addressForm.classList.contains('hidden')) {
                addAddressBtn.classList.remove('hidden');
            } else {
                 addAddressBtn.classList.add('hidden');
            }
        }


        // --- Name Edit Logic ---
        const editNameBtn = document.getElementById('edit-name-btn');
        const cancelNameBtn = document.getElementById('cancel-edit-name-btn');
        const nameForm = document.getElementById('name-form');
        const savedNameDisplaySpan = document.getElementById('saved-name-display');
        const nameInput = document.getElementById('name-input');
        const displayUserNameStrong = document.getElementById('display-user-name');

        const showNameForm = () => {
            if (!nameForm || !savedNameDisplaySpan || !editNameBtn) return;
            nameForm.classList.remove('hidden');
            savedNameDisplaySpan.classList.add('hidden');
            editNameBtn.classList.add('hidden');
            if(displayUserNameStrong) nameInput.value = displayUserNameStrong.textContent;
            nameInput.focus();
        };

        const hideNameForm = () => {
            if (!nameForm || !savedNameDisplaySpan || !editNameBtn || !displayUserNameStrong) return;
            nameForm.classList.add('hidden');
            savedNameDisplaySpan.classList.remove('hidden');
            editNameBtn.classList.remove('hidden');
            nameInput.value = displayUserNameStrong.textContent;
        };

        if (editNameBtn) {
            editNameBtn.addEventListener('click', showNameForm);
        }

        if (cancelNameBtn) {
            cancelNameBtn.addEventListener('click', hideNameForm);
        }
    } // End if (profilePage)

    // --- Checkout Address Toggle Logic ---
    const checkoutPage = document.querySelector('.checkout-container'); // Check if on checkout page
    if (checkoutPage) {
        const checkoutEditBtn = checkoutPage.querySelector('.checkout-address #edit-address-btn');
        const checkoutCancelBtn = checkoutPage.querySelector('.checkout-address #cancel-edit-btn');
        const checkoutAddressForm = checkoutPage.querySelector('.checkout-address #address-form');
        const checkoutSavedAddressDiv = checkoutPage.querySelector('.checkout-address .saved-address');
        const placeOrderBtn = checkoutPage.querySelector('.btn-place-order');
        const hasInitialAddress = checkoutSavedAddressDiv && !checkoutSavedAddressDiv.classList.contains('hidden');

        if (checkoutEditBtn) {
            checkoutEditBtn.addEventListener('click', () => {
                if (!checkoutAddressForm || !checkoutSavedAddressDiv) return;
                checkoutAddressForm.classList.remove('hidden');
                checkoutSavedAddressDiv.classList.add('hidden');
                if(placeOrderBtn) placeOrderBtn.disabled = true;
                checkoutAddressForm.querySelector('h3').textContent = 'Edit Address';
                if (checkoutCancelBtn) checkoutCancelBtn.classList.remove('hidden');

                // Trigger pincode check for edit
                const pincodeInput = checkoutAddressForm.querySelector('#checkout-pincode');
                const localitySelect = checkoutAddressForm.querySelector('#checkout-locality');
                const savedLocality = localitySelect ? localitySelect.dataset.savedValue : null;

                if (pincodeInput && pincodeInput.value.length === 6 && /^\d{6}$/.test(pincodeInput.value)) {
                    fetchPincodeData(pincodeInput.value, 'checkout', savedLocality); // Pass saved locality
                } else if (localitySelect){
                    localitySelect.innerHTML = '<option value="" selected disabled>Enter Pincode First</option>';
                    localitySelect.disabled = true;
                }
            });
        }

        if (checkoutCancelBtn) {
            checkoutCancelBtn.addEventListener('click', () => {
                if (!checkoutAddressForm || !checkoutSavedAddressDiv) return;
                checkoutAddressForm.classList.add('hidden');
                if (hasInitialAddress) {
                    checkoutSavedAddressDiv.classList.remove('hidden');
                    if(placeOrderBtn) placeOrderBtn.disabled = false;
                } else {
                    if(placeOrderBtn) placeOrderBtn.disabled = true;
                }
                checkoutCancelBtn.classList.add('hidden');
                // Clear status messages when hiding
                const statusElement = checkoutAddressForm.querySelector('.pincode-status');
                if (statusElement) statusElement.textContent = '';
                clearAutoFilledFields('checkout'); // Reset locality too
            });
        }

        // Initialize form state on page load
        if (!hasInitialAddress && checkoutAddressForm) {
            checkoutAddressForm.classList.remove('hidden');
            if (placeOrderBtn) placeOrderBtn.disabled = true;
            checkoutAddressForm.querySelector('h3').textContent = 'Add Shipping Address';
            if (checkoutCancelBtn) checkoutCancelBtn.classList.add('hidden');
        } else if (hasInitialAddress && checkoutAddressForm) {
            checkoutAddressForm.classList.add('hidden');
            if (placeOrderBtn) placeOrderBtn.disabled = false;
            if (checkoutCancelBtn) checkoutCancelBtn.classList.add('hidden');
        }
    } // End if(checkoutPage)


    // --- Cart Update AJAX Logic ---
    const updateQtyButtons = document.querySelectorAll('.btn-update-qty');
    updateQtyButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            e.preventDefault();
            const productId = button.dataset.productId;
            const quantityInput = document.getElementById(`quantity-${productId}`);
            if (!quantityInput) return;
            const newQuantity = parseInt(quantityInput.value, 10);

            if (!quantityInput.dataset.originalValue) {
                quantityInput.dataset.originalValue = quantityInput.value;
            }

            if (isNaN(newQuantity) || newQuantity < 0) {
                 showToast('Invalid quantity entered.', 'danger');
                 quantityInput.value = quantityInput.dataset.originalValue;
                return;
             }
            const maxStock = parseInt(quantityInput.max, 10);
            if (!isNaN(maxStock) && newQuantity > maxStock) {
                showToast(`Only ${maxStock} items available in stock.`, 'warning');
                quantityInput.value = maxStock;
                 return;
             }
            updateCartItemQuantityAJAX(productId, newQuantity, button, quantityInput);
        });
    });


    // ========================================
    // Dynamic Search Bar Logic
    // ========================================
    const searchContainer = document.getElementById('dynamic-search-container');
    const searchToggleBtn = document.getElementById('search-toggle-btn');
    const searchForm = document.getElementById('dynamic-search-form');
    const searchInput = document.getElementById('search-input-dynamic');
    const suggestionsDropdown = document.getElementById('suggestions-dropdown');
    let suggestionFetchTimeout;

    if (searchToggleBtn && searchContainer) {
        searchToggleBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            searchContainer.classList.toggle('active');
            if (searchContainer.classList.contains('active')) {
                requestAnimationFrame(() => { if(searchInput) searchInput.focus(); });
            } else {
                if(suggestionsDropdown) suggestionsDropdown.classList.remove('active');
            }
        });
    }

    if (searchInput && suggestionsDropdown) {
        searchInput.addEventListener('input', () => {
            const query = searchInput.value.trim();
            clearTimeout(suggestionFetchTimeout);

            if (query.length >= 2) {
                suggestionsDropdown.innerHTML = '<div class="suggestion-item"><i>Loading...</i></div>';
                suggestionsDropdown.classList.add('active');
                suggestionFetchTimeout = setTimeout(() => {
                    fetchSuggestions(query);
                }, 300);
            } else {
                suggestionsDropdown.innerHTML = '';
                suggestionsDropdown.classList.remove('active');
            }
        });

        searchInput.addEventListener('focus', () => {
             const query = searchInput.value.trim();
              const hasActualSuggestions = suggestionsDropdown.querySelector('a.suggestion-item');
              if (query.length >= 2 && hasActualSuggestions) {
                 suggestionsDropdown.classList.add('active');
             }
        });
    }

     async function fetchSuggestions(query) {
         if (!suggestionsDropdown) return;
         try {
             const response = await fetch(`/products/suggestions?q=${encodeURIComponent(query)}`);
             if (!response.ok) {
                 let errorMsg = `HTTP error! status: ${response.status}`;
                 try { const errorData = await response.json(); errorMsg = errorData.error || errorMsg; } catch (parseError) {}
                 throw new Error(errorMsg);
             }
             const suggestions = await response.json();
             displaySuggestions(suggestions);
         } catch (error) {
             console.error('Error fetching suggestions:', error);
             suggestionsDropdown.innerHTML = `<div class="suggestion-item text-danger"><i>Error: ${error.message || 'Failed to fetch'}</i></div>`;
             suggestionsDropdown.classList.add('active');
         }
     }

     function displaySuggestions(suggestions) {
          if (!suggestionsDropdown) return;
         suggestionsDropdown.innerHTML = '';
         if (suggestions.length > 0) {
             suggestions.forEach(product => {
                 const item = document.createElement('a');
                 item.classList.add('suggestion-item');
                 item.href = `/products/${product._id}`;
                 // Basic sanitization for display
                 const safeName = product.name ? product.name.replace(/</g, "<").replace(/>/g, ">") : '[No Name]';
                 const safeImageUrl = product.imageUrl ? product.imageUrl.replace(/</g, "<").replace(/>/g, ">") : '/images/placeholder.png';
                 item.innerHTML = `
                    <img src="${safeImageUrl}" alt="" loading="lazy">
                    <span>${safeName}</span>
                 `;
                 suggestionsDropdown.appendChild(item);
             });
             suggestionsDropdown.classList.add('active');
         } else {
              suggestionsDropdown.innerHTML = '<div class="suggestion-item text-muted"><i>No matching products found.</i></div>';
              suggestionsDropdown.classList.add('active');
         }
     }

     // Global click listener to close search/suggestions
     document.addEventListener('click', (e) => {
         if (searchContainer && suggestionsDropdown && searchToggleBtn && !searchContainer.contains(e.target) && !searchToggleBtn.contains(e.target)) {
             searchContainer.classList.remove('active');
             suggestionsDropdown.classList.remove('active');
         }
     });

     // Handle clicks within the suggestions dropdown
     if(suggestionsDropdown) {
         suggestionsDropdown.addEventListener('click', (e) => {
             const link = e.target.closest('a.suggestion-item');
             if (!link) {
                 // Prevent closing if clicking inside the dropdown but not on a link
                 e.stopPropagation();
             } else {
                 // Allow link navigation and close dropdown/search
                 suggestionsDropdown.classList.remove('active');
                 if (searchContainer && window.innerWidth < 768) { // Only hide container on mobile
                    searchContainer.classList.remove('active');
                 }
             }
         });
     }
    // ========================================
    // End Dynamic Search Bar Logic
    // ========================================


    // ========================================
    // Toast Notification Logic
    // ========================================
    const toastContainer = document.querySelector('.toast-container');
    if (toastContainer) {
        const toastElements = toastContainer.querySelectorAll('.toast');

        toastElements.forEach((toastElement) => {
            const closeButton = toastElement.querySelector('.toast-close-btn');
            const autoHideDelay = 5000;
            let hideTimeoutId;

            const dismissToast = () => {
                clearTimeout(hideTimeoutId);
                if (toastElement.classList.contains('hide') || !toastElement.parentNode) return;
                toastElement.classList.remove('show');
                toastElement.classList.add('hide');
                toastElement.addEventListener('transitionend', (event) => {
                    if ((event.propertyName === 'opacity' || event.propertyName === 'transform') && toastElement.classList.contains('hide') && toastElement.parentNode) {
                         try { toastElement.remove(); } catch(e) { console.warn("Error removing toast:", e); }
                    }
                }, { once: true });
            };

            // Show toast initially
            setTimeout(() => {
                if (toastElement.parentNode) {
                   toastElement.classList.add('show');
                }
            }, 10);

             // Auto hide
             hideTimeoutId = setTimeout(dismissToast, autoHideDelay);

            // Manual close
            if (closeButton) {
                closeButton.addEventListener('click', dismissToast);
            }

             // Pause on hover
             toastElement.addEventListener('mouseenter', () => clearTimeout(hideTimeoutId));
             toastElement.addEventListener('mouseleave', () => hideTimeoutId = setTimeout(dismissToast, autoHideDelay / 2));

        });
    }
    // ========================================
    // End Toast Notification Logic
    // ========================================

    // --- Rating Stats Bar Animation ---
    document.querySelectorAll('.rating-bar-fill').forEach(function(el) {
        var width = el.getAttribute('data-width');
        if (width) {
            requestAnimationFrame(() => {
                 if(el.parentNode) {
                    el.style.width = width + '%';
                 }
            });
        }
    });

    // ========================================
    // Loading State for Non-Form Actions (e.g., Proceed to Checkout)
    // ========================================
    const proceedCheckoutBtn = document.getElementById('btn-proceed-checkout');
    if (proceedCheckoutBtn) {
        const originalCheckoutText = proceedCheckoutBtn.innerHTML;
        const loadingCheckoutText = proceedCheckoutBtn.dataset.loadingText || '<i class="fas fa-spinner fa-spin"></i> Loading...';

        proceedCheckoutBtn.addEventListener('click', function(event) {
            if (proceedCheckoutBtn.classList.contains('loading')) {
                event.preventDefault();
                return;
            }
            proceedCheckoutBtn.classList.add('loading');
            proceedCheckoutBtn.innerHTML = loadingCheckoutText;
            proceedCheckoutBtn.style.pointerEvents = 'none';
            proceedCheckoutBtn.setAttribute('aria-disabled', 'true');
        });

        window.addEventListener('pageshow', function(pageEvent) {
            if (pageEvent.persisted && proceedCheckoutBtn.classList.contains('loading')) {
                proceedCheckoutBtn.classList.remove('loading');
                proceedCheckoutBtn.innerHTML = originalCheckoutText;
                proceedCheckoutBtn.style.pointerEvents = 'auto';
                proceedCheckoutBtn.removeAttribute('aria-disabled');
            }
        });
    }
    // ========================================
    // End Loading State for Non-Form Actions
    // ========================================

    // ========================================
    // Homepage Banner Slider Logic (with Touch Events)
    // ========================================
    const sliderContainer = document.querySelector('[data-slider-container]');
    if (sliderContainer) {
        const slides = sliderContainer.querySelectorAll('[data-slide]');
        const prevBtn = sliderContainer.querySelector('[data-slider-prev]');
        const nextBtn = sliderContainer.querySelector('[data-slider-next]');
        const dotsContainer = sliderContainer.querySelector('[data-slider-dots]');
        const dots = dotsContainer ? dotsContainer.querySelectorAll('[data-slide-to]') : [];

        let currentSlideIndex = 0;
        let autoSlideInterval = null;
        const slideIntervalTime = 5000;

        let isDragging = false;
        let startX = 0;
        let currentX = 0;
        let diffX = 0;
        const swipeThreshold = 50;

        function showSlide(index) {
            if (!slides || slides.length === 0) return;
            const newIndex = (index % slides.length + slides.length) % slides.length;
            slides.forEach((slide, i) => { slide.classList.toggle('active', i === newIndex); });
            dots.forEach((dot, i) => { dot.classList.toggle('active', i === newIndex); });
            currentSlideIndex = newIndex;
        }

        function nextSlide() { showSlide(currentSlideIndex + 1); }
        function prevSlide() { showSlide(currentSlideIndex - 1); }

        function startAutoSlide() {
            clearInterval(autoSlideInterval);
            if (slides.length > 1) {
                autoSlideInterval = setInterval(nextSlide, slideIntervalTime);
            }
        }

        function handleTouchStart(event) {
            if (slides.length <= 1) return;
            isDragging = true;
            startX = event.touches[0].pageX;
            currentX = startX;
            diffX = 0;
            clearInterval(autoSlideInterval);
        }

        function handleTouchMove(event) {
            if (!isDragging || slides.length <= 1) return;
            currentX = event.touches[0].pageX;
            diffX = startX - currentX;
            if (Math.abs(diffX) > 10) { event.preventDefault(); }
        }

        function handleTouchEnd() {
            if (!isDragging || slides.length <= 1) return;
            isDragging = false;
            if (Math.abs(diffX) > swipeThreshold) {
                if (diffX > 0) { nextSlide(); } else { prevSlide(); }
            }
            startX = 0; currentX = 0; diffX = 0;
            startAutoSlide();
        }

        if (slides.length > 0) { showSlide(0); startAutoSlide(); }
        if (nextBtn) { nextBtn.addEventListener('click', () => { nextSlide(); startAutoSlide(); }); }
        if (prevBtn) { prevBtn.addEventListener('click', () => { prevSlide(); startAutoSlide(); }); }
        if (dotsContainer) {
            dotsContainer.addEventListener('click', (e) => {
                const targetDot = e.target.closest('[data-slide-to]');
                if (targetDot) {
                    const index = parseInt(targetDot.dataset.slideTo, 10);
                    if (!isNaN(index)) { showSlide(index); startAutoSlide(); }
                }
            });
        }

        sliderContainer.addEventListener('touchstart', handleTouchStart, { passive: true });
        sliderContainer.addEventListener('touchmove', handleTouchMove, { passive: false });
        sliderContainer.addEventListener('touchend', handleTouchEnd);
        sliderContainer.addEventListener('touchcancel', handleTouchEnd);
        sliderContainer.addEventListener('mouseenter', () => { clearInterval(autoSlideInterval); });
        sliderContainer.addEventListener('mouseleave', () => { startAutoSlide(); });
    }
    // ========================================
    // End Homepage Banner Slider Logic
    // ========================================


    // ========================================
    // Pincode Lookup Logic (UPDATED for Locality)
    // ========================================
    const pincodeInputs = document.querySelectorAll('.pincode-input');
    let pincodeTimeout;

    pincodeInputs.forEach(input => {
        const targetPrefix = input.dataset.targetPrefix;
        if (!targetPrefix) {
            console.warn("Pincode input missing data-target-prefix:", input);
            return;
        }

        // Get Locality Select Element
        const localitySelect = document.getElementById(`${targetPrefix}-locality`);
        if (!localitySelect) {
            console.warn(`Locality select not found for prefix ${targetPrefix}`);
            return;
        }

        input.addEventListener('input', () => {
            clearTimeout(pincodeTimeout);
            const pincode = input.value.trim();
            const statusElement = input.nextElementSibling;

            // Basic validation and clearing
            if (pincode.length < 6) {
                clearAutoFilledFields(targetPrefix); // Clears locality too
                if (statusElement) {
                    statusElement.textContent = '';
                    statusElement.className = 'pincode-status text-muted'; // Reset class
                }
                if (pincode.length > 0 && !/^\d*$/.test(pincode)) {
                    if (statusElement) {
                        statusElement.textContent = 'Digits only';
                        statusElement.className = 'pincode-status text-danger';
                    }
                }
                return;
            }

            if (pincode.length === 6 && /^\d{6}$/.test(pincode)) {
                if (statusElement) {
                    statusElement.textContent = 'Looking up...';
                    statusElement.className = 'pincode-status text-muted';
                }
                localitySelect.disabled = true;
                localitySelect.innerHTML = '<option value="" selected disabled>Looking up Pincode...</option>';

                pincodeTimeout = setTimeout(() => {
                    // Pass null for savedLocalityValue when triggered by input event
                    fetchPincodeData(pincode, targetPrefix, null);
                }, 500);
            } else if (pincode.length === 6) {
                clearAutoFilledFields(targetPrefix);
                if (statusElement) {
                    statusElement.textContent = 'Invalid Pincode (digits only)';
                    statusElement.className = 'pincode-status text-danger';
                }
            }
        });

        input.addEventListener('blur', () => {
            clearTimeout(pincodeTimeout);
            const pincode = input.value.trim();
            const targetPrefix = input.dataset.targetPrefix;
            const statusElement = input.nextElementSibling;
            const localitySelect = document.getElementById(`${targetPrefix}-locality`);

            if (pincode.length === 6 && /^\d{6}$/.test(pincode)) {
                if (statusElement && !statusElement.classList.contains('text-success') && statusElement.textContent !== 'Fetching...') {
                     statusElement.textContent = 'Looking up...';
                     statusElement.className = 'pincode-status text-muted';
                     // Pass null for savedLocalityValue on blur fetch
                     fetchPincodeData(pincode, targetPrefix, null);
                }
            } else if (pincode.length > 0) {
                 clearAutoFilledFields(targetPrefix);
                 if (statusElement) {
                    statusElement.textContent = 'Invalid Pincode';
                    statusElement.className = 'pincode-status text-danger';
                 }
            } else {
                  clearAutoFilledFields(targetPrefix);
                  if (statusElement) statusElement.textContent = '';
            }
        });

        // Initial check on page load for pre-filled pincodes
        const initialPincode = input.value.trim();
        // Get saved locality value from data attribute set in EJS
        const savedLocality = localitySelect.dataset.savedValue || null;

        if (initialPincode.length === 6 && /^\d{6}$/.test(initialPincode)) {
            const initialStatusElement = input.nextElementSibling;
            if (initialStatusElement) {
                initialStatusElement.textContent = 'Verifying...';
                 initialStatusElement.className = 'pincode-status text-muted';
            }
            localitySelect.disabled = true;
            localitySelect.innerHTML = '<option value="" selected disabled>Verifying Pincode...</option>';
            fetchPincodeData(initialPincode, targetPrefix, savedLocality); // Pass saved locality
        } else {
             localitySelect.disabled = true;
             localitySelect.innerHTML = '<option value="" selected disabled>Enter Pincode First</option>';
        }

    }); // end pincodeInputs.forEach

    async function fetchPincodeData(pincode, prefix, savedLocalityValue = null) {
        const stateInput = document.getElementById(`${prefix}-state`);
        const districtInput = document.getElementById(`${prefix}-district`);
        const mandalInput = document.getElementById(`${prefix}-mandal`);
        const stateHiddenInput = document.getElementById(`${prefix}-state-hidden`);
        const districtHiddenInput = document.getElementById(`${prefix}-district-hidden`);
        const mandalHiddenInput = document.getElementById(`${prefix}-mandal-hidden`);
        const containerDiv = document.getElementById(`${prefix}-auto-filled-fields`);
        const pincodeInput = document.getElementById(`${prefix}-pincode`);
        const pincodeStatusElement = pincodeInput?.nextElementSibling;
        const localitySelect = document.getElementById(`${prefix}-locality`);

        if (!stateInput || !districtInput || !mandalInput || !containerDiv || !pincodeStatusElement || !localitySelect || !stateHiddenInput || !districtHiddenInput || !mandalHiddenInput) {
            console.error("Pincode related elements not found for prefix:", prefix);
            if (pincodeStatusElement) { pincodeStatusElement.textContent = 'Setup Error'; pincodeStatusElement.className = 'pincode-status text-danger'; }
            if (localitySelect) { localitySelect.innerHTML = '<option value="" selected disabled>Setup Error</option>'; localitySelect.disabled = true; }
            return;
        }

        if (!pincodeStatusElement.classList.contains('text-success')) {
            pincodeStatusElement.textContent = 'Fetching...';
            pincodeStatusElement.className = 'pincode-status text-muted';
        }

        try {
            const response = await fetch(`/user/pincode-lookup/${pincode}`);
            const data = await response.json();

            if (!response.ok || !data.success) {
                 throw new Error(data.message || `Pincode ${response.statusText}`);
             }

            const location = data.location;
            stateInput.value = location.stateName || '';
            districtInput.value = location.districtName || '';
            mandalInput.value = location.mandalName || '';
            stateHiddenInput.value = location.stateName || '';
            districtHiddenInput.value = location.districtName || '';
            mandalHiddenInput.value = location.mandalName || '';

            // Populate Locality Dropdown
            populateLocalityDropdown(localitySelect, location.localities, savedLocalityValue);

            containerDiv.style.display = 'block';
            const firstLocality = location.localities && location.localities.length > 0 ? location.localities[0] : 'Area';
            pincodeStatusElement.textContent = `✓ Location found `;
            pincodeStatusElement.className = 'pincode-status text-success';

        } catch (error) {
             console.error('Pincode lookup error:', error);
             clearAutoFilledFields(prefix);
             pincodeStatusElement.textContent = `Error: ${error.message}`;
             pincodeStatusElement.className = 'pincode-status text-danger';
             localitySelect.innerHTML = '<option value="" selected disabled>Pincode Error</option>';
             localitySelect.disabled = true;
        }
    }

    function populateLocalityDropdown(selectElement, localities, valueToSelect = null) {
        if (!selectElement) return;
        selectElement.innerHTML = ''; // Clear existing

        if (localities && localities.length > 0) {
            const defaultOption = document.createElement('option');
            defaultOption.value = "";
            defaultOption.textContent = "Select Locality / Post Office...";
            defaultOption.disabled = true;
            defaultOption.selected = !valueToSelect; // Select if no value needs pre-selection
            selectElement.appendChild(defaultOption);

            let valueMatched = false;
            localities.forEach(locality => {
                const option = document.createElement('option');
                option.value = locality;
                option.textContent = locality;
                if (valueToSelect && locality === valueToSelect) {
                    option.selected = true;
                    valueMatched = true;
                }
                selectElement.appendChild(option);
            });
             if (valueMatched) {
                 defaultOption.selected = false;
             }

            selectElement.disabled = false;
        } else {
            selectElement.innerHTML = '<option value="" selected disabled>No Localities Found</option>';
            selectElement.disabled = true;
        }
    }

    function clearAutoFilledFields(prefix) {
        const stateInput = document.getElementById(`${prefix}-state`);
        const districtInput = document.getElementById(`${prefix}-district`);
        const mandalInput = document.getElementById(`${prefix}-mandal`);
        const stateHiddenInput = document.getElementById(`${prefix}-state-hidden`);
        const districtHiddenInput = document.getElementById(`${prefix}-district-hidden`);
        const mandalHiddenInput = document.getElementById(`${prefix}-mandal-hidden`);
        const containerDiv = document.getElementById(`${prefix}-auto-filled-fields`);
        const localitySelect = document.getElementById(`${prefix}-locality`);

        if (stateInput) stateInput.value = '';
        if (districtInput) districtInput.value = '';
        if (mandalInput) mandalInput.value = '';
        if (stateHiddenInput) stateHiddenInput.value = '';
        if (districtHiddenInput) districtHiddenInput.value = '';
        if (mandalHiddenInput) mandalHiddenInput.value = '';
        if (containerDiv) containerDiv.style.display = 'none';

        if (localitySelect) {
            localitySelect.innerHTML = '<option value="" selected disabled>Enter Pincode First</option>';
            localitySelect.disabled = true;
            localitySelect.value = '';
            localitySelect.dataset.savedValue = ''; // Clear saved value tracker
        }
         // Pincode status cleared by input event handler
    }
    // ========================================
    // End Pincode Lookup Logic
    // ========================================


    // ========================================
    // Live Order Filtering Logic
    // ========================================
    const orderFilterInput = document.getElementById('order-filter-input');
    const adminOrderTable = document.getElementById('admin-order-table');
    const sellerOrderTable = document.getElementById('seller-order-table');

    let targetOrderTableBody = null;
    let noOrderResultsRow = null;

    if (adminOrderTable) {
        targetOrderTableBody = adminOrderTable.querySelector('tbody');
        noOrderResultsRow = document.getElementById('no-admin-orders-found');
    } else if (sellerOrderTable) {
        targetOrderTableBody = sellerOrderTable.querySelector('tbody');
        noOrderResultsRow = document.getElementById('no-seller-orders-found');
    }

    if (orderFilterInput && targetOrderTableBody && noOrderResultsRow) {
        orderFilterInput.addEventListener('input', () => {
            const filterValue = orderFilterInput.value.trim().toLowerCase();
            const rows = targetOrderTableBody.querySelectorAll('tr.order-row');
            let matchFound = false;

            rows.forEach(row => {
                const rowText = row.textContent.toLowerCase();
                if (filterValue === '' || rowText.includes(filterValue)) {
                    row.style.display = '';
                    matchFound = true;
                } else {
                    row.style.display = 'none';
                }
            });

            if (!matchFound && rows.length > 0) {
                noOrderResultsRow.classList.remove('hidden');
                noOrderResultsRow.style.display = '';
            } else {
                noOrderResultsRow.classList.add('hidden');
                noOrderResultsRow.style.display = 'none';
            }
        });
    }
    // ========================================
    // End Live Order Filtering Logic
    // ========================================


    // ========================================
    // Live Product/User Filtering Logic (Refactored)
    // ========================================
    function setupLiveFilter(inputId, tableId, noResultsId, rowSelector) {
        const filterInput = document.getElementById(inputId);
        const table = document.getElementById(tableId);
        const noResultsRow = document.getElementById(noResultsId);

        if (filterInput && table && noResultsRow) {
            const tableBody = table.querySelector('tbody');
            if (!tableBody) return;

            filterInput.addEventListener('input', () => {
                const filterValue = filterInput.value.trim().toLowerCase();
                const rows = tableBody.querySelectorAll(rowSelector); // Use the specific row selector
                let matchFound = false;

                rows.forEach(row => {
                    const rowText = row.textContent.toLowerCase();
                    if (filterValue === '' || rowText.includes(filterValue)) {
                        row.style.display = ''; // Use default display (usually 'table-row')
                        matchFound = true;
                    } else {
                        row.style.display = 'none';
                    }
                });

                // Toggle visibility of the "no results" row
                if (!matchFound && rows.length > 0) {
                    noResultsRow.classList.remove('hidden');
                    noResultsRow.style.display = ''; // Use default display
                } else {
                    noResultsRow.classList.add('hidden');
                    noResultsRow.style.display = 'none';
                }
            });
        }
    }
    // Apply the filter to different tables
    setupLiveFilter('admin-product-filter-input', 'admin-product-table', 'no-admin-products-found', 'tr.product-row');
    setupLiveFilter('seller-product-filter-input', 'seller-product-table', 'no-seller-products-found', 'tr.product-row');
    setupLiveFilter('user-filter-input', 'admin-user-table', 'no-admin-users-found', 'tr.user-row');
    // ========================================
    // End Live Filtering Logic
    // ========================================


    // ========================================
    // Product Image Slider Logic (with Touch)
    // ========================================
    const imageSlider = document.querySelector('[data-product-image-slider]');
    if (imageSlider) {
        const slides = imageSlider.querySelectorAll('[data-product-slide]');
        const prevBtn = imageSlider.querySelector('[data-product-image-nav="prev"]');
        const nextBtn = imageSlider.querySelector('[data-product-image-nav="next"]');
        const dots = imageSlider.querySelectorAll('[data-product-image-dot]');
        let currentImageIndex = 0;

        let isProductDragging = false;
        let productStartX = 0;
        let productCurrentX = 0;
        let productDiffX = 0;
        const productSwipeThreshold = 50;

        function showProductImage(index) {
            if (!slides || slides.length < 2) return;
            const newIndex = (index % slides.length + slides.length) % slides.length;
            slides.forEach((slide, i) => { slide.classList.toggle('active', i === newIndex); });
            dots.forEach((dot, i) => { dot.classList.toggle('active', i === newIndex); });
            currentImageIndex = newIndex;
        }

        function handleProductTouchStart(event) {
            if (slides.length <= 1) return;
            isProductDragging = true;
            productStartX = event.touches[0].pageX;
            productCurrentX = productStartX;
            productDiffX = 0;
        }

        function handleProductTouchMove(event) {
            if (!isProductDragging || slides.length <= 1) return;
            productCurrentX = event.touches[0].pageX;
            productDiffX = productStartX - productCurrentX;
            if (Math.abs(productDiffX) > 10) { event.preventDefault(); }
        }

        function handleProductTouchEnd() {
            if (!isProductDragging || slides.length <= 1) return;
            isProductDragging = false;
            if (Math.abs(productDiffX) > productSwipeThreshold) {
                if (productDiffX > 0) { showProductImage(currentImageIndex + 1); }
                else { showProductImage(currentImageIndex - 1); }
            }
            productStartX = 0; productCurrentX = 0; productDiffX = 0;
        }

        if (slides.length > 1) {
            if (nextBtn) { nextBtn.addEventListener('click', () => showProductImage(currentImageIndex + 1)); }
            if (prevBtn) { prevBtn.addEventListener('click', () => showProductImage(currentImageIndex - 1)); }
            dots.forEach(dot => {
                dot.addEventListener('click', () => {
                    const index = parseInt(dot.dataset.productImageDot, 10);
                    if (!isNaN(index)) { showProductImage(index); }
                });
            });
            imageSlider.addEventListener('touchstart', handleProductTouchStart, { passive: true });
            imageSlider.addEventListener('touchmove', handleProductTouchMove, { passive: false });
            imageSlider.addEventListener('touchend', handleProductTouchEnd);
            imageSlider.addEventListener('touchcancel', handleProductTouchEnd);
        } else {
            if (nextBtn) nextBtn.style.display = 'none';
            if (prevBtn) prevBtn.style.display = 'none';
            const dotsContainer = imageSlider.querySelector('.product-image-dots');
            if (dotsContainer) dotsContainer.style.display = 'none';
        }

        if (slides.length > 0) { showProductImage(0); }
    }
    // ========================================
    // End Product Image Slider Logic
    // ========================================

    // ========================================
    // Password Visibility Toggle
    // ========================================
    document.querySelectorAll('.password-toggle-btn').forEach(button => {
        button.addEventListener('click', () => {
            const passwordInput = button.previousElementSibling; // Assumes input is directly before button
            if (passwordInput && (passwordInput.type === 'password' || passwordInput.type === 'text')) {
                // Toggle input type
                const isPassword = passwordInput.type === 'password';
                passwordInput.type = isPassword ? 'text' : 'password';

                // Toggle icon
                const icon = button.querySelector('i');
                if (icon) {
                    icon.classList.toggle('fa-eye', !isPassword);
                    icon.classList.toggle('fa-eye-slash', isPassword);
                }
            }
        });
    });
    // ========================================
    // End: Password Visibility Toggle
    // ========================================


    // ========================================
    // AJAX Add to Cart (Index Page) - MODIFIED
    // ========================================
    document.querySelectorAll('.btn-ajax-add-to-cart').forEach(button => {
        const originalHtml = button.innerHTML; // Store original button content
        const loadingHtml = '<i class="fas fa-spinner fa-spin"></i>';
        const successHtml = '<i class="fas fa-check"></i> Added';

        button.addEventListener('click', async () => {
            // *** NEW: Check authentication status ***
            const isAuthenticated = document.body.dataset.isAuthenticated === 'true';

            if (!isAuthenticated) {
                // Store a flag in sessionStorage to indicate the reason for redirection
                sessionStorage.setItem('showLoginRedirectToast', 'true');
                // Redirect to login page, preserving the current path as returnTo
                window.location.href = `/auth/login?returnTo=${encodeURIComponent(window.location.pathname + window.location.search)}`;
                return; // Stop further execution
            }
            // *** END: Check authentication status ***

            // --- Existing Logic (Runs only if authenticated) ---
            const productId = button.dataset.productId;
            if (!productId) {
                console.error('Product ID not found on button');
                showToast('Could not add item (missing ID).', 'danger');
                return;
            }
            const quantity = 1; // Always add 1 from index page

            // Set loading state
            button.disabled = true;
            button.classList.add('loading');
            button.innerHTML = loadingHtml;

            try {
                const response = await fetch('/user/cart/add-ajax', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        // Add CSRF token header if needed
                    },
                    body: JSON.stringify({ productId, quantity })
                });

                const data = await response.json();

                if (!response.ok || !data.success) {
                    throw new Error(data.message || `Failed to add item (${response.status})`);
                }

                // Success State
                showToast(data.message || 'Item added to cart!', 'success');
                updateCartBadge(data.cartItemCount);

                // Temporary success indication on button
                button.classList.remove('loading');
                button.classList.add('success');
                button.innerHTML = successHtml;

                // Revert button after a delay
                setTimeout(() => {
                    // Check if the button still exists before trying to modify it
                    if (document.body.contains(button)) {
                        button.disabled = false;
                        button.classList.remove('success');
                        button.innerHTML = originalHtml;
                    }
                }, 1500); // Revert after 1.5 seconds

            } catch (error) {
                console.error("AJAX Add to Cart error:", error);
                showToast(error.message || 'Could not add item to cart.', 'danger');
                // Revert button immediately on error
                 // Check if the button still exists before trying to modify it
                 if (document.body.contains(button)) {
                    button.disabled = false;
                    button.classList.remove('loading');
                    button.innerHTML = originalHtml;
                 }
            }
            // --- End Existing Logic ---
        });
    });
    // ========================================
    // End: AJAX Add to Cart (Index Page)
    // ========================================

    // ========================================
    // Check for Login Redirect Toast on Page Load
    // ========================================
    if (window.location.pathname === '/auth/login') {
        const showToastFlag = sessionStorage.getItem('showLoginRedirectToast');
        if (showToastFlag === 'true') {
            showToast('Please log in to add items to your cart.', 'info');
            // Remove the flag so it doesn't show again on refresh
            sessionStorage.removeItem('showLoginRedirectToast');
        }
    }
    // ========================================
    // End: Check for Login Redirect Toast
    // ========================================

}); // End DOMContentLoaded


// --- Helper Functions (Outside DOMContentLoaded) ---

// --- Cart Update AJAX Function ---
async function updateCartItemQuantityAJAX(productId, quantity, buttonElement, quantityInputElement) {
     const originalButtonText = 'Add'; // Consider changing this if needed
     const loadingButtonText = '<i class="fas fa-spinner fa-spin"></i>';
     const cartItemDiv = buttonElement.closest('.cart-item');

     buttonElement.disabled = true;
     buttonElement.innerHTML = loadingButtonText;
     if(quantityInputElement) quantityInputElement.readOnly = true;

    try {
        const response = await fetch('/user/cart/update', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', },
            body: JSON.stringify({ productId, quantity })
         });

        const data = await response.json();

        if (!response.ok) {
             if (data.removal === true) {
                 showToast(data.message || 'Item unavailable and removed.', 'warning');
                 if (cartItemDiv) {
                    cartItemDiv.style.transition = 'opacity 0.3s ease, height 0.3s ease, margin 0.3s ease, padding 0.3s ease, border 0.3s ease';
                    cartItemDiv.style.opacity = '0';
                    cartItemDiv.style.height = '0';
                    cartItemDiv.style.paddingTop = '0';
                    cartItemDiv.style.paddingBottom = '0';
                    cartItemDiv.style.marginBottom = '0';
                    cartItemDiv.style.borderWidth = '0';
                     setTimeout(() => {
                         if (cartItemDiv.parentNode) cartItemDiv.remove();
                         // --- UPDATED: Call updateCartBadge only ---
                         updateCartBadgeOnly();
                         // --- END UPDATE ---
                         handleEmptyCartDisplay();
                     }, 300);
                     return; // Exit after starting removal animation
                 }
             } else {
                 throw new Error(data.message || `Update failed (Status: ${response.status})`);
             }
        }

         if (data.success) {
             if(quantityInputElement) quantityInputElement.dataset.originalValue = data.newQuantity;

             if (quantity === 0) {
                if (cartItemDiv) {
                    cartItemDiv.style.transition = 'opacity 0.3s ease, height 0.3s ease, margin 0.3s ease, padding 0.3s ease, border 0.3s ease';
                    cartItemDiv.style.opacity = '0';
                    cartItemDiv.style.height = '0';
                    cartItemDiv.style.paddingTop = '0';
                    cartItemDiv.style.paddingBottom = '0';
                    cartItemDiv.style.marginBottom = '0';
                    cartItemDiv.style.borderWidth = '0';
                    setTimeout(() => {
                        if (cartItemDiv.parentNode) {
                           cartItemDiv.remove();
                        }
                        updateCartTotalAndBadge(data.cartTotal); // Update total AND badge here
                        handleEmptyCartDisplay();
                        showToast('Item removed from cart.', 'success');
                    }, 300);
                     return; // Exit after starting removal animation
                }
             } else {
                 // Update UI for non-zero quantity
                 const subtotalSpan = cartItemDiv?.querySelector('.item-subtotal-value');
                 if (subtotalSpan) subtotalSpan.textContent = (data.itemSubtotal !== undefined ? data.itemSubtotal : 0).toFixed(2);
                 if(quantityInputElement) quantityInputElement.value = data.newQuantity;
                 updateCartTotalAndBadge(data.cartTotal); // Update total AND badge here
             }
         } else {
              showToast(`Update failed: ${data.message || 'Unknown error'}`, 'danger');
              if(quantityInputElement && quantityInputElement.dataset.originalValue) {
                  quantityInputElement.value = quantityInputElement.dataset.originalValue;
              }
         }

    } catch (error) {
         console.error('Error updating cart quantity:', error);
          showToast(`Error: ${error.message}`, 'danger');
          if(quantityInputElement && quantityInputElement.dataset.originalValue) {
            quantityInputElement.value = quantityInputElement.dataset.originalValue;
          }

    } finally {
         if (cartItemDiv && (!cartItemDiv.style.opacity || parseFloat(cartItemDiv.style.opacity) !== 0)) {
             buttonElement.disabled = false;
             buttonElement.innerHTML = originalButtonText;
             if(quantityInputElement) quantityInputElement.readOnly = false;
         }
     }
}

// --- Helper Function to Show Toasts Dynamically ---
function showToast(message, type = 'info') {
    const toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
        console.error("Toast container not found! Falling back to alert.");
        alert(message);
        return;
    }

    const toastElement = document.createElement('div');
    toastElement.className = `toast toast-${type}`;
    toastElement.setAttribute('role', 'alert');
    toastElement.setAttribute('aria-live', 'assertive');
    toastElement.setAttribute('aria-atomic', 'true');

    const sanitizedMessage = typeof message === 'string'
        ? message.replace(/</g, "<").replace(/>/g, ">")
        : 'An unexpected error occurred.';

    toastElement.innerHTML = `
        <div class="toast-body">
            ${sanitizedMessage}
            <button type="button" class="toast-close-btn" aria-label="Close">×</button>
        </div>
    `;

    const closeButton = toastElement.querySelector('.toast-close-btn');
    toastContainer.appendChild(toastElement);

    const autoHideDelay = 5000;
    let hideTimeoutId;

    const dismissToast = () => {
        clearTimeout(hideTimeoutId);
        if (toastElement.classList.contains('hide') || !toastElement.parentNode) return;
        toastElement.classList.remove('show');
        toastElement.classList.add('hide');
        toastElement.addEventListener('transitionend', (event) => {
            if ((event.propertyName === 'opacity' || event.propertyName === 'transform') && toastElement.classList.contains('hide') && toastElement.parentNode) {
                try { toastElement.remove(); } catch(e) { console.warn("Error removing toast:", e); }
            }
        }, { once: true });
    };

    setTimeout(() => {
        if (toastElement.parentNode) {
           toastElement.classList.add('show');
        }
    }, 10);

    hideTimeoutId = setTimeout(dismissToast, autoHideDelay);
    if (closeButton) { closeButton.addEventListener('click', dismissToast); }
    toastElement.addEventListener('mouseenter', () => clearTimeout(hideTimeoutId));
    toastElement.addEventListener('mouseleave', () => hideTimeoutId = setTimeout(dismissToast, autoHideDelay / 2));
}


// --- Helper Functions for Cart Badge and Empty Display ---

// Updates BOTH cart total display (on cart page) and header badge
function updateCartTotalAndBadge(newCartTotal) {
     const cartTotalSpan = document.getElementById('cart-total-value');
     if (cartTotalSpan) cartTotalSpan.textContent = (newCartTotal !== undefined ? newCartTotal : 0).toFixed(2);

     // --- UPDATED: Call the badge-specific update function ---
     updateCartBadgeOnly();
}

// --- ADDED: Function to ONLY update the header cart badge ---
// (Used by AJAX add-to-cart and can be called directly if needed)
function updateCartBadge(newCount) {
    const cartBadge = document.querySelector('.cart-badge');
    if (cartBadge) {
        if (newCount > 0) {
            cartBadge.textContent = newCount;
            cartBadge.classList.remove('hide');
        } else {
            cartBadge.textContent = '0';
            cartBadge.classList.add('hide');
        }
    }
}

// --- ADDED: Helper to update badge by recalculating from cart page elements ---
// (Used by updateCartItemQuantityAJAX after removing item)
function updateCartBadgeOnly() {
     const newCartItemCount = calculateNewCartCount();
     updateCartBadge(newCartItemCount);
}


function calculateNewCartCount() {
    // This calculation might be slightly off if called during the removal animation.
    // A more robust way is to get the count from the server response (as done in addToCartAjax).
    const cartItems = document.querySelectorAll('.cart-item');
    let count = 0;
    cartItems.forEach(item => {
        const style = window.getComputedStyle(item);
        // Check if item is visually present (not display:none and not faded out)
        if (style.display !== 'none' && (!item.style.opacity || parseFloat(item.style.opacity) > 0)) {
             const qtyInput = item.querySelector('.quantity-input');
             if (qtyInput) {
                 count += parseInt(qtyInput.value, 10) || 0; // Sum quantities
             } else {
                 count++; // Fallback if quantity input isn't found (less accurate)
             }
        }
    });
    return count;
}

function handleEmptyCartDisplay() {
    const cartItemsContainer = document.querySelector('.cart-items');
     const cartContainer = document.querySelector('.cart-container');
     const cartSummary = document.querySelector('.cart-summary');

     if (cartItemsContainer && cartContainer) {
         // Check based on actual elements remaining, not just the count from calculation
         const visibleItems = Array.from(cartItemsContainer.querySelectorAll('.cart-item')).filter(item => {
             const style = window.getComputedStyle(item);
             return style.display !== 'none' && (!item.style.opacity || parseFloat(item.style.opacity) > 0);
         });

         if (visibleItems.length === 0) {
             if (!cartContainer.querySelector('.alert-info')) {
                 cartItemsContainer.innerHTML = ''; // Clear the container definitively
                 if(cartSummary) cartSummary.remove();
                 const emptyCartHTML = `
                    <h1>Your Shopping Cart</h1>
                    <p class="alert alert-info mt-3">
                        Your cart is empty. <a href="/" class="alert-link">Continue Shopping</a>
                    </p>`;
                  const h1 = cartContainer.querySelector('h1');
                  if (h1) {
                      h1.insertAdjacentHTML('afterend', emptyCartHTML.substring(emptyCartHTML.indexOf('<p')));
                  } else {
                      // If h1 somehow got removed, replace container content
                      cartContainer.innerHTML = emptyCartHTML;
                  }
             }
         }
     }
}

routes/adminRoutes.js:
// routes/adminRoutes.js
const express = require('express');
const adminController = require('../controllers/adminController');
const { isAuthenticated } = require('../middleware/authMiddleware');
const { isAdmin } = require('../middleware/roleMiddleware'); // Use specific admin check

const router = express.Router();

// Apply authentication and admin check to ALL routes in this file
router.use(isAuthenticated, isAdmin);

// Dashboard
router.get('/dashboard', adminController.getAdminDashboard);

// --- Product Management (Admin) ---
router.get('/upload-product', adminController.getUploadProductPage);
router.post('/upload-product', adminController.uploadProduct);
router.get('/manage-products', adminController.getManageProductsPage);
router.get('/manage-products/edit/:id', adminController.getEditProductPage);
router.post('/manage-products/update/:id', adminController.updateProduct);
router.post('/manage-products/remove/:id', adminController.removeProduct);

// Order Management (Admin View/Manage ALL - Existing Routes)
router.get('/manage-orders', adminController.getManageOrdersPage);
router.post('/orders/:orderId/send-direct-delivery-otp', adminController.sendDirectDeliveryOtpByAdmin);
router.post('/orders/:orderId/confirm-direct-delivery', adminController.confirmDirectDeliveryByAdmin);
router.post('/orders/:orderId/cancel', adminController.cancelOrderByAdmin);

// User Management (Existing Routes)
router.get('/manage-users', adminController.getManageUsersPage);
router.post('/users/:id/update-role', adminController.updateUserRole);
router.post('/users/:id/remove', adminController.removeUser);

// --- NEW: Banner Management ---
router.get('/manage-banners', adminController.getManageBannersPage); // Page to manage banners
router.post('/manage-banners', adminController.updateBanners);       // Action to save banners

module.exports = router;

routes/authRoutes.js:
const express = require('express');
const authController = require('../controllers/authController');
const { isAuthenticated } = require('../middleware/authMiddleware');

const router = express.Router();

router.get('/login', authController.getLoginPage);
router.get('/register', authController.getRegisterPage);
router.get('/verify-otp', authController.getVerifyOtpPage);
router.get('/forgot-password', authController.getForgotPasswordPage);
router.get('/reset-password/:token', authController.getResetPasswordPage);

router.post('/register', authController.registerUser);
router.post('/login', authController.loginUser);
 router.post('/logout', isAuthenticated, authController.logoutUser);
router.post('/verify-otp', authController.verifyOtp);
 router.post('/resend-otp', authController.resendOtp);

router.post('/forgot-password', authController.forgotPassword);
router.post('/reset-password/:token', authController.resetPassword);


module.exports = router;


routes/index.js:
// routes/index.js
const express = require('express');
const authRoutes = require('./authRoutes');
const productRoutes = require('./productRoutes');
const userRoutes = require('./userRoutes');
const orderRoutes = require('./orderRoutes');
const adminRoutes = require('./adminRoutes');
const sellerRoutes = require('./sellerRoutes'); // *** IMPORT Seller Routes ***
const { getHomePage } = require('../controllers/authController'); // Home page controller

const router = express.Router();

// --- Public Routes ---
router.get('/', getHomePage);           // Home page (shows approved products)
router.use('/auth', authRoutes);        // Login, Register, Forgot Pwd, OTP Verify, etc.
router.use('/products', productRoutes); // Public product list (approved) & details (permission checked)

// --- Authenticated User Routes ---
// Middleware inside these route files ensure user is logged in
router.use('/user', userRoutes);        // Profile, Cart, Checkout, Address
router.use('/orders', orderRoutes);     // Place Order, My Orders

// --- Role-Specific Routes ---
// Middleware inside these files ensures correct role (and authentication)
router.use('/admin', adminRoutes);      // Admin actions
router.use('/seller', sellerRoutes);    // *** USE Seller Routes ***

module.exports = router;

routes/orderRoutes.js:
const express = require('express');
const orderController = require('../controllers/orderController');
const { isAuthenticated } = require('../middleware/authMiddleware');

const router = express.Router();

router.use(isAuthenticated);

router.post('/place', orderController.placeOrder);

router.get('/my-orders', orderController.getMyOrders);

 router.post('/cancel/:id', orderController.cancelOrder);

module.exports = router;


routes/productRoutes.js:
// routes/productRoutes.js
const express = require('express');
const productController = require('../controllers/productController');
 const { isAuthenticated } = require('../middleware/authMiddleware'); // Needed only for rating

const router = express.Router();

// --- NEW: Route for product suggestions ---
// Needs to be defined BEFORE the '/:id' route
router.get('/suggestions', productController.getProductSuggestions);

// Public routes - controllers ensure visibility rules (e.g., only 'approved')
router.get('/', productController.getProducts);         // List/Search approved, in-stock products
router.get('/:id', productController.getProductDetails); // Show product details (controller checks status/permissions)

// Rating requires user to be logged in
router.post('/:id/rate', isAuthenticated, productController.rateProduct);

module.exports = router;

routes/userRoutes.js:
// routes/userRoutes.js
const express = require('express');
const userController = require('../controllers/userController');
const { isAuthenticated } = require('../middleware/authMiddleware'); // Protect user-specific routes

const router = express.Router();

// --- Pincode Lookup Route (No changes needed here) ---
router.get('/pincode-lookup/:pincode', userController.lookupPincode);
// --- End Pincode Lookup Route ---

// Apply isAuthenticated middleware to the remaining routes in this file
router.use(isAuthenticated);

// User Profile
router.get('/profile', userController.getUserProfilePage);
router.post('/profile/update-name', userController.updateUserName);

// User Cart Management
router.get('/cart', userController.getCart);                // View cart (controller filters unapproved)
router.post('/cart/add', userController.addToCart);         // Add to cart (controller checks approval) - FOR FORMS (e.g., Product Detail)
// --- ADDED: AJAX Add to Cart Route ---
router.post('/cart/add-ajax', userController.addToCartAjax); // AJAX add to cart (e.g., from Product Index)
// --- END: AJAX Add to Cart Route ---
router.post('/cart/update', userController.updateCartQuantity); // Update quantity (controller checks approval/stock)
router.post('/cart/remove/:productId', userController.removeFromCart); // Remove from cart

// Address Management
router.post('/address/save', userController.saveAddress); // Save shipping address

// Checkout Process
router.get('/checkout', userController.getCheckoutPage);  // View checkout page (controller validates cart)

module.exports = router;

routes/sellerRoutes.js:
// routes/sellerRoutes.js
const express = require('express');
const sellerController = require('../controllers/sellerController');
const { isAuthenticated } = require('../middleware/authMiddleware');
// Import relevant role/ownership middleware
const { isSeller, isProductOwner, isOrderRelevantToSeller } = require('../middleware/roleMiddleware');

const router = express.Router();

// Apply authentication and seller check to ALL routes in this file
router.use(isAuthenticated, isSeller);

// Seller Dashboard
router.get('/dashboard', sellerController.getSellerDashboard);

// Seller Product Management
router.get('/products/upload', sellerController.getUploadProductPage); // Page to show upload form
router.post('/products/upload', sellerController.uploadProduct); // Handle product submission (triggers review)
router.get('/products', sellerController.getManageProductsPage); // List *only* this seller's products (incl. status)

// Actions requiring ownership of the specific product ID
// isProductOwner middleware runs AFTER isAuthenticated and isSeller
router.get('/products/edit/:id', isProductOwner, sellerController.getEditProductPage); // Get edit form for OWN product
router.post('/products/update/:id', isProductOwner, sellerController.updateProduct); // Handle update of OWN product (triggers re-review)
router.post('/products/remove/:id', isProductOwner, sellerController.removeProduct); // Handle removal of OWN product

// Seller Order Management
router.get('/orders', sellerController.getManageOrdersPage); // List orders containing *any* of this seller's products

// Actions requiring relevance to the specific order ID
// isOrderRelevantToSeller middleware runs AFTER isAuthenticated and isSeller
router.post('/orders/:orderId/send-otp', isOrderRelevantToSeller, sellerController.sendDirectDeliveryOtpBySeller); // Seller sends OTP for relevant orders
router.post('/orders/:orderId/confirm-delivery', isOrderRelevantToSeller, sellerController.confirmDirectDeliveryBySeller); // Seller confirms delivery for relevant orders

// --- NEW: Seller Cancel Order Route ---
router.post('/orders/:orderId/cancel', isOrderRelevantToSeller, sellerController.cancelOrderBySeller);

module.exports = router;


services/emailTemplateService.js:
const generateEmailHtml = (options) => {
    const {
      recipientName = 'Valued Customer',
      subject = 'Notification',
      greeting = `Hello ${recipientName},`,
      bodyLines = [],
      buttonUrl,
      buttonText,
      footerText = `© ${new Date().getFullYear()} miniapp. All rights reserved.`,
      companyName = 'miniapp',
      companyAddress = 'Your Company Address Here',
    } = options;
  
    const styles = {
      body: `margin: 0; padding: 0; -webkit-text-size-adjust: 100%; background-color: #f0f5fd;`,
      wrapper: `width: 100%; table-layout: fixed; -webkit-text-size-adjust: 100%;`,
      main: `background-color: #ffffff; margin: 0 auto; width: 100%; max-width: 600px; border-spacing: 0; font-family: Arial, sans-serif; color: #333333; box-shadow: 0 2px 10px rgba(0,0,0,0.1); border-radius: 8px; overflow: hidden;`,
      header: `background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: #ffffff; padding: 25px 20px; text-align: center; border-radius: 8px 8px 0 0; background-color: #007bff;`,
      headerH1: `margin: 0; font-size: 24px; font-weight: bold;`,
      content: `padding: 30px 25px; text-align: left; font-size: 16px; line-height: 1.6;`,
      greeting: `font-size: 18px; font-weight: bold; margin-bottom: 15px;`,
      paragraph: `margin: 0 0 15px 0;`,
      buttonWrapper: `padding: 15px 0; text-align: center;`,
      buttonLink: `background-color: #28a745; color: #ffffff; padding: 12px 25px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block; border: none; cursor: pointer; font-size: 16px;`,
      footer: `background-color: #e9ecef; color: #6c757d; padding: 20px 25px; text-align: center; font-size: 12px; line-height: 1.4; border-radius: 0 0 8px 8px;`,
      footerLink: `color: #007bff; text-decoration: none;`,
      preheader: `display: none !important; visibility: hidden; mso-hide: all; font-size: 1px; color: #ffffff; line-height: 1px; max-height: 0px; max-width: 0px; opacity: 0; overflow: hidden;`,
    };
  
    const bodyHtml = bodyLines.map(line => `<p style="${styles.paragraph}">${String(line).replace(/</g, "<").replace(/>/g, ">")}</p>`)
                             .map(line => line.replace(/<strong>/g, '<strong>').replace(/<\/strong>/g, '</strong>')
                                               .replace(/<br>/g, '<br>')
                                               .replace(/<h3 style="(.*?)">/g, '<h3 style="$1">').replace(/<\/h3>/g, '</h3>')
                                               .replace(/<ul style="(.*?)">/g, '<ul style="$1">').replace(/<\/ul>/g, '</ul>')
                                               .replace(/<li style="(.*?)">/g, '<li style="$1">').replace(/<\/li>/g, '</li>')
                                               .replace(/<a href="(.*?)"(.*?)>/g, '<a href="$1"$2>').replace(/<\/a>/g, '</a>')
                             )
                             .join('');
  
    let buttonHtml = '';
    if (buttonUrl && buttonText) {
      const safeButtonUrl = buttonUrl.startsWith('http') ? buttonUrl : '#';
      const safeButtonText = String(buttonText).replace(/</g, "<").replace(/>/g, ">");
      buttonHtml = `
        <table border="0" cellpadding="0" cellspacing="0" width="100%">
          <tr>
            <td style="${styles.buttonWrapper}">
              <a href="${safeButtonUrl}" target="_blank" style="${styles.buttonLink}">${safeButtonText}</a>
            </td>
          </tr>
        </table>`;
    }
  
    const html = `
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>${String(subject).replace(/</g, "<")}</title>
    <style type="text/css">
      body { ${styles.body} }
      .wrapper { ${styles.wrapper} }
      .main { ${styles.main} }
      @media screen and (max-width: 600px) {
        .main { width: 95% !important; max-width: 95%; }
        .content { padding: 20px 15px !important; }
        .header h1 { font-size: 20px !important; }
        .buttonLink { padding: 10px 20px !important; font-size: 15px !important; }
      }
    </style>
  </head>
  <body style="${styles.body}">
    <span style="${styles.preheader}">${String(subject).replace(/</g, "<")} - ${bodyLines.length > 0 ? String(bodyLines[0]).substring(0, 50).replace(/<[^>]*>?/gm, '') + '...' : ''}</span>
    <center class="wrapper" style="${styles.wrapper}">
      <table class="main" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation" style="${styles.main}">
        <tr>
          <td class="header" style="${styles.header}">
            <h1 style="${styles.headerH1}">${String(companyName).replace(/</g, "<")}</h1>
          </td>
        </tr>
        <tr>
          <td class="content" style="${styles.content}">
            <p style="${styles.greeting}">${greeting}</p>
            ${bodyHtml}
            ${buttonHtml}
            <p style="${styles.paragraph}">If you have any questions, feel free to contact our support team.</p>
            <p style="${styles.paragraph}">Thanks,<br>The ${String(companyName).replace(/</g, "<")} Team</p>
          </td>
        </tr>
        <tr>
          <td class="footer" style="${styles.footer}">
            <p style="margin:0 0 5px 0;">${String(footerText).replace(/</g, "<")}</p>
             ${companyAddress ? `<p style="margin:0 0 5px 0;">${String(companyAddress).replace(/</g, "<")}</p>` : ''}
          </td>
        </tr>
      </table>
    </center>
  </body>
  </html>
    `;
  
    return html;
  };
  
  module.exports = { generateEmailHtml };

services/otpService.js:
// services/otpService.js
const crypto = require('crypto');

/**
 * Generates a random numeric OTP code of a specified length.
 * @param {number} [length=6] - The desired length of the OTP.
 * @returns {string} The generated OTP code.
 */
const generateOTP = (length = 6) => {
  // More robust generation ensuring target length even with non-numeric hex chars
  if (length <= 0) throw new Error('OTP length must be positive');
  const chars = '0123456789';
  let otp = '';
  const randomBytes = crypto.randomBytes(length); // Generate sufficient random bytes
  for (let i = 0; i < length; i++) {
    const randomIndex = randomBytes[i] % chars.length;
    otp += chars[randomIndex];
  }
  return otp;
};

/**
 * Calculates the expiration timestamp for an OTP.
 * @param {number} [minutes=10] - The duration in minutes until the OTP expires.
 * @returns {Date} The expiration date object.
 */
const setOTPExpiration = (minutes = 10) => {
  // Returns a Date object representing the expiration time
  return new Date(Date.now() + minutes * 60 * 1000);
};

module.exports = { generateOTP, setOTPExpiration };

services/geminiService.js:
// services/geminiService.js
const { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } = require("@google/generative-ai");
const axios = require('axios');

const API_KEY = process.env.GEMINI_API_KEY;
if (!API_KEY) {
    console.warn("GEMINI_API_KEY is not set in .env file. Gemini features will be disabled.");
}
const genAI = API_KEY ? new GoogleGenerativeAI(API_KEY) : null;
// --- UPDATED: Use a vision-capable model like gemini-1.5-flash ---
const visionModel = genAI ? genAI.getGenerativeModel({ model: "gemini-1.5-flash" }) : null;
// --- END UPDATED ---

const safetySettings = [
  { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
];

if (genAI && visionModel) {
    console.log("Gemini AI SDK Initialized successfully with Vision model.");
} else {
     console.log("Gemini AI SDK Vision model could not be initialized (API Key missing or configuration error?).");
}

// --- Helper function to fetch image and get Base64 data + MIME type ---
async function urlToGenerativePart(url) {
    console.log(`Fetching image from: ${url}`);
    try {
        const response = await axios.get(url, {
            responseType: 'arraybuffer', // Fetch as binary data
            timeout: 10000 // Add a timeout (10 seconds)
        });

        if (response.status !== 200) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const contentType = response.headers['content-type'];
        // Relaxed content type check to allow more flexibility, but keep warning
        if (!contentType || !contentType.toLowerCase().startsWith('image/')) {
             console.warn(`Potentially unsupported image Content-Type: ${contentType} from URL: ${url}. Proceeding but Gemini might reject.`);
             // Allow common image types even if not strictly in the list
             if (!['image/jpeg', 'image/png', 'image/webp', 'image/gif', 'image/heic', 'image/heif'].includes(contentType.toLowerCase())) {
                 console.warn(`Content-Type ${contentType} is less common for Gemini Vision.`);
             }
        } else if (!['image/jpeg', 'image/png', 'image/webp', 'image/gif', 'image/heic', 'image/heif'].includes(contentType.toLowerCase())) {
             console.warn(`Content-Type ${contentType} is less common for Gemini Vision.`);
        }


        const base64Data = Buffer.from(response.data).toString('base64');

        return {
            inlineData: {
                data: base64Data,
                mimeType: contentType || 'application/octet-stream', // Provide a default if missing
            },
        };
    } catch (error) {
         console.error(`Error fetching image from ${url}: ${error.message}`);
         if (axios.isAxiosError(error)) {
             if (error.response) {
                 throw new Error(`Failed to fetch image: Server responded with status ${error.response.status}`);
             } else if (error.request) {
                  throw new Error(`Failed to fetch image: No response received (Timeout or network issue)`);
             } else {
                 throw new Error(`Failed to fetch image: Request setup error (${error.message})`);
             }
         } else {
             throw error; // Re-throw other errors
         }
    }
}


const reviewProductWithGemini = async (product) => {
    if (!visionModel) {
        console.log("Gemini Vision model not available. Skipping review, defaulting to 'pending'.");
        return { status: 'pending', reason: 'Gemini Vision service unavailable' };
    }

    // --- UPDATED: Destructure imageUrl2 ---
    const { name, category, price, specifications, imageUrl, imageUrl2, shortDescription } = product;
    // --- END UPDATED ---

    let imagePart;
    let imagePart2 = null; // Initialize second image part as null

    try {
        // Process first image (required)
        imagePart = await urlToGenerativePart(imageUrl);
        if (!imagePart) throw new Error("Primary image processing failed.");
        console.log(`Successfully prepared primary image part for ${name} from ${imageUrl}`);

        // --- UPDATED: Process second image (optional) ---
        if (imageUrl2) {
            try {
                imagePart2 = await urlToGenerativePart(imageUrl2);
                if (!imagePart2) throw new Error("Second image processing failed unexpectedly.");
                 console.log(`Successfully prepared second image part for ${name} from ${imageUrl2}`);
            } catch (image2Error) {
                console.warn(`Could not process second image for "${name}" (${imageUrl2}): ${image2Error.message}. Proceeding with primary image only.`);
                // Note: We are choosing *not* to reject if only the second image fails.
                // If the second image MUST be valid, you could reject here:
                // return { status: 'rejected', reason: `Second Image Error: ${image2Error.message}` };
            }
        }
        // --- END UPDATED ---

    } catch (imageError) {
        console.error(`Cannot review product "${name}" due to critical image processing error: ${imageError.message}`);
        // Reject if the primary image fails
        return { status: 'rejected', reason: `Image Error: ${imageError.message}` };
    }


    // --- UPDATED: Construct Text Prompt Part (Mention potential second image) ---
    const textPrompt = `
        Analyze the following product details AND the provided image(s) for an e-commerce store. Act as a strict content moderator.

        **Instructions:**
        1. Examine the IMAGE CONTENT closely (check BOTH images if a second one is provided).
        2. Examine the TEXT DETAILS (Name, Category, Short Description, Price, Specifications).
        3. Verify if the image(s) VISUALLY MATCH the product described by the text (name, category, short description). Are they clearly the item described?
        4. Check BOTH image(s) and text for:
            - Explicit content (nudity, graphic violence).
            - Depictions of weapons (unless clearly a toy and stated category is 'Toys').
            - Illegal items or substances.
            - Hateful symbols or hate speech.
            - Any generally unsafe or harmful content.
        5. Check if the text details seem legitimate:
            - Is the name/description sensible? Avoid gibberish or clearly misleading text.
            - Is the price reasonable for the category (reject absurd prices like ₹1 for a car, but allow discounts)?
            - Does the category make sense for the name/image?
        6. **SAFETY IS PARAMOUNT**: If unsure, lean towards rejection, especially for safety concerns (weapons, explicit, illegal).
        7. Use ONLY the required response format.

        **Product Details (Text):**
        - Name: ${name}
        - Category: ${category}
        - Short Description: ${shortDescription || 'Not provided'}
        - Price: ₹${price?.toFixed(2) || 'N/A'}
        - Specifications: ${specifications || 'Not provided'}
        - Primary Image URL: ${imageUrl}
        - Second Image URL: ${imageUrl2 || 'Not provided'} <%# Mention second URL %>

        **Analysis Task:** Based on BOTH the text analysis AND image content analysis (considering both images if provided):
        - Respond with "APPROVE" if the product (image(s) and text) seems legitimate, safe, accurately described, and the image(s) clearly match the text description.
        - Respond with "REJECT: [BRIEF REASON]" if ANY issues are found (safety violation in image/text, image mismatch, misleading text, nonsensical entry, absurd price, etc.). Example Reasons: "Image contains prohibited items", "Text contains inappropriate language", "Image does not match product description", "Price is nonsensical".

        Your response:`;
    // --- END UPDATED ---

    const textPart = { text: textPrompt };

    // --- UPDATED: Prepare content parts array (include imagePart2 if it exists) ---
    const contentParts = [textPart, imagePart];
    if (imagePart2) {
        contentParts.push(imagePart2);
    }
    // --- END UPDATED ---

    // --- Call Gemini API ---
    try {
        console.log(`Sending product "${name}" (${imagePart2 ? '2 images' : '1 image'}) for Gemini Vision review...`);
        const result = await visionModel.generateContent(
            contentParts, // Use the dynamic array
            { safetySettings } // Apply safety settings
        );
        const response = result?.response;

        // Check for safety blocks first
        if (!response || response.promptFeedback?.blockReason) {
           const blockReason = response?.promptFeedback?.blockReason || 'Unknown safety reason';
           const safetyRatings = response?.promptFeedback?.safetyRatings || [];
           console.warn(`Gemini review for "${name}" blocked. Reason: ${blockReason}. Ratings: ${JSON.stringify(safetyRatings)}`);
           return { status: 'rejected', reason: `Content blocked by AI safety filters (${blockReason}).` };
        }

        const reviewText = response?.text()?.trim().toUpperCase() || '';
        console.log(`Gemini Vision Review Raw Response for "${name}": ${reviewText}`);

        // Process the response text
        if (reviewText.startsWith('APPROVE')) {
            console.log(`Gemini Vision approved product: ${name}`);
            return { status: 'approved', reason: null };
        } else if (reviewText.startsWith('REJECT')) {
            const reason = reviewText.split(':')[1]?.trim() || 'Rejected by AI model (no specific reason provided).';
            console.log(`Gemini Vision rejected product: ${name}. Reason: ${reason}`);
            return { status: 'rejected', reason: reason };
        } else {
            // Handle cases where the model might not return exactly APPROVE or REJECT
            console.warn(`Unexpected Gemini Vision response format for "${name}": ${reviewText}. Defaulting to pending.`);
            // You might want to log the full response here for debugging: console.log(JSON.stringify(response));
            return { status: 'pending', reason: 'AI review result unclear.' };
        }

    } catch (error) {
        // Handle API call errors
        console.error(`Error during Gemini Vision API call for product "${name}":`, error);
        let reason = 'AI review failed due to an API error.';
        // Check if the error message indicates a safety issue (this might vary depending on the SDK version)
        if (error.message && (error.message.includes('SAFETY') || error.message.includes('blocked'))) {
            reason = 'Content potentially blocked by safety filters during API call.';
        } else if (error.message) {
            // Provide a snippet of the error message for context
            reason = `AI API Error: ${error.message.substring(0, 100)}${error.message.length > 100 ? '...' : ''}`;
        }
        // It's often safer to reject if the AI review fails catastrophically
        return { status: 'rejected', reason: reason };
    }
};

module.exports = { reviewProductWithGemini };

views/admin/dashboard.ejs:
<%- include('../partials/header', { title: 'Admin Dashboard' }) %>

<div class="admin-dashboard-container">
    <h1>Admin Dashboard</h1>
    <p class="text-muted mb-3">System-wide management access. Welcome, <%= currentUser.name %>!</p>

    <div class="admin-actions-grid">
         <a href="/admin/upload-product" class="admin-action-card">
            <i class="fas fa-upload text-primary"></i>
            <h3>Upload Product (as Admin)</h3>
            <p>Add a product directly to the system.</p>
        </a>
         <a href="/admin/manage-products" class="admin-action-card">
            <i class="fas fa-edit text-success"></i>
            <h3>Manage All Products</h3>
            <p>View, edit, remove products from any seller.</p>
         </a>
        <a href="/admin/manage-orders" class="admin-action-card">
             <i class="fas fa-clipboard-list text-info"></i>
             <h3>Manage All Orders</h3>
             <p>View, confirm delivery, or cancel any customer order.</p>
        </a>
        <a href="/admin/manage-users" class="admin-action-card">
             <i class="fas fa-users-cog text-warning"></i>
             <h3>Manage Users</h3>
             <p>Update roles (User, Seller, Admin), remove users.</p>
        </a>

         <a href="/admin/manage-banners" class="admin-action-card">
             <i class="fas fa-images text-secondary"></i>
             <h3>Manage Banners</h3>
             <p>Update the promotional banners on the homepage.</p>
         </a>

         <%# The "My Admin Profile" card linking to /user/profile has been removed %>

    </div>
</div>

 <%- include('../partials/footer') %>

views/admin/manage-banners.ejs:
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container">
    <h1><%= title %></h1>
    <p class="text-muted small mb-3">Enter direct URLs for the images. Banners will appear on the homepage if URLs are provided.</p>

    <form action="/admin/manage-banners" method="POST" class="form-submit-spinner">
        <% bannerConfig.banners.forEach((banner, index) => { %>
            <fieldset class="mb-4 border p-3 rounded"> <%# Group banner fields %>
                <legend class="h5">Banner <%= index + 1 %></legend>
                <div class="form-group">
                    <label for="imageUrl<%= index + 1 %>">Image URL <%= index + 1 %>:</label>
                    <input type="url" id="imageUrl<%= index + 1 %>" name="imageUrl<%= index + 1 %>" class="form-control" value="<%= banner.imageUrl %>" placeholder="https://example.com/banner<%= index + 1 %>.jpg">
                    <% if (banner.imageUrl) { %>
                        <img src="<%= banner.imageUrl %>" alt="Banner <%= index + 1 %> Preview" style="max-width: 200px; max-height: 75px; margin-top: 10px; border: 1px solid #ddd; padding: 2px; object-fit: contain;">
                    <% } else { %>
                         <small class="d-block mt-1 text-muted">No image set</small>
                    <% } %>
                </div>
                <div class="form-group">
                    <label for="linkUrl<%= index + 1 %>">Link URL <%= index + 1 %> (Optional):</label>
                    <input type="url" id="linkUrl<%= index + 1 %>" name="linkUrl<%= index + 1 %>" class="form-control" value="<%= banner.linkUrl %>" placeholder="https://example.com/category/offers">
                    <% if (banner.linkUrl) { %>
                       <small class="d-block mt-1 text-muted">Clicks to: <%= banner.linkUrl %></small>
                   <% } %>
                </div>
                <div class="form-group">
                    <label for="title<%= index + 1 %>">Title/Alt Text <%= index + 1 %> (Optional):</label>
                    <input type="text" id="title<%= index + 1 %>" name="title<%= index + 1 %>" class="form-control" value="<%= banner.title %>" placeholder="e.g., Special Summer Sale">
                </div>
             </fieldset>
        <% }) %>

        <button type="submit" class="btn btn-primary"><i class="fas fa-save"></i> Save Banners</button>
        <a href="/admin/dashboard" class="btn btn-secondary">Back to Dashboard</a>
    </form>
</div>

<%- include('../partials/footer') %>

views/admin/edit-product.ejs:
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container">
    <h1><%= title %></h1>
    <p>Admin editing view for product originally uploaded by <%= product.sellerId ? product.sellerId.email : 'Unknown Seller' %>.</p>

    <form action="/admin/manage-products/update/<%= product._id %>" method="POST" class="form-submit-spinner">
        <div class="form-group">
            <label for="name">Product Name:</label>
            <input type="text" id="name" name="name" class="form-control" value="<%= product.name %>" placeholder="Enter product name" required>
        </div>
        <div class="form-group">
            <label for="shortDescription">Short Description (Optional):</label>
            <textarea id="shortDescription" name="shortDescription" class="form-control" rows="2" placeholder="Briefly describe the product (max 200 chars)"><%= product.shortDescription || '' %></textarea>
        </div>
        <div class="form-group">
            <label for="category">Category:</label>
            <select id="category" name="category" class="form-control" required>
                <option value="" disabled <%= !product.category ? 'selected' : '' %>>Select a Category</option>
                <% if (typeof categories !== 'undefined') { %>
                    <% categories.forEach(cat => { %>
                        <option value="<%= cat.name %>" <%= (product.category === cat.name) ? 'selected' : '' %>><%= cat.name %></option>
                    <% }) %>
                <% } %>
            </select>
        </div>
        <div class="form-group">
            <label for="price">Price (₹):</label>
            <input type="number" id="price" name="price" class="form-control" step="0.01" min="0" value="<%= product.price %>" placeholder="e.g., 499.99" required>
        </div>
        <div class="form-group">
            <label for="stock">Stock Quantity:</label>
            <input type="number" id="stock" name="stock" class="form-control" min="0" value="<%= product.stock %>" placeholder="e.g., 50" required>
        </div>
        <div class="form-group">
            <label for="imageUrl">Image URL (Primary):</label>
            <input type="url" id="imageUrl" name="imageUrl" class="form-control" value="<%= product.imageUrl %>" placeholder="https://example.com/main-image.jpg" required>
            <% if (product.imageUrl) { %>
                <img src="<%= product.imageUrl %>" alt="Current Image" style="max-width: 100px; margin-top: 5px; border:1px solid #ccc; padding:2px;">
            <% } %>
        </div>
        <!-- --- UPDATED: Add Second Image URL Input --- -->
        <div class="form-group">
            <label for="imageUrl2">Second Image URL (Optional):</label>
            <input type="url"
                   id="imageUrl2"
                   name="imageUrl2"
                   class="form-control"
                   placeholder="https://example.com/alternate-image.jpg"
                   value="<%= (typeof product !== 'undefined' && product.imageUrl2) ? product.imageUrl2 : '' %>">
             <%# Preview for edit forms %>
             <% if (typeof product !== 'undefined' && product.imageUrl2) { %>
                <img src="<%= product.imageUrl2 %>" alt="Current Second Image" style="max-width: 100px; margin-top: 5px; border:1px solid #ccc; padding:2px;">
             <% } %>
        </div>
        <!-- --- END UPDATED --- -->
        <div class="form-group">
            <label for="specifications">Specifications:</label>
            <textarea id="specifications" name="specifications" class="form-control" rows="5" placeholder="Enter product details, features, dimensions, etc. (one per line recommended)"><%= product.specifications %></textarea>
        </div>

        <hr>
        <h4>Admin Review Control</h4>

        <div class="form-group">
            <label for="reviewStatus">Review Status:</label>
            <select id="reviewStatus" name="reviewStatus" class="form-control" onchange="toggleRejectionReason(this.value)">
                <option value="pending" <%= product.reviewStatus === 'pending' ? 'selected' : '' %>>Pending</option>
                <option value="approved" <%= product.reviewStatus === 'approved' ? 'selected' : '' %>>Approved</option>
                <option value="rejected" <%= product.reviewStatus === 'rejected' ? 'selected' : '' %>>Rejected</option>
            </select>
        </div>
        <div class="form-group" id="rejectionReasonGroup" <%= product.reviewStatus !== 'rejected' ? 'style="display: none;"' : '' %>>
            <label for="rejectionReason">Rejection Reason (Required if Rejected):</label>
            <textarea id="rejectionReason" name="rejectionReason" rows="3" class="form-control" placeholder="Explain why the product was rejected"><%= product.rejectionReason || '' %></textarea>
        </div>

        <button type="submit" class="btn btn-primary">Update Product (Admin)</button>
        <a href="/admin/manage-products" class="btn btn-secondary">Cancel</a>
    </form>
</div>

<script>
    function toggleRejectionReason(status) {
        const reasonGroup = document.getElementById('rejectionReasonGroup');
        if (status === 'rejected') {
            reasonGroup.style.display = 'block';
        } else {
            reasonGroup.style.display = 'none';
        }
    }
    document.addEventListener('DOMContentLoaded', () => {
        // Ensure the rejection reason field visibility is set correctly on page load
        const initialStatus = document.getElementById('reviewStatus').value;
        toggleRejectionReason(initialStatus);
    });
</script>

<%- include('../partials/footer') %>


views/admin/manage-orders.ejs:
<%# views/admin/manage-orders.ejs %>
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container order-manage-page">
    <h1><%= title %></h1>

    <%# --- ADD FILTER INPUT --- %>
    <div class="form-group mb-3">
        <label for="order-filter-input" class="visually-hidden">Filter Orders:</label>
        <input type="text" id="order-filter-input" class="form-control" placeholder="Type to filter orders (ID, Name, Email, Product, Status...)" aria-label="Filter Orders">
    </div>
    <%# --- END FILTER INPUT --- %>

    <% if (orders.length > 0) { %>
        <div class="table-container">
            <table class="data-table order-table" id="admin-order-table"> <%# Added ID %>
                <thead>
                    <tr>
                        <th>Details</th>
                        <th>Customer & Shipping Address</th>
                        <th>Items</th>
                        <th>Total</th>
                        <th>Status</th>
                        <th class="actions-cell">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% orders.forEach(order => { %>
                        <%# Added class="order-row" %>
                        <tr class="status-<%= order.status.toLowerCase().replace(/ /g, '-') %> order-row" data-order-id="<%= order._id %>">
                            <td data-label="Details">
                                <strong>ID:</strong> <%= order._id %><br>
                                <small class="text-muted"><%= formatDateIST(order.orderDate) %></small><br>
                                <% if (order.products && order.products.length > 0 && order.products[0].productId && order.products[0].productId.sellerId) { %>
                                    <small class="text-muted">Contains items from seller(s)</small>
                                <% } %>
                            </td>
                            <td data-label="Customer & Shipping Address">
                                <%# Customer Info %>
                                <div>
                                    <strong>Customer:</strong> <%= order.userId?.name || order.shippingAddress.name || '[Name Missing]' %><br>
                                    <small class="text-muted"><%= order.userEmail || order.userId?.email || '[Email Missing]' %></small>
                                </div>
                                <%# Full Shipping Address %>
                                <div class="mt-2 pt-2 border-top">
                                    <strong>Shipping To:</strong><br>
                                    <strong><%= order.shippingAddress.name %></strong><br>
                                    Ph: <%= order.shippingAddress.phone %><br>
                                    <% if (order.shippingAddress.landmarkNearby) { %>
                                        <%= order.shippingAddress.landmarkNearby %>,<br>
                                    <% } %>
                                    <%= order.shippingAddress.cityVillage %>,<br>
                                    <% if (order.shippingAddress.mandal) { %>
                                        <%= order.shippingAddress.mandal %>,<br>
                                    <% } %>
                                     <% if (order.shippingAddress.district) { %>
                                        <%= order.shippingAddress.district %>,<br>
                                    <% } %>
                                    <% if (order.shippingAddress.state) { %>
                                        <%= order.shippingAddress.state %> -
                                    <% } %>
                                    <%= order.shippingAddress.pincode %>
                                </div>
                            </td>
                            <td data-label="Items">
                                <div class="order-items-summary">
                                    <%- order.itemsSummary %>
                                </div>
                                <% if (order.products && order.products.length > 0) { %>
                                    <div class="order-items-images">
                                        <% order.products.forEach(item => { %>
                                            <% if (item.productId && item.productId._id && item.productId.imageUrl) { %>
                                                <a href="/products/<%= item.productId._id %>" target="_blank" title="View <%= item.productId.name || 'Product' %>">
                                                    <img src="<%= item.productId.imageUrl %>"
                                                         alt="<%= item.productId.name || 'Product Image' %>"
                                                         class="order-item-thumbnail" loading="lazy">
                                                </a>
                                            <% } else if (item.productId && item.productId._id) { %>
                                                <a href="/products/<%= item.productId._id %>" target="_blank" class="order-item-thumbnail-placeholder" title="View <%= item.productId.name || 'Product' %>">[No Img]</a>
                                            <% } else { %>
                                                <span class="order-item-thumbnail-placeholder" title="Product data missing">[N/A]</span>
                                            <% } %>
                                        <% }) %>
                                    </div>
                                <% } %>
                            </td>
                            <td data-label="Total" class="order-total"><strong>₹<%= order.totalAmount.toFixed(2) %></strong></td>
                            <td data-label="Status" class="order-status-cell">
                                <span class="status-badge status-<%= order.status.toLowerCase().replace(/ /g, '-') %>"><%= order.status %></span>
                                <% if(order.status === 'Cancelled' && order.cancellationReason) { %><br><small class="text-danger mt-1 d-block">Reason: <%= order.cancellationReason %></small><% } %>
                                <% if(order.status === 'Delivered' && order.receivedByDate) { %><br><small class="text-success mt-1 d-block">Delivered:<br><%= formatDateIST(order.receivedByDate) %></small><% } %>
                                <% if (order.showDeliveryOtp) { %>
                                  <div class="delivery-otp-display mt-1">
                                    <p>Customer OTP Sent</p>
                                    <small class="text-muted">Ask customer for code: <strong class="delivery-otp-code">****<%= order.orderOTP ? order.orderOTP.slice(-2) : 'XX' %></strong></small>
                                     <% if (order.orderOTPExpires) { %>
                                         <small class="text-muted d-block">Expires: <%= formatDateIST(order.orderOTPExpires) %></small>
                                     <% } %>
                                  </div>
                                <% } %>
                            </td>
                            <td data-label="Actions" class="actions-cell">
                                <%# Admin Direct Delivery Confirmation %>
                                <% if (order.canBeDirectlyDeliveredByAdmin) { %>
                                    <div class="action-group mb-2">
                                        <p class="action-group-title">Direct Delivery:</p>
                                        <% if (!order.showDeliveryOtp) { %>
                                            <form action="/admin/orders/<%= order._id %>/send-direct-delivery-otp" method="POST" class="inline-form form-submit-spinner mb-1">
                                                <button type="submit" class="btn btn-warning btn-sm w-100 w-md-auto" title="Send OTP to customer for admin delivery">
                                                    <i class="fas fa-mobile-alt"></i> Send OTP
                                                </button>
                                            </form>
                                        <% } %>
                                        <form action="/admin/orders/<%= order._id %>/confirm-direct-delivery" method="POST" class="inline-form verify-otp-form form-submit-spinner">
                                            <%# Added Placeholder %>
                                            <input type="text" name="otp" placeholder="Enter OTP" required pattern="\d{6}" maxlength="6" inputmode="numeric" title="Enter 6-digit OTP from customer">
                                            <button type="submit" class="btn btn-success btn-sm" title="Confirm direct delivery">
                                                <i class="fas fa-check-double"></i> Confirm
                                            </button>
                                        </form>
                                    </div>
                                <% } %>

                                <%# Admin Order Cancellation %>
                                <% if (order.canBeCancelledByAdmin) { %>
                                    <div class="action-group">
                                        <form action="/admin/orders/<%= order._id %>/cancel" method="POST" class="cancel-delivery-form form-submit-spinner" onsubmit="return confirm('ADMIN ACTION: Are you sure you want to cancel order <%= order._id %>? This cannot be undone.');">
                                            <label for="reason-<%= order._id %>" class="action-group-title">Cancel Order:</label>
                                            <select name="reason" id="reason-<%= order._id %>" required class="form-control form-control-sm d-block mb-1">
                                                <option value="" disabled selected>Select Admin Reason...</option>
                                                <% if (typeof cancellationReasons !== 'undefined' && cancellationReasons.length > 0) { %>
                                                    <% cancellationReasons.forEach(reason => { %>
                                                        <option value="<%= reason %>"><%= reason %></option>
                                                    <% }) %>
                                                <% } else { %>
                                                     <option value="Other (Admin)" selected>Other (Admin)</option> <%# Fallback %>
                                                <% } %>
                                            </select>
                                            <button type="submit" class="btn btn-danger btn-sm w-100 w-md-auto"><i class="fas fa-ban"></i> Cancel Order</button>
                                        </form>
                                    </div>
                                <% } %>

                                <%# Fallback for no actions %>
                                <% if (!order.canBeDirectlyDeliveredByAdmin && !order.canBeCancelledByAdmin) { %>
                                    <small class="text-muted no-actions-text">
                                        <% if (order.status === 'Delivered') { %>Completed<% } else if (order.status === 'Cancelled') { %>Cancelled<% } else { %>No admin actions<% } %>
                                    </small>
                                <% } %>
                            </td>
                        </tr>
                    <% }) %>
                    <%# --- ADD NO RESULTS ROW --- %>
                    <tr id="no-admin-orders-found" class="hidden">
                         <td colspan="6" class="text-center text-muted p-3">No orders match your filter.</td>
                    </tr>
                    <%# --- END NO RESULTS ROW --- %>
                </tbody>
            </table>
        </div>
    <% } else { %>
        <p class="alert alert-info">No orders received yet.</p>
    <% } %>
</div>

<%- include('../partials/footer') %>

views/admin/manage-products.ejs:
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container">
    <h1><%= title %></h1>
    <p class="text-muted small mb-3">Showing all products from all sellers.</p>

    <%# --- ADD FILTER INPUT --- %>
    <div class="form-group mb-3"> <%# Added mb-3 for spacing %>
        <label for="admin-product-filter-input" class="visually-hidden">Filter Products:</label>
        <%# Added Placeholder %>
        <input type="text" id="admin-product-filter-input" class="form-control" placeholder="Type to filter products (Name, Category, Seller, Status...)" aria-label="Filter Products">
    </div>
    <%# --- END FILTER INPUT --- %>

    <% if (products.length > 0) { %>
        <div class="table-container card">
             <%# --- Added ID to table --- %>
            <table class="data-table" id="admin-product-table">
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name / Category</th>
                        <th>Seller</th>
                        <th>Price / Stock</th>
                        <th>Status</th>
                        <th>Reason</th>
                        <th class="actions-cell" style="text-align: right;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% products.forEach(product => {
                        const productNameEsc = product.name.replace(/'/g, "\\'");
                        const sellerEmail = product.sellerId?.email || product.sellerEmail || 'Unknown';
                        const sellerEmailEsc = sellerEmail.replace(/'/g, "\\'");
                    %>
                        <%# --- Added class="product-row" --- %>
                        <tr class="status-<%= product.reviewStatus %> product-row" data-product-id="<%= product._id %>">
                            <td data-label="Image">
                                <a href="/products/<%= product._id %>">
                                    <img src="<%= product.imageUrl %>" alt="<%= product.name %>" class="table-img">
                                </a>
                            </td>
                            <td data-label="Name / Category">
                                <%= product.name %><br>
                                <small class="text-muted"><%= product.category %></small>
                            </td>
                            <td data-label="Seller"><%= sellerEmail %></td>
                            <td data-label="Price / Stock">
                                ₹<%= product.price.toFixed(2) %><br>
                                <small>Stock: <%= product.stock %></small>
                            </td>
                            <td data-label="Status">
                                <span class="status-badge status-<%= product.reviewStatus %> text-capitalize">
                                    <%= product.reviewStatus %>
                                </span>
                            </td>
                             <td data-label="Reason">
                                <% if(product.reviewStatus === 'rejected' && product.rejectionReason) { %>
                                    <small class="text-danger" title="Rejection Reason"><%= product.rejectionReason %></small>
                                <% } else { %>
                                    <span class="text-muted">--</span>
                                <% } %>
                            </td>
                            <td data-label="Actions" class="actions-cell">
                                <a href="/admin/manage-products/edit/<%= product._id %>" class="btn btn-text btn-sm" title="Edit Product (Admin)">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <form action="/admin/manage-products/remove/<%= product._id %>" method="POST" class="inline-form form-submit-spinner"
                                    onsubmit="return confirmAdminRemove('<%= productNameEsc %>', '<%= sellerEmailEsc %>')">
                                    <button type="submit" class="btn btn-text btn-danger btn-sm" title="Remove Product (Admin)">
                                        <i class="fas fa-trash"></i> Remove
                                    </button>
                                </form>
                            </td>
                        </tr>
                    <% }) %>
                     <%# --- ADD NO RESULTS ROW --- %>
                     <tr id="no-admin-products-found" class="hidden">
                         <td colspan="7" class="text-center text-muted p-3">No products match your filter.</td> <%# Adjusted colspan %>
                     </tr>
                     <%# --- END NO RESULTS ROW --- %>
                </tbody>
            </table>
        </div>
    <% } else { %>
        <p class="text-muted mt-3">No products found in the system.</p>
    <% } %>
</div>

<script>
    function confirmAdminRemove(productName, sellerEmail) {
        return confirm(`ADMIN ACTION: Remove product ${productName} (Seller: ${sellerEmail})?`);
    }
</script>

<%- include('../partials/footer') %>


views/admin/manage-users.ejs:
<%# views/admin/manage-users.ejs %>
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container">
    <h1><%= title %></h1>

    <%# --- ADD FILTER INPUT --- %>
    <div class="form-group mb-3">
        <label for="user-filter-input" class="visually-hidden">Filter Users:</label>
        <%# Added Placeholder %>
        <input type="text" id="user-filter-input" class="form-control" placeholder="Type to filter users (Name, Email, Role...)" aria-label="Filter Users">
    </div>
    <%# --- END FILTER INPUT --- %>

    <% if (users.length > 0) { %>
        <div class="table-container card">
            <%# --- ADDED ID to table --- %>
            <table class="data-table" id="admin-user-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email / Phone</th>
                        <th>Role</th>
                        <th>Registered On</th>
                        <th>Verified</th>
                        <th class="actions-cell" style="text-align: right;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% users.forEach(user => { %>
                        <%# --- ADDED class="user-row" --- %>
                        <tr class="user-row" data-user-id="<%= user._id %>">
                            <td data-label="Name"><%= user.name %></td>
                            <td data-label="Email / Phone">
                                <%= user.email %>
                                <% if (user.address && user.address.phone) { %>
                                    <br><small>(Ph: <%= user.address.phone %>)</small>
                                <% } %>
                            </td>
                            <td data-label="Role">
                                <form action="/admin/users/<%= user._id %>/update-role" method="POST" class="inline-form form-submit-spinner">
                                    <select name="role" onchange="this.form.submit()" class="form-control form-control-sm" style="display: inline-block; width: auto; vertical-align: middle;"> <%# Inline style for select %>
                                        <option value="user" <%= user.role === 'user' ? 'selected' : '' %>>User</option>
                                        <option value="seller" <%= user.role === 'seller' ? 'selected' : '' %>>Seller</option> <%# ADD SELLER %>
                                        <option value="admin" <%= user.role === 'admin' ? 'selected' : '' %>>Admin</option>
                                    </select>
                                    <noscript><button type="submit" class="btn btn-sm btn-primary ml-1">Update</button></noscript> <%# Fallback button %>
                                </form>
                            </td>
                            <td data-label="Registered On"><small><%= formatDateIST(user.createdAt) %></small></td>
                            <td data-label="Verified"><%= user.isVerified ? 'Yes' : 'No' %></td>
                            <td data-label="Actions" class="actions-cell">
                                <%# Prevent removing self or last admin in controller logic %>
                                <form action="/admin/users/<%= user._id %>/remove" method="POST" class="inline-form form-submit-spinner" onsubmit="return confirm('ADMIN ACTION: Are you sure you want to remove user <%= user.email %>? This is irreversible.');">
                                    <button type="submit" class="btn btn-danger btn-sm"><i class="fas fa-user-times"></i> Remove</button>
                                </form>
                            </td>
                        </tr>
                    <% }) %>
                    <%# --- ADD NO RESULTS ROW --- %>
                    <tr id="no-admin-users-found" class="hidden">
                         <td colspan="6" class="text-center text-muted p-3">No users match your filter.</td> <%# Adjusted colspan to 6 %>
                    </tr>
                    <%# --- END NO RESULTS ROW --- %>
                </tbody>
            </table>
        </div>
    <% } else { %>
        <p class="text-muted mt-3">No other registered users found.</p>
    <% } %>
</div>

<%- include('../partials/footer') %>

views/admin/upload-product.ejs:
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container">
    <h1>Admin: Upload New Product</h1>
    <p class="text-muted small mb-3">Product will be submitted for automatic review upon upload.</p>

    <form action="/admin/upload-product" method="POST" class="form-submit-spinner">
        <div class="form-group">
            <label for="name">Product Name:</label>
            <%# Added Placeholder %>
            <input type="text" id="name" name="name" class="form-control" value="<%= typeof product !== 'undefined' ? product.name : '' %>" placeholder="Enter product name" required>
        </div>
        <div class="form-group">
            <label for="shortDescription">Short Description (Optional):</label>
             <%# Added Placeholder %>
            <textarea id="shortDescription" name="shortDescription" class="form-control" rows="2" placeholder="Briefly describe the product (max 200 chars)"><%= typeof product !== 'undefined' ? product.shortDescription : '' %></textarea>
        </div>
        <div class="form-group">
            <label for="category">Category:</label>
            <select id="category" name="category" class="form-control" required>
                <option value="" disabled <%= !(typeof product !== 'undefined' && product.category) ? 'selected' : '' %>>Select a Category</option>
                <% if (typeof categories !== 'undefined') { %>
                    <% categories.forEach(cat => { %>
                        <option value="<%= cat.name %>" <%= (typeof product !== 'undefined' && product.category === cat.name) ? 'selected' : '' %>><%= cat.name %></option>
                    <% }) %>
                <% } %>
            </select>
        </div>
        <div class="form-group">
            <label for="price">Price (₹):</label>
             <%# Added Placeholder %>
            <input type="number" id="price" name="price" class="form-control" step="0.01" min="0" value="<%= typeof product !== 'undefined' ? product.price : '' %>" placeholder="e.g., 499.99" required>
        </div>
        <div class="form-group">
            <label for="stock">Stock Quantity:</label>
             <%# Added Placeholder %>
            <input type="number" id="stock" name="stock" class="form-control" min="0" value="<%= typeof product !== 'undefined' ? product.stock : '' %>" placeholder="e.g., 50" required>
        </div>
        <div class="form-group">
            <label for="imageUrl">Image URL (Primary):</label>
            <input type="url" id="imageUrl" name="imageUrl" class="form-control" placeholder="https://example.com/main-image.jpg" value="<%= typeof product !== 'undefined' ? product.imageUrl : '' %>" required>
        </div>
        <!-- --- UPDATED: Add Second Image URL Input --- -->
        <div class="form-group">
            <label for="imageUrl2">Second Image URL (Optional):</label>
            <input type="url"
                   id="imageUrl2"
                   name="imageUrl2"
                   class="form-control"
                   placeholder="https://example.com/alternate-image.jpg"
                   value="<%= (typeof product !== 'undefined' && product.imageUrl2) ? product.imageUrl2 : '' %>">
        </div>
        <!-- --- END UPDATED --- -->
        <div class="form-group">
            <label for="specifications">Specifications (Optional):</label>
             <%# Added Placeholder %>
            <textarea id="specifications" name="specifications" class="form-control" rows="5" placeholder="Enter product details, features, dimensions, etc. (one per line recommended)"><%= typeof product !== 'undefined' ? product.specifications : '' %></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Upload & Submit for Review</button>
        <a href="/admin/dashboard" class="btn btn-secondary">Cancel</a>
    </form>
</div>

<%- include('../partials/footer') %>


views/auth/forgot-password.ejs:
<%- include('../partials/header', { title: 'Forgot Password' }) %>

<div class="auth-container">
    <h1>Forgot Password</h1>
    <p>Enter your email address below. If an account exists, we'll send an OTP to verify your request.</p>

    <form action="/auth/forgot-password" method="POST" class="auth-form">
        <div class="form-group">
            <label for="email">Email:</label>
            <%# Added Placeholder %>
            <input type="email" id="email" name="email" placeholder="Enter your registered email" required>
        </div>
        <button type="submit" class="btn btn-primary">Send Reset OTP</button>
    </form>
    <div class="auth-links">
        <p><a href="/auth/login">Back to Login</a></p>
    </div>
</div>

<%- include('../partials/footer') %>

views/auth/login.ejs:
<%- include('../partials/header', { title: 'Login' }) %>

<div class="auth-container">
    <h1>Login</h1>

    <form action="/auth/login" method="POST" class="auth-form form-submit-spinner">
        <div class="form-group">
            <label for="email">Email:</label>
            <%# Added Placeholder %>
            <input type="email" id="email" name="email" placeholder="Enter your email" required autocomplete="email">
        </div>
        <%# --- ADDED: Password Wrapper & Toggle Button --- %>
        <div class="form-group">
            <label for="password">Password:</label>
            <div class="password-wrapper">
                <%# Added Placeholder %>
                <input type="password" id="password" name="password" placeholder="Enter your password" required autocomplete="current-password">
                <button type="button" class="password-toggle-btn" aria-label="Toggle password visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
            </div>
        </div>
        <%# --- END: Password Wrapper & Toggle Button --- %>
        <button type="submit" class="btn btn-primary">Login</button>
    </form>
    <div class="auth-links">
        <p><a href="/auth/forgot-password">Forgot Password?</a></p>
        <p>Don't have an account? <a href="/auth/register">Register here</a></p>
    </div>
</div>

<%- include('../partials/footer') %>

views/auth/register.ejs:
<%- include('../partials/header', { title: 'Register' }) %>

<div class="auth-container">
    <h1>Register</h1>

    <form action="/auth/register" method="POST" class="auth-form form-submit-spinner">
         <div class="form-group">
            <label for="name">Name:</label>
            <%# Retain value on error, added placeholder %>
            <input type="text" id="name" name="name" placeholder="Enter your full name" required autocomplete="name" value="<%= typeof name !== 'undefined' ? name : '' %>">
        </div>
        <div class="form-group">
            <label for="email">Email:</label>
             <%# Retain value on error, added placeholder %>
            <input type="email" id="email" name="email" placeholder="Enter your email address" required autocomplete="email" value="<%= typeof email !== 'undefined' ? email : '' %>">
        </div>
         <%# --- ADDED: Password Wrapper & Toggle Button --- %>
        <div class="form-group">
            <label for="password">Password:</label>
            <div class="password-wrapper">
                 <%# UPDATED: minlength="8", placeholder, title attr, added helper text --- %>
                <input type="password" id="password" name="password" placeholder="Create a password" minlength="8" required autocomplete="new-password" title="Min 8 chars: Uppercase, Lowercase, Number, Special Char">
                <button type="button" class="password-toggle-btn" aria-label="Toggle password visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
            </div>
            <%# --- ADDED: Helper Text --- %>
            <small class="form-text text-muted">Min 8 characters. Must include uppercase, lowercase, number, and special character (e.g: Example@2004).</small>
        </div>
         <%# --- END: Password Wrapper & Toggle Button --- %>
         <%# --- ADDED: Confirm Password Wrapper & Toggle Button --- %>
        <div class="form-group">
            <label for="confirmPassword">Confirm Password:</label>
             <div class="password-wrapper">
                 <%# UPDATED: minlength="8", placeholder --- %>
                <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm your password" minlength="8" required autocomplete="new-password">
                 <button type="button" class="password-toggle-btn" aria-label="Toggle password visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
            </div>
        </div>
        <%# --- END: Confirm Password Wrapper & Toggle Button --- %>
        <button type="submit" class="btn btn-primary">Register</button>
    </form>
    <div class="auth-links">
        <p>Already have an account? <a href="/auth/login">Login here</a></p>
    </div>
</div>

<%- include('../partials/footer') %>

views/auth/reset-password.ejs :
<%- include('../partials/header', { title: 'Reset Password' }) %>

<div class="auth-container">
    <h1>Reset Password</h1>
    <p>Enter your new password below.</p>

    <form action="/auth/reset-password/<%= token %>" method="POST" class="auth-form">
        <%# --- ADDED: Password Wrapper & Toggle Button --- %>
        <div class="form-group">
            <label for="password">New Password:</label>
             <div class="password-wrapper">
                 <%# UPDATED: minlength="8", placeholder, title, added helper text --- %>
                <input type="password" id="password" name="password" placeholder="Enter new password" minlength="8" required title="Min 8 chars: Uppercase, Lowercase, Number, Special Char">
                 <button type="button" class="password-toggle-btn" aria-label="Toggle password visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
            </div>
             <%# --- ADDED: Helper Text --- %>
            <small class="form-text text-muted">Min 8 characters. Must include uppercase, lowercase, number, and special character (e.g: Example@2004).</small>
        </div>
        
        <div class="form-group">
            <label for="confirmPassword">Confirm New Password:</label>
             <div class="password-wrapper">
                 <%# UPDATED: minlength="8", placeholder --- %>
                <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password" minlength="8" required>
                 <button type="button" class="password-toggle-btn" aria-label="Toggle password visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
            </div>
        </div>
        <%# --- END: Confirm Password Wrapper & Toggle Button --- %>
        <button type="submit" class="btn btn-primary">Reset Password</button>
    </form>
     <div class="auth-links">
        <p><a href="/auth/login">Back to Login</a></p>
    </div>
</div>

<%- include('../partials/footer') %><%- include('../partials/header', { title: 'Reset Password' }) %>

<div class="auth-container">
    <h1>Reset Password</h1>
    <p>Enter your new password below.</p>

    <form action="/auth/reset-password/<%= token %>" method="POST" class="auth-form">
        <%# --- ADDED: Password Wrapper & Toggle Button --- %>
        <div class="form-group">
            <label for="password">New Password:</label>
             <div class="password-wrapper">
                 <%# UPDATED: minlength="8", placeholder, title, added helper text --- %>
                <input type="password" id="password" name="password" placeholder="Enter new password" minlength="8" required title="Min 8 chars: Uppercase, Lowercase, Number, Special Char">
                 <button type="button" class="password-toggle-btn" aria-label="Toggle password visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
            </div>
             <%# --- ADDED: Helper Text --- %>
            <small class="form-text text-muted">Min 8 characters. Must include uppercase, lowercase, number, and special character (e.g: Example@2004).</small>
        </div>
        
        <div class="form-group">
            <label for="confirmPassword">Confirm New Password:</label>
             <div class="password-wrapper">
                 <%# UPDATED: minlength="8", placeholder --- %>
                <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password" minlength="8" required>
                 <button type="button" class="password-toggle-btn" aria-label="Toggle password visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
            </div>
        </div>
        <%# --- END: Confirm Password Wrapper & Toggle Button --- %>
        <button type="submit" class="btn btn-primary">Reset Password</button>
    </form>
     <div class="auth-links">
        <p><a href="/auth/login">Back to Login</a></p>
    </div>
</div>

<%- include('../partials/footer') %>

views/auth/verify-otp.ejs:
<%- include('../partials/header', { title: title || 'Verify OTP' }) %>

<div class="auth-container">
    <h1>Verify OTP</h1>
    <p>An OTP has been sent to <strong><%= email %></strong>. Please enter it below.</p>

    <form action="/auth/verify-otp" method="POST" class="auth-form form-submit-spinner">
         <input type="hidden" name="email" value="<%= email %>">
        <div class="form-group">
            <label for="otp">OTP Code:</label>
            <input type="text"
                   id="otp"
                   name="otp"
                   required
                   pattern="\d{6}"
                   maxlength="6"
                   inputmode="numeric"
                   autocomplete="one-time-code"
                   title="Enter the 6-digit OTP code received"
                   placeholder="Enter 6-digit OTP"> <%# Added Placeholder %>
        </div>
        <button type="submit" class="btn btn-primary">Verify OTP</button>
    </form>
    <div class="auth-links">
        <p>Didn't receive the OTP?</p>
        <form action="/auth/resend-otp" method="POST" style="display:inline;" class="form-submit-spinner">
             <input type="hidden" name="email" value="<%= email %>">
             <button type="submit" class="btn btn-secondary btn-sm">Resend OTP</button>
         </form>
    </div>
</div>

<%- include('../partials/footer') %>

views/partials/footer.ejs:
    </main> <%# End Main Content Area %>

    <footer class="app-footer desktop-only">
        <p>© <%= new Date().getFullYear() %> ProShop. All rights reserved.</p>
    </footer>

    <script src="/js/main.js"></script>

</body>
</html>

views/partials/header.ejs:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <% const pageTitle = typeof title !== 'undefined' ? title + ' - miniapp' : 'miniapp'; %>
  <% const siteName = typeof defaultSiteName !== 'undefined' ? defaultSiteName : 'miniapp'; %>
  <% const currentMetaTitle = typeof metaTitle !== 'undefined' ? metaTitle : pageTitle; %>
  <% const currentMetaDesc = typeof metaDescription !== 'undefined' ? metaDescription : 'Check out our products on ' + siteName; %>
  <% const currentMetaImage = typeof metaImageUrl !== 'undefined' ? metaImageUrl : '/images/default-logo.png'; %>
  <% const currentMetaUrl = typeof fullUrl !== 'undefined' ? fullUrl : ''; %>
  <% const currentMetaType = typeof metaType !== 'undefined' ? metaType : 'website'; %>

  <title><%= pageTitle %></title>
  <meta name="description" content="<%= currentMetaDesc %>">
  <meta property="og:title" content="<%= currentMetaTitle %>" />
  <meta property="og:description" content="<%= currentMetaDesc %>" />
  <meta property="og:image" content="<%= currentMetaImage %>" />
  <% if (currentMetaUrl) { %><meta property="og:url" content="<%= currentMetaUrl %>" /><% } %>
  <meta property="og:type" content="<%= currentMetaType %>" />
  <meta property="og:site_name" content="<%= siteName %>" />
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="<%= currentMetaTitle %>">
  <meta name="twitter:description" content="<%= currentMetaDesc %>">
  <meta name="twitter:image" content="<%= currentMetaImage %>">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
  <link rel="icon" href="/favicon.ico" type="image/x-icon">
  <link rel="stylesheet" href="/css/style.css">
</head>
<%# --- MODIFIED: Added data-is-authenticated attribute --- %>
<body data-is-authenticated="<%= currentUser ? 'true' : 'false' %>">
  <header class="app-header">
    <nav class="navbar">
      <div class="nav-left">
        <a href="/" class="app-logo">
          <i class="fas fa-shopping-bag"></i>
          <span class="app-name">miniapp</span>
        </a>
      </div>

      <div class="search-container-dynamic" id="dynamic-search-container">
          <form action="/products" method="GET" class="search-form-dynamic" id="dynamic-search-form">
              <input type="search"
                     id="search-input-dynamic"
                     name="search"
                     placeholder="Search products..."
                     aria-label="Search Products"
                     autocomplete="off">
              <button type="submit" class="search-submit-btn-dynamic" aria-label="Submit Search">
                  <i class="fas fa-search"></i>
              </button>
          </form>
           <div class="suggestions-dropdown" id="suggestions-dropdown">
              <%# Suggestions will be populated here by JS %>
          </div>
      </div>

      <div class="nav-right">
          <button class="nav-link search-toggle-btn" id="search-toggle-btn" aria-label="Toggle Search Bar">
              <i class="fas fa-search"></i>
              <span>Search</span>
          </button>

        <% if (currentUser) { %>
          <a href="/" class="nav-link <%= currentUrl === '/' ? 'active' : '' %>" title="Home Page">
            <i class="fas fa-home"></i> <span>Home</span>
          </a>
          <a href="/user/cart" class="nav-link nav-link-cart <%= currentUrl === '/user/cart' ? 'active' : '' %>" title="Cart Page">
            <i class="fas fa-shopping-cart"></i>
            <span class="cart-badge <%= cartItemCount > 0 ? '' : 'hide' %>"><%= cartItemCount %></span>
            <span>Cart</span>
          </a>
          <a href="/user/profile" class="profile-avatar-link <%= currentUrl === '/user/profile' ? 'active' : '' %>" title="My Profile Page">
            <span class="profile-avatar-initials"><%= userInitials %></span>
          </a>
        <% } else { %>
          <a href="/auth/login" class="btn btn-login-register">
            <i class="fas fa-sign-in-alt"></i> Login / Register
          </a>
        <% } %>
      </div>
    </nav>
  </header>

  <%- include('messages') %>

  <main class="container">

views/partials/messages.ejs:
<%# views/partials/messages.ejs %>

<%# --- NEW: Toast Container --- %>
<div class="toast-container">
    <% if (success_msg && success_msg.length > 0) { %>
      <div class="toast toast-success" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-body">
          <%= success_msg %>
          <button type="button" class="toast-close-btn" aria-label="Close">×</button>
        </div>
      </div>
    <% } %>

    <% if (error_msg && error_msg.length > 0) { %>
       <div class="toast toast-danger" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-body">
          <%= error_msg %>
           <button type="button" class="toast-close-btn" aria-label="Close">×</button>
        </div>
      </div>
    <% } %>

    <% if (error && typeof error !== 'undefined' && error.length > 0) { %>
      <div class="toast toast-danger" role="alert" aria-live="assertive" aria-atomic="true">
         <div class="toast-body">
           <%= error %>
            <button type="button" class="toast-close-btn" aria-label="Close">×</button>
         </div>
       </div>
    <% } %>

    <%# Add other flash message types (info, warning) here if needed %>

</div>
<%# --- End Toast Container --- %>

<%# The old alert divs are removed %>

views/products/detail.ejs:
<%# views/products/detail.ejs %>
<%- include('../partials/header', {
    title: product.name,
    metaTitle: product.name + ' - ' + defaultSiteName,
    metaDescription: (product.shortDescription || `Check out ${product.name} on miniapp. Available now for ₹${product.price.toFixed(2)}.`).substring(0, 157) + '...',
    metaImageUrl: product.imageUrl, // Use primary image for meta tags
    metaUrl: fullUrl,
    metaType: 'product'
}) %>

<div class="product-detail-container">

   <%# --- Status Banner --- %>
   <% if (!isApproved && (isAdminView || isOwnerView)) { %>
     <div class="alert alert-<%= product.reviewStatus === 'rejected' ? 'danger' : 'warning' %> mb-3" role="alert">
       <strong>Status:</strong> <span class="text-capitalize fw-bold"><%= product.reviewStatus %></span>
       <% if (product.reviewStatus === 'rejected' && product.rejectionReason) { %>
         <br><strong>Reason:</strong> <%= product.rejectionReason %>
       <% } else if (product.reviewStatus === 'pending') { %>
          - This product is awaiting review and is not visible to customers.
       <% } %>
       <% if (isOwnerView && product.reviewStatus !== 'approved') { %>
          <br><a href="/seller/products/edit/<%= product._id %>" class="alert-link">Edit and Resubmit for Review</a>
        <% } else if (isAdminView && product.reviewStatus !== 'approved') { %>
           <br><a href="/admin/manage-products/edit/<%= product._id %>" class="alert-link">Admin: Edit Status/Details</a>
       <% } %>
     </div>
   <% } else if (!isApproved && !isAdminView && !isOwnerView) { %>
      <div class="alert alert-danger">This product is currently unavailable.</div>
      </div> <%# Close container early if unavailable %>
      <%- include('../partials/footer') %>
      <% return; %>
   <% } %>

   <div class="product-detail-main">
        <%# --- Image Display Logic --- %>
        <div class="product-detail-image-section"> <%# Wrapper section %>
            <% if (product.imageUrl2) { %>
                <%# Slider structure if two images exist %>
                <div class="product-image-slider-container" data-product-image-slider>
                    <div class="product-image-slides">
                        <div class="product-image-slide active" data-product-slide>
                            <img src="<%= product.imageUrl %>" alt="<%= product.name %> - Image 1" class="product-detail-image">
                        </div>
                        <div class="product-image-slide" data-product-slide>
                             <img src="<%= product.imageUrl2 %>" alt="<%= product.name %> - Image 2" class="product-detail-image">
                        </div>
                    </div>
                    <%# Navigation Arrows only if there are slides to navigate %>
                    <button class="product-image-nav product-image-prev" data-product-image-nav="prev" aria-label="Previous Image">‹</button>
                    <button class="product-image-nav product-image-next" data-product-image-nav="next" aria-label="Next Image">›</button>
                    <%# Navigation Dots only if there are slides to navigate %>
                     <div class="product-image-dots">
                         <button class="product-image-dot active" data-product-image-dot="0" aria-label="Go to image 1"></button>
                         <button class="product-image-dot" data-product-image-dot="1" aria-label="Go to image 2"></button>
                     </div>
                </div>
            <% } else { %>
                <%# Original single image display if only one image %>
                <div class="product-detail-image-single"> <%# Optional wrapper %>
                    <img src="<%= product.imageUrl %>" alt="<%= product.name %>" class="product-detail-image">
                </div>
            <% } %>
        </div>
        <%# --- END Image Display Logic --- %>

       <div class="product-detail-info">
            <h1><%= product.name %></h1>
            <% if (product.shortDescription) { %>
              <p class="product-short-description text-muted mb-2"><%= product.shortDescription %></p>
            <% } %>
            <p class="detail-price">₹<%= product.price.toFixed(2) %></p>
            <p class="detail-stock">
                <% if (product.stock > 0) { %>
                    Available Stock : <%= product.stock %>
                <% } else { %>
                    <span class="text-danger fw-bold">Out of Stock</span>
                <% } %>
            </p>

            <%# Share Button %>
            <div class="share-section mt-2">
                 <button id="share-product-btn" class="btn btn-outline-secondary btn-sm"
                         data-title="<%= product.name %>"
                         data-text="Check out this product: <%= product.name %>"
                         data-url="<%= fullUrl %>">
                     <i class="fas fa-share-alt"></i> Share
                 </button>
                 <div id="fallback-share-links" class="fallback-share-links hidden">
                     <small>Share via:</small>
                     <a href="https://www.facebook.com/sharer/sharer.php?u=<%= encodeURIComponent(fullUrl) %>" target="_blank" rel="noopener noreferrer" aria-label="Share on Facebook"><i class="fab fa-facebook-square"></i></a>
                     <a href="https://twitter.com/intent/tweet?url=<%= encodeURIComponent(fullUrl) %>&text=<%= encodeURIComponent('Check out this product: ' + product.name) %>" target="_blank" rel="noopener noreferrer" aria-label="Share on Twitter"><i class="fab fa-twitter-square"></i></a>
                     <a href="https://api.whatsapp.com/send?text=<%= encodeURIComponent('Check out this product: ' + product.name + ' ' + fullUrl) %>" target="_blank" rel="noopener noreferrer" aria-label="Share on WhatsApp"><i class="fab fa-whatsapp-square"></i></a>
                     <a href="mailto:?subject=<%= encodeURIComponent('Check out this product: ' + product.name) %>&body=<%= encodeURIComponent('I thought you might like this product:\n\n' + product.name + '\n' + fullUrl) %>" aria-label="Share via Email"><i class="fas fa-envelope-square"></i></a>
                 </div>
             </div>

           <%# --- Conditional Purchase Actions START --- %>
           <% if (isApproved) { %>
               <div class="product-actions mt-3"> <%# Added margin-top %>
                   <div class="d-flex flex-wrap align-items-center gap-2">

                       <%# Add to Cart Form (Target for JS) %>
                       <form action="/user/cart/add" method="POST" id="add-to-cart-form-<%= product._id %>" class="form-submit-spinner">
                          <input type="hidden" name="productId" value="<%= product._id %>">
                           <div class="quantity-selector d-inline-flex align-items-center me-2">
                               <label for="quantity-<%= product._id %>" class="me-1 mb-0 text-muted small">Qty:</label>
                               <input type="number"
                                      id="quantity-<%= product._id %>"
                                      name="quantity"
                                      value="1"
                                      min="1"
                                      max="<%= product.stock %>"
                                      required
                                      aria-label="Quantity"
                                      class="form-control form-control-sm"
                                      style="width: 65px;">
                           </div>
                       </form>

                       <%# Add to Cart Button (Target for JS) %>
                       <button type="submit"
                               id="btn-add-to-cart-<%= product._id %>" <%# *** ADDED ID *** %>
                               form="add-to-cart-form-<%= product._id %>"
                               class="btn btn-primary btn-sm btn-action"
                               <%= product.stock <= 0 ? 'disabled' : '' %>>
                           <i class="fas fa-cart-plus"></i> <%= product.stock <= 0 ? 'Out of Stock' : 'Add to Cart' %>
                       </button>

                        <%# Buy Now Form (Target for JS) %>
                        <% if (product.stock > 0) { %>
                        <form action="/user/cart/add?redirectTo=checkout" method="POST" id="buy-now-form-<%= product._id %>" class="form-submit-spinner">
                              <input type="hidden" name="productId" value="<%= product._id %>">
                              <%# Ensure quantity for Buy Now is consistent with Add to Cart selection %>
                              <input type="hidden" name="quantity" id="buy-now-quantity-<%= product._id %>" value="1">
                           </form>
                            <%# Buy Now Button (Target for JS) %>
                           <button type="submit"
                                   id="btn-buy-now-<%= product._id %>" <%# *** ADDED ID *** %>
                                   form="buy-now-form-<%= product._id %>"
                                   class="btn btn-success btn-sm btn-action">
                                   Buy Now
                           </button>
                        <% } else {%>
                          <button class="btn btn-success btn-sm btn-action" disabled>Buy Now</button>
                        <% } %>

                   </div>
               </div>
            <% } else { %>
                <%# Unavailable state buttons %>
                <div class="product-actions mt-3">
                     <div class="d-flex flex-wrap align-items-center gap-2">
                         <button class="btn btn-primary btn-sm btn-action" disabled><i class="fas fa-cart-plus"></i> Add to Cart</button>
                         <button class="btn btn-success btn-sm btn-action" disabled>Buy Now</button>
                     </div>
                     <p class="text-muted small mt-2">This product is currently under review or unavailable.</p>
                 </div>
            <% } %>
            <%# --- Conditional Purchase Actions END --- %>


            <%# Specifications %>
            <div class="product-specifications mt-3">
                 <h3>Specifications</h3>
                 <pre class="border p-2 bg-light small"><%= product.specifications || 'No specifications provided.' %></pre>
            </div>

            <%# Seller Info %>
            <p class="small text-muted mt-3">Seller Info : <%= product.sellerEmail || 'Unknown Seller' %></p>

            <%# Rating Display %>
            <div class="mb-3 mt-2">
                 <% if (product.numReviews > 0) { %>
                     <p class="detail-rating">
                         Rating:
                        <% for(let i=1; i<=5; i++) { %><i class="fas fa-star<%= i <= product.averageRating ? '' : (i - 0.5 <= product.averageRating ? '-half-alt' : '-regular') %>"></i><% } %>
                         (<%= product.numReviews %> reviews) | <%= product.orderCount %> Ordered
                     </p>
                 <% } else { %>
                     <p class="detail-rating">No reviews yet | <%= product.orderCount %> Ordered</p>
                 <% } %>
             </div>

       </div> <%# End product-detail-info %>
    </div> <%# End product-detail-main %>

   <%# Conditional Rating Section (User Input) %>
   <div class="product-rating-section mt-4 border-top pt-3">
        <h3>Rate This Product</h3>
        <% if (isApproved) { %>
            <% if (userCanRate) { %>
                <form action="/products/<%= product._id %>/rate" method="POST" class="form-submit-spinner">
                    <div class="rating-stars">
                        <% for (let i = 5; i >= 1; i--) { %><input type="radio" id="star<%= i %>" name="rating" value="<%= i %>" <%= userRating === i ? 'checked' : '' %> required><label for="star<%= i %>" title="<%= i %> stars"><i class="fas fa-star"></i></label><% } %>
                    </div>
                    <button type="submit" class="btn btn-primary btn-sm">Submit Rating</button>
                </form>
            <% } else { %>
               <p><a href="/auth/login?returnTo=<%= encodeURIComponent(currentUrl) %>">Login</a> to rate this product.</p>
            <% } %>
         <% } else { %>
             <p class="text-muted">Rating is unavailable until the product is approved.</p>
         <% } %>
   </div>

    <%# Rating Stats Display (Summary) %>
    <div class="rating-stats-container mt-4 border-top pt-3">
        <h3>Ratings & Reviews Summary</h3>
         <% if (totalRatings > 0) { %>
             <div class="rating-summary mb-3">
                 <div class="rating-average">
                     <span class="rating-average-value"><%= product.averageRating.toFixed(1) %></span> <i class="fas fa-star text-warning"></i>
                 </div>
                 <div class="rating-total text-muted small">
                     Based on <%= totalRatings %> Rating<%= totalRatings !== 1 ? 's' : '' %>
                 </div>
             </div>
            <div class="rating-bars">
                <% for (let i = 5; i >= 1; i--) {
                      const count = ratingCounts[i] || 0;
                      const percentage = totalRatings > 0 ? (count / totalRatings) * 100 : 0;
                 %>
                     <div class="rating-bar-row">
                         <span class="rating-bar-label small"><%= i %> <i class="fas fa-star text-warning"></i></span>
                         <div class="rating-bar-progress progress" style="height: 8px;">
                             <div class="rating-bar-fill progress-bar bg-success" role="progressbar" data-width="<%= percentage.toFixed(1) %>" aria-valuenow="<%= percentage.toFixed(1) %>" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>
                         </div>
                         <span class="rating-bar-count small text-muted"><%= count %></span>
                     </div>
                 <% } %>
            </div>
        <% } else { %>
            <p>No ratings yet for this product.</p>
         <% } %>
    </div>

</div> <%# End product-detail-container %>


<%# --- INLINE SCRIPT FOR DETAIL PAGE AUTH CHECK --- %>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // Get authentication status from body tag (set in header.ejs)
    const isAuthenticated = document.body.dataset.isAuthenticated === 'true';

    // Helper function for redirection
    const redirectToLogin = (returnUrl) => {
        sessionStorage.setItem('showLoginRedirectToast', 'true');
        window.location.href = `/auth/login?returnTo=${encodeURIComponent(returnUrl)}`;
    };

    // *** Add to Cart Button Listener ***
    const addToCartBtn = document.getElementById('btn-add-to-cart-<%= product._id %>');
    if (addToCartBtn) {
        addToCartBtn.addEventListener('click', (event) => {
            if (!isAuthenticated) {
                event.preventDefault(); // Prevent form submission
                redirectToLogin(window.location.pathname + window.location.search);
            }
            // If authenticated, the default form submission will proceed
        });
    }

    // *** Buy Now Button Listener ***
    const buyNowBtn = document.getElementById('btn-buy-now-<%= product._id %>');
    const quantityInput = document.getElementById('quantity-<%= product._id %>'); // Get the quantity input
    const buyNowQuantityInput = document.getElementById('buy-now-quantity-<%= product._id %>'); // Get the hidden input for buy now

    if (buyNowBtn) {
        buyNowBtn.addEventListener('click', (event) => {
            if (!isAuthenticated) {
                event.preventDefault(); // Prevent form submission
                redirectToLogin(window.location.pathname + window.location.search);
            } else {
                 // *** NEW: Update hidden quantity for Buy Now ***
                 if (quantityInput && buyNowQuantityInput) {
                    buyNowQuantityInput.value = quantityInput.value || '1'; // Use selected qty or default to 1
                 }
                 // Allow form submission to proceed (including spinner logic if attached)
            }
        });
    }
});
</script>
<%# --- END INLINE SCRIPT --- %>


<script>
    // --- Image Slider JS ---
    // ... (Existing Image Slider JS - Keep As Is) ...
    const imageSlider = document.querySelector('[data-product-image-slider]');
    if (imageSlider) {
        const slides = imageSlider.querySelectorAll('[data-product-slide]');
        const prevBtn = imageSlider.querySelector('[data-product-image-nav="prev"]');
        const nextBtn = imageSlider.querySelector('[data-product-image-nav="next"]');
        const dots = imageSlider.querySelectorAll('[data-product-image-dot]');
        let currentImageIndex = 0;

        function showProductImage(index) {
            if (!slides || slides.length < 2) return; // Ensure slider elements exist and there's > 1 slide

            // Calculate the new index correctly handling negative numbers
            const newIndex = (index % slides.length + slides.length) % slides.length;

            // Update active classes for slides and dots
            slides.forEach((slide, i) => {
                slide.classList.toggle('active', i === newIndex);
            });
            dots.forEach((dot, i) => {
                dot.classList.toggle('active', i === newIndex);
            });

            currentImageIndex = newIndex;
        }

        // Add event listeners if buttons/dots exist
        if (nextBtn) {
            nextBtn.addEventListener('click', () => showProductImage(currentImageIndex + 1));
        }
        if (prevBtn) {
            prevBtn.addEventListener('click', () => showProductImage(currentImageIndex - 1));
        }

        dots.forEach(dot => {
            dot.addEventListener('click', () => {
                const index = parseInt(dot.dataset.productImageDot, 10);
                if (!isNaN(index)) {
                    showProductImage(index);
                }
            });
        });

        // Initialize the slider to the first image
        if (slides.length > 0) {
             showProductImage(0);
        }
    }
    // --- END Image Slider JS ---

    // --- Rating Bar Animation JS ---
    // ... (Existing Rating Bar JS - Keep As Is) ...
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.rating-bar-fill').forEach(function(el) {
            var width = el.getAttribute('data-width');
            if (width) {
                setTimeout(() => {
                     el.style.width = width + '%';
                }, 100); // Slight delay for effect
            }
        });
    });
    // --- END Rating Bar Animation JS ---
</script>

<%- include('../partials/footer') %>

views/products/index.ejs:
<%# views/products/index.ejs %>
<%- include('../partials/header', { title: title }) %>

<%# --- Category Icons Section (Uses new CSS) --- %>
<% if (typeof displayCategories !== 'undefined' && displayCategories.length > 0) { %>
    <div class="category-icons-section mb-4">
        <div class="category-grid">
            <% displayCategories.forEach(cat => { %>
                <% let categoryUrl = '/?category=' + encodeURIComponent(cat.name); %>
                <%# Keep search term if user is filtering category *after* a search %>
                <% if (typeof searchTerm !== 'undefined' && searchTerm) { categoryUrl += '&search=' + encodeURIComponent(searchTerm); } %>
                <a href="<%= categoryUrl %>"
                   class="category-item <%= (typeof selectedCategory !== 'undefined' && selectedCategory === cat.name) ? 'active' : '' %>"
                   title="Shop <%= cat.name %>">
                    <div class="category-icon-wrapper">
                         <img src="<%= cat.iconUrl %>"
                              alt="<%= cat.name %> Icon"
                              class="category-icon"
                              loading="lazy">
                    </div>
                    <span class="category-name"><%= cat.name %></span>
                </a>
            <% }) %>
        </div>
    </div>
<% } %>
<%# --- End: Category Icons Section --- %>


<%# --- Conditionally Display Banner Slider --- %>
<%# Only show the banner if NO category is selected AND NO search term is present %>
<% if (!selectedCategory && (!searchTerm || searchTerm.trim() === '')) { %>
    <% if (typeof homepageBanners !== 'undefined' && homepageBanners.length > 0) { %>
        <div class="banner-slider-container mb-4" data-slider-container>
            <div class="banner-slides" data-slides>
                <% homepageBanners.forEach((banner, index) => { %>
                    <div class="banner-slide <%= index === 0 ? 'active' : '' %>" data-slide>
                        <% if (banner.linkUrl) { %>
                            <a href="<%= banner.linkUrl %>" rel="noopener noreferrer" class="banner-link">
                                <img src="<%= banner.imageUrl %>"
                                     alt="<%= banner.title || `Promotional Banner ${index + 1}` %>"
                                     class="banner-image"
                                     loading="lazy">
                            </a>
                        <% } else { %>
                            <img src="<%= banner.imageUrl %>"
                                 alt="<%= banner.title || `Promotional Banner ${index + 1}` %>"
                                 class="banner-image"
                                 loading="lazy">
                        <% } %>
                    </div>
                <% }) %>
            </div>

            <%# Optional: Navigation Arrows %>
            <% if (homepageBanners.length > 1) { %>
                <button class="banner-nav banner-prev" data-slider-prev aria-label="Previous Banner"><i class="fas fa-chevron-left"></i></button>
                <button class="banner-nav banner-next" data-slider-next aria-label="Next Banner"><i class="fas fa-chevron-right"></i></button>
            <% } %>

            <%# Optional: Navigation Dots %>
             <% if (homepageBanners.length > 1) { %>
                <div class="banner-dots" data-slider-dots>
                    <% homepageBanners.forEach((_, index) => { %>
                        <button class="banner-dot <%= index === 0 ? 'active' : '' %>" data-slide-to="<%= index %>" aria-label="Go to banner <%= index + 1 %>"></button>
                    <% }) %>
                </div>
            <% } %>
        </div>
    <% } %>
<% } %>
<%# --- End: Homepage Banner Slider Section --- %>


<div class="product-index-container">
     <%# Display title based on filter/search %>
     <% if (selectedCategory) { %>
         <h1 class="mb-3"><%= selectedCategory %> Products</h1>
     <% } else if (searchTerm) { %>
         <h1 class="mb-3">Search Results for "<%= searchTerm %>"</h1>
     <% } else { %>
          <%# Only show "New Launches" if neither category nor search is active %>
          <h1 class="mb-3">New Launches</h1>
     <% } %>


    <%# Check if products array exists and has items %>
    <% if (typeof products !== 'undefined' && products.length > 0) { %>
        <div class="product-grid">
            <% products.forEach(product => { %>
                <%# Ensure product and its properties exist before accessing %>
                <% if (product && product._id && product.name && product.imageUrl && typeof product.price !== 'undefined' && typeof product.stock !== 'undefined') { %>
                    <div class="product-card">
                        <a href="/products/<%= product._id %>" class="product-link">
                            <img src="<%= product.imageUrl %>" alt="<%= product.name %>" class="product-image" loading="lazy"> <%# Added lazy loading %>
                            <div class="product-info">
                                <h3 class="product-name"><%= product.name %></h3>
                                <p class="product-price">₹<%= (typeof product.price === 'number' ? product.price : 0).toFixed(2) %></p>
                                <p class="product-stock">Stock: <%= product.stock %></p>
                                <%# Display Rating %>
                                <% const numReviews = product.numReviews || 0; %>
                                <% const averageRating = product.averageRating || 0; %>
                                <% if (numReviews > 0) { %>
                                     <p class="product-rating">
                                        <% for(let i=1; i<=5; i++) { %>
                                            <i class="fas fa-star<%= i <= averageRating ? '' : (i - 0.5 <= averageRating ? '-half-alt' : '-regular') %>"></i>
                                        <% } %>
                                        (<%= numReviews %>)
                                     </p>
                                <% } else { %>
                                    <p class="product-rating" style="height: 1.2em;"> </p> <%# Keep space for alignment if no rating %>
                                <% } %>
                            </div>
                        </a>
                         <%# --- UPDATED: Changed to button for AJAX --- %>
                         <div class="product-card-actions">
                            <button type="button"
                                    class="btn btn-primary btn-ajax-add-to-cart" <%# Use new class %>
                                    data-product-id="<%= product._id %>" <%# Add product ID %>
                                    <%= product.stock <= 0 ? 'disabled' : '' %>
                                    title="Add <%= product.name %> to cart">
                                <i class="fas fa-cart-plus"></i> <%= product.stock <= 0 ? 'Out of Stock' : 'Add to Cart' %>
                             </button>
                         </div>
                          <%# --- END UPDATE --- %>
                    </div>
                <% } %>
            <% }) %>
        </div>
    <% } else { %>
         <%# Display message if no products match filters or none exist %>
         <p class="alert alert-info mt-3"> <%# Added margin-top %>
             <% if (typeof searchTerm !== 'undefined' && searchTerm) { %>
                 No products found matching your search "<%= searchTerm %>". <a href="/" class="alert-link">Check back soon!</a>
             <% } else if (typeof selectedCategory !== 'undefined' && selectedCategory) { %>
                 No products found in the category "<%= selectedCategory %>". <a href="/" class="alert-link">Check back soon!</a>
             <% } else { %>
                 No products are currently available. Check back soon!
             <% } %>
         </p>
    <% } %>

</div>

<%- include('../partials/footer') %>

views/seller/dashboard.ejs:
<%- include('../partials/header', { title: 'Seller Dashboard' }) %>

<div class="admin-dashboard-container"> <%# Re-use admin style container %>
    <h1>Seller Dashboard</h1>
    <p class="text-muted mb-3">Manage your products and orders.</p>

    <div class="admin-actions-grid"> <%# Re-use admin style grid %>
         <a href="/seller/products/upload" class="admin-action-card">
            <i class="fas fa-upload text-primary"></i> <%# Added color class %>
            <h3>Upload Product</h3>
            <p>Add a new product to your listings.</p>
        </a>
         <a href="/seller/products" class="admin-action-card">
            <i class="fas fa-edit text-success"></i> <%# Added color class %>
            <h3>Manage Products</h3>
            <p>View status, edit, or remove your products.</p>
         </a>
        <a href="/seller/orders" class="admin-action-card">
             <i class="fas fa-clipboard-list text-info"></i> <%# Added color class %>
             <h3>Manage Orders</h3>
             <p>View and manage orders containing your products.</p>
        </a>

        <%# The "My Profile" card linking to /user/profile has been removed %>

    </div>
</div>

<%- include('../partials/footer') %>

views/seller/edit-product.ejs:
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container"> <%# Reuse admin style %>
    <h1><%= title %></h1>
    <p class="text-muted small mb-3">Updating the product will reset its status to 'pending' and trigger a new review.</p>

     <form action="/seller/products/update/<%= product._id %>" method="POST" class="form-submit-spinner">
         <div class="alert alert-<%= product.reviewStatus === 'approved' ? 'success' : (product.reviewStatus === 'rejected' ? 'danger' : 'warning') %>" role="alert">
           <strong>Current Status:</strong> <span class="text-capitalize"><%= product.reviewStatus %></span>
           <% if(product.reviewStatus === 'rejected' && product.rejectionReason) { %>
            <br><strong>Rejection Reason:</strong> <%= product.rejectionReason %>
           <% } %>
         </div>

        <div class="form-group">
             <label for="name">Product Name:</label>
             <%# Added Placeholder %>
            <input type="text" id="name" name="name" class="form-control" value="<%= product.name %>" placeholder="Enter product name" required>
         </div>
        <div class="form-group">
            <label for="shortDescription">Short Description (Optional):</label>
            <%# Added Placeholder %>
            <textarea id="shortDescription" name="shortDescription" class="form-control" rows="2" placeholder="Briefly describe the product (max 200 chars)"><%= product.shortDescription || '' %></textarea>
        </div>
        <div class="form-group">
            <label for="category">Category:</label>
            <select id="category" name="category" class="form-control" required>
                <option value="" disabled <%= !product.category ? 'selected' : '' %>>Select a Category</option>
                <% if (typeof categories !== 'undefined') { %>
                    <% categories.forEach(cat => { %>
                        <option value="<%= cat.name %>" <%= (product.category === cat.name) ? 'selected' : '' %>><%= cat.name %></option>
                    <% }) %>
                <% } %>
            </select>
        </div>
         <div class="form-group">
            <label for="price">Price (₹):</label>
            <%# Added Placeholder %>
            <input type="number" id="price" name="price" class="form-control" step="0.01" min="0" value="<%= product.price %>" placeholder="e.g., 499.99" required>
         </div>
        <div class="form-group">
             <label for="stock">Stock Quantity:</label>
             <%# Added Placeholder %>
             <input type="number" id="stock" name="stock" class="form-control" min="0" value="<%= product.stock %>" placeholder="e.g., 50" required>
        </div>
         <div class="form-group">
             <label for="imageUrl">Image URL (Primary):</label>
             <%# Added Placeholder %>
             <input type="url" id="imageUrl" name="imageUrl" class="form-control" value="<%= product.imageUrl %>" placeholder="https://example.com/main-image.jpg" required>
             <% if(product.imageUrl) { %>
                <img src="<%= product.imageUrl %>" alt="Current Image" style="max-width: 100px; margin-top: 5px; border: 1px solid #ddd; padding: 2px;">
             <% } %>
         </div>
         <!-- --- UPDATED: Add Second Image URL Input --- -->
         <div class="form-group">
             <label for="imageUrl2">Second Image URL (Optional):</label>
             <%# Added Placeholder %>
             <input type="url"
                    id="imageUrl2"
                    name="imageUrl2"
                    class="form-control"
                    placeholder="https://example.com/alternate-image.jpg"
                    value="<%= (typeof product !== 'undefined' && product.imageUrl2) ? product.imageUrl2 : '' %>">
              <%# Preview for edit forms %>
              <% if (typeof product !== 'undefined' && product.imageUrl2) { %>
                 <img src="<%= product.imageUrl2 %>" alt="Current Second Image" style="max-width: 100px; margin-top: 5px; border:1px solid #ccc; padding:2px;">
              <% } %>
         </div>
         <!-- --- END UPDATED --- -->
         <div class="form-group">
             <label for="specifications">Specifications (Optional):</label>
             <%# Added Placeholder %>
             <textarea id="specifications" name="specifications" class="form-control" rows="5" placeholder="Enter product details, features, dimensions, etc. (one per line recommended)"><%= product.specifications %></textarea>
        </div>
         <button type="submit" class="btn btn-primary">Update & Resubmit for Review</button>
         <a href="/seller/products" class="btn btn-secondary">Cancel</a>
    </form>
 </div>

 <%- include('../partials/footer') %>

views/seller/manage-orders.ejs:
<%# views/seller/manage-orders.ejs %>
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container order-manage-page">
    <h1>Manage Your Orders</h1>
    <p class="text-muted small mb-3">Showing orders that contain one or more of your products.</p>

    <%# --- ADD FILTER INPUT --- %>
    <div class="form-group mb-3">
        <label for="order-filter-input" class="visually-hidden">Filter Orders:</label>
        <%# Added Placeholder %>
        <input type="text" id="order-filter-input" class="form-control" placeholder="Type to filter orders (ID, Name, Email, Product, Status...)" aria-label="Filter Orders">
    </div>
    <%# --- END FILTER INPUT --- %>


    <% if (message) { %>
        <p class="alert alert-info"><%= message %></p>
    <% } %>

    <% if (orders.length > 0) { %>
        <div class="table-container">
            <table class="data-table order-table" id="seller-order-table"> <%# Added ID %>
                <thead>
                    <tr>
                        <th>Order ID / Date</th>
                        <th>Customer / Address</th>
                        <th>Items (Your items highlighted)</th>
                        <th>Total</th>
                        <th>Status</th>
                        <th class="actions-cell">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% orders.forEach(order => { %>
                         <%# Added class="order-row" %>
                        <tr class="status-<%= order.status.toLowerCase().replace(/ /g, '-') %> order-row" data-order-id="<%= order._id %>">
                            <td data-label="Order ID / Date">
                                <%= order._id %><br>
                                <small class="text-muted"><%= formatDateIST(order.orderDate) %></small>
                            </td>
                            <td data-label="Customer / Address">
                                <strong><%= order.shippingAddress.name %></strong><br>
                                <small class="text-muted"><%= order.userEmail || order.userId?.email %></small><br>
                                <small class="text-muted"><%= order.shippingAddress.cityVillage %>, <%= order.shippingAddress.pincode %></small><br>
                                <small><strong>Ph:</strong> <%= order.shippingAddress.phone %></small>
                            </td>
                            <td data-label="Items">
                                <div class="order-items-summary">
                                    <%- order.itemsSummary %>
                                </div>
                                <% if (order.products && order.products.length > 0) { %>
                                    <div class="order-items-images">
                                        <% order.products.forEach(item => { %>
                                            <% if (item.productId && item.productId._id && item.productId.imageUrl) { %>
                                                <a href="/products/<%= item.productId._id %>" target="_blank" title="View <%= item.productId.name || 'Product' %>">
                                                    <img src="<%= item.productId.imageUrl %>"
                                                         alt="<%= item.productId.name || 'Product Image' %>"
                                                         class="order-item-thumbnail" loading="lazy">
                                                </a>
                                            <% } else if (item.productId && item.productId._id) { %>
                                                <a href="/products/<%= item.productId._id %>" target="_blank" class="order-item-thumbnail-placeholder" title="View <%= item.productId.name || 'Product' %>">[No Img]</a>
                                            <% } else { %>
                                                <span class="order-item-thumbnail-placeholder" title="Product data missing">[N/A]</span>
                                            <% } %>
                                        <% }) %>
                                    </div>
                                <% } %>
                            </td>
                            <td data-label="Total" class="order-total"><strong>₹<%= order.totalAmount.toFixed(2) %></strong></td>
                            <td data-label="Status" class="order-status-cell">
                                <span class="status-badge status-<%= order.status.toLowerCase().replace(/ /g, '-') %>"><%= order.status %></span>
                                <% if(order.status === 'Cancelled' && order.cancellationReason) { %>
                                    <br><small class="text-danger mt-1 d-block">Reason:<br><%= order.cancellationReason %></small>
                                <% } %>
                                <% if(order.status === 'Delivered' && order.receivedByDate) { %><br><small class="text-success mt-1 d-block">Delivered:<br><%= formatDateIST(order.receivedByDate) %></small><% } %>
                                <% if (order.showDeliveryOtp && order.status === 'Pending') { %>
                                  <div class="delivery-otp-display mt-1">
                                    <p>Customer OTP Sent</p>
                                    <small class="text-muted">Ask customer for code: <strong class="delivery-otp-code">****<%= order.orderOTP ? order.orderOTP.slice(-2) : 'XX' %></strong></small>
                                  </div>
                                <% } %>
                            </td>
                            <td data-label="Actions" class="actions-cell">
                                <%# Seller Direct Delivery Confirmation %>
                                <% if (order.canBeDirectlyDeliveredBySeller) { %>
                                    <div class="action-group mb-2">
                                        <p class="action-group-title">Confirm Delivery:</p>
                                        <% if (!order.showDeliveryOtp) { %>
                                            <form action="/seller/orders/<%= order._id %>/send-otp" method="POST" class="inline-form form-submit-spinner mb-1">
                                                <button type="submit" class="btn btn-warning btn-sm w-100 w-md-auto" title="Send OTP to customer to confirm delivery">
                                                    <i class="fas fa-mobile-alt"></i> Send OTP
                                                </button>
                                            </form>
                                        <% } %>
                                        <form action="/seller/orders/<%= order._id %>/confirm-delivery" method="POST" class="inline-form verify-otp-form form-submit-spinner">
                                             <%# Added Placeholder %>
                                            <input type="text" name="otp" placeholder="Enter OTP" required pattern="\d{6}" maxlength="6" inputmode="numeric" title="Enter 6-digit OTP from customer">
                                            <button type="submit" class="btn btn-success btn-sm" title="Confirm delivery using customer's OTP">
                                                <i class="fas fa-check-double"></i> Confirm
                                            </button>
                                        </form>
                                    </div>
                                <% } %>

                                <%# Seller Order Cancellation Form %>
                                <% if (order.canBeCancelledBySeller) { %>
                                    <div class="action-group">
                                        <form action="/seller/orders/<%= order._id %>/cancel" method="POST" class="cancel-delivery-form form-submit-spinner" onsubmit="return confirm('SELLER ACTION: Are you sure you want to cancel your items in order <%= order._id %>? This action cannot be undone.');">
                                            <label for="reason-<%= order._id %>" class="action-group-title">Cancel Your Items:</label>
                                            <select name="reason" id="reason-<%= order._id %>" required class="form-control form-control-sm d-block mb-1">
                                                <option value="" disabled selected>Select Seller Reason...</option>
                                                <% if (typeof sellerCancellationReasons !== 'undefined' && sellerCancellationReasons.length > 0) { %>
                                                    <% sellerCancellationReasons.forEach(reason => { %>
                                                        <option value="<%= reason %>"><%= reason %></option>
                                                    <% }) %>
                                                <% } else { %>
                                                    <option value="Other Reason (Seller)" selected>Other Reason (Seller)</option> <%# Fallback %>
                                                <% } %>
                                            </select>
                                            <button type="submit" class="btn btn-danger btn-sm w-100 w-md-auto"><i class="fas fa-ban"></i> Cancel Items</button>
                                        </form>
                                    </div>
                                <% } %>

                                <%# Fallback for no actions %>
                                <% if (!order.canBeDirectlyDeliveredBySeller && !order.canBeCancelledBySeller) { %>
                                     <small class="text-muted no-actions-text">
                                         <% if (order.status === 'Delivered') { %>Completed<% } else if (order.status === 'Cancelled') { %>Cancelled<% } else { %>No actions available<% } %>
                                    </small>
                                <% } %>
                            </td>
                        </tr>
                    <% }) %>
                    <%# --- ADD NO RESULTS ROW --- %>
                    <tr id="no-seller-orders-found" class="hidden">
                        <td colspan="6" class="text-center text-muted p-3">No orders match your filter.</td>
                    </tr>
                    <%# --- END NO RESULTS ROW --- %>
                </tbody>
            </table>
        </div>
    <% } else if (!message) { %>
        <p class="alert alert-info">No orders containing your products found.</p>
    <% } %>
</div>

<%- include('../partials/footer') %>

views/seller/manage-products.ejs:
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container"> <%# Reuse admin style %>
    <h1>Manage Your Products</h1>
    <a href="/seller/products/upload" class="btn btn-primary mb-3"><i class="fas fa-plus"></i> Upload New Product</a>

    <%# --- ADD FILTER INPUT --- %>
    <div class="form-group mb-3"> <%# Added mb-3 for spacing %>
        <label for="seller-product-filter-input" class="visually-hidden">Filter Your Products:</label>
        <%# Added Placeholder %>
        <input type="text" id="seller-product-filter-input" class="form-control" placeholder="Type to filter your products (Name, Category, Status...)" aria-label="Filter Your Products">
    </div>
    <%# --- END FILTER INPUT --- %>

   <% if (products.length > 0) { %>
       <div class="table-container card">
           <%# --- Added ID to table --- %>
           <table class="data-table" id="seller-product-table">
               <thead>
                   <tr>
                       <th>Image</th>
                       <th>Name</th>
                       <th>Price</th>
                       <th>Stock</th>
                       <th>Status</th>
                       <th>Reason</th>
                       <th class="actions-cell" style="text-align: right;">Actions</th>
                   </tr>
                </thead>
                <tbody>
                   <% products.forEach(product => { %>
                       <%# --- Added class="product-row" --- %>
                       <tr class="status-<%= product.reviewStatus %> product-row" data-product-id="<%= product._id %>">
                           <td data-label="Image"><a href="/products/<%= product._id %>"><img src="<%= product.imageUrl %>" alt="<%= product.name %>" class="table-img"></a></td>
                            <td data-label="Name"><%= product.name %><br><small class="text-muted"><%= product.category %></small></td>
                            <td data-label="Price">₹<%= product.price.toFixed(2) %></td>
                            <td data-label="Stock"><%= product.stock %></td>
                            <td data-label="Status">
                                <span class="status-badge status-<%= product.reviewStatus %> text-capitalize">
                                    <%= product.reviewStatus %>
                                </span>
                            </td>
                             <td data-label="Reason">
                                <% if(product.reviewStatus === 'rejected' && product.rejectionReason) { %>
                                    <small class="text-danger"><%= product.rejectionReason %></small>
                                <% } else { %>
                                    <span class="text-muted">--</span>
                                <% } %>
                            </td>
                            <td data-label="Actions" class="actions-cell">
                               <%# Edit button always available, triggers re-review %>
                               <a href="/seller/products/edit/<%= product._id %>" class="btn btn-text btn-sm" title="Edit Product"><i class="fas fa-edit"></i> Edit</a>

                               <form action="/seller/products/remove/<%= product._id %>" method="POST" class="inline-form form-submit-spinner" onsubmit="return confirm('Are you sure you want to permanently remove this product: <%= product.name %>?');">
                                    <button type="submit" class="btn btn-text btn-danger btn-sm" title="Remove Product"><i class="fas fa-trash"></i> Remove</button>
                               </form>
                           </td>
                        </tr>
                    <% }) %>
                     <%# --- ADD NO RESULTS ROW --- %>
                     <tr id="no-seller-products-found" class="hidden">
                         <td colspan="7" class="text-center text-muted p-3">No products match your filter.</td> <%# Adjusted colspan %>
                     </tr>
                     <%# --- END NO RESULTS ROW --- %>
               </tbody>
            </table>
       </div>
   <% } else { %>
        <p class="text-muted mt-3">You haven't uploaded any products yet. <a href="/seller/products/upload">Upload your first product!</a></p>
   <% } %>
</div>

<%- include('../partials/footer') %>

views/seller/upload-product.ejs:
<%- include('../partials/header', { title: title }) %>

<div class="admin-manage-container"> <%# Reuse admin style %>
    <h1>Upload New Product</h1>
    <p class="text-muted small mb-3">Your product will be submitted for automatic review upon upload.</p>

    <form action="/seller/products/upload" method="POST" class="form-submit-spinner">
        <div class="form-group">
            <label for="name">Product Name:</label>
            <%# Added Placeholder %>
            <input type="text" id="name" name="name" class="form-control" value="<%= typeof product !== 'undefined' ? product.name : '' %>" placeholder="Enter product name" required>
        </div>
        <div class="form-group">
            <label for="shortDescription">Short Description (Optional):</label>
            <%# Added Placeholder %>
            <textarea id="shortDescription" name="shortDescription" class="form-control" rows="2" placeholder="Briefly describe the product (max 200 chars)"><%= typeof product !== 'undefined' ? product.shortDescription : '' %></textarea>
        </div>
        <div class="form-group">
            <label for="category">Category:</label>
            <select id="category" name="category" class="form-control" required>
                 <option value="" disabled <%= !(typeof product !== 'undefined' && product.category) ? 'selected' : '' %>>Select a Category</option>
                <% if (typeof categories !== 'undefined') { %>
                    <% categories.forEach(cat => { %>
                        <option value="<%= cat.name %>" <%= (typeof product !== 'undefined' && product.category === cat.name) ? 'selected' : '' %>><%= cat.name %></option>
                    <% }) %>
                <% } %>
            </select>
        </div>
        <div class="form-group">
            <label for="price">Price (₹):</label>
            <%# Added Placeholder %>
            <input type="number" id="price" name="price" class="form-control" step="0.01" min="0" value="<%= typeof product !== 'undefined' ? product.price : '' %>" placeholder="e.g., 499.99" required>
        </div>
        <div class="form-group">
            <label for="stock">Stock Quantity:</label>
            <%# Added Placeholder %>
            <input type="number" id="stock" name="stock" class="form-control" min="0" value="<%= typeof product !== 'undefined' ? product.stock : '' %>" placeholder="e.g., 50" required>
        </div>
        <div class="form-group">
            <label for="imageUrl">Image URL (Primary):</label>
            <%# Added Placeholder %>
            <input type="url" id="imageUrl" name="imageUrl" class="form-control" placeholder="https://example.com/main-image.jpg" value="<%= typeof product !== 'undefined' ? product.imageUrl : '' %>" required>
        </div>
        <!-- --- UPDATED: Add Second Image URL Input --- -->
        <div class="form-group">
            <label for="imageUrl2">Second Image URL (Optional):</label>
             <%# Added Placeholder %>
            <input type="url"
                   id="imageUrl2"
                   name="imageUrl2"
                   class="form-control"
                   placeholder="https://example.com/alternate-image.jpg"
                   value="<%= (typeof product !== 'undefined' && product.imageUrl2) ? product.imageUrl2 : '' %>">
        </div>
        <!-- --- END UPDATED --- -->
        <div class="form-group">
            <label for="specifications">Specifications (Optional):</label>
            <%# Added Placeholder %>
            <textarea id="specifications" name="specifications" class="form-control" rows="5" placeholder="Enter product details, features, dimensions, etc. (one per line recommended)"><%= typeof product !== 'undefined' ? product.specifications : '' %></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Upload & Submit for Review</button>
        <a href="/seller/dashboard" class="btn btn-secondary">Cancel</a>
    </form>
</div>

<%- include('../partials/footer') %>

views/user/cart.ejs:
<%# views/user/cart.ejs %>
<%- include('../partials/header', { title: 'Shopping Cart' }) %>

<div class="cart-container">
    <h1>Your Shopping Cart</h1>

    <% if (cart.length > 0) { %>
        <div class="cart-items">
            <% cart.forEach(item => { %>
                <div class="cart-item" data-product-id="<%= item.productId %>">
                    <div class="cart-item-image">
                        <a href="/products/<%= item.productId %>"><img src="<%= item.imageUrl %>" alt="<%= item.name %>"></a>
                    </div>
                    <div class="cart-item-details">
                        <h3 class="cart-item-name"><%= item.name %></h3>
                        <p class="cart-item-price">₹<%= (typeof item.price === 'number' ? item.price : 0).toFixed(2) %></p>
                        <p class="cart-item-stock">Stock: <%= item.stock %></p>
                    </div>
                    <div class="cart-item-quantity">
                        <label for="quantity-<%= item.productId %>" class="visually-hidden">Quantity for <%= item.name %></label> <%# Added visually-hidden label %>
                        <input type="number"
                               id="quantity-<%= item.productId %>"
                               class="quantity-input" <%# Use class for consistency %>
                               name="quantity"
                               value="<%= item.quantity %>"
                               min="0"
                               max="<%= item.stock %>"
                               data-product-id="<%= item.productId %>"
                               data-item-price="<%= item.price %>"
                               aria-label="Quantity for <%= item.name %>">
                        <button class="btn btn-secondary btn-sm btn-update-qty" data-product-id="<%= item.productId %>">Add</button> <%# Spinner handled by AJAX logic %>
                     </div>
                     <div class="cart-item-subtotal">
                         Total: ₹<span class="item-subtotal-value"><%= (typeof item.subtotal === 'number' ? item.subtotal : 0).toFixed(2) %></span>
                    </div>
                    <div class="cart-item-remove">
                        <form action="/user/cart/remove/<%= item.productId %>" method="POST" class="form-submit-spinner">
                            <button type="submit" class="btn btn-danger btn-sm">× Remove</button>
                         </form>
                     </div>
                </div>
            <% }) %>
        </div>

         <div class="cart-summary">
             <h2>Cart Total: ₹<span id="cart-total-value"><%= (typeof cartTotal === 'number' ? cartTotal : 0).toFixed(2) %></span></h2>
             <%# --- ADDED ID and loading state attributes --- %>
             <a href="/user/checkout"
                id="btn-proceed-checkout" <%# ADDED ID %>
                class="btn btn-success btn-checkout"
                data-loading-text="<i class='fas fa-spinner fa-spin'></i> Proceeding..." <%# ADDED loading text data attribute %>
                >Proceed to Checkout</a>
        </div>

    <% } else { %>
        <%# Updated empty cart message to use alert style %>
        <p class="alert alert-info mt-3">Your cart is empty. <a href="/" class="alert-link">Continue Shopping</a></p>
    <% } %>
</div>

 <%- include('../partials/footer') %>

views/user/checkout.ejs:
<%# views/user/checkout.ejs %>
<%- include('../partials/header', { title: 'Checkout' }) %>

<div class="checkout-container">
    <h1>Checkout</h1>

    <div class="checkout-grid">
        <div class="checkout-address">
            <h2>Shipping Address</h2>
            <%# Display Saved Address %>
            <div class="saved-address <%= (!userAddress || !userAddress.name) ? 'hidden' : '' %>">
                <% if (userAddress && userAddress.name) { %>
                    <p class="mb-1"><strong><%= userAddress.name %></strong></p>
                    <p class="mb-1"><%= userAddress.phone %></p>
                    <p class="mb-1">
                        <%# Display House/Area first %>
                        <%= userAddress.cityVillage ? userAddress.cityVillage + ', ' : '' %>
                        <%# Landmark Optional %>
                        <%= userAddress.landmarkNearby ? userAddress.landmarkNearby + ', ' : '' %>
                        <%# Locality %>
                        <%= userAddress.locality ? userAddress.locality + ', ' : '' %>
                        <%# Derived Fields %>
                        <%= userAddress.mandal ? userAddress.mandal + ', ' : '' %>
                        <%= userAddress.district ? userAddress.district + ', ' : '' %>
                        <%= userAddress.state ? userAddress.state + ' - ' : '' %>
                        <%= userAddress.pincode %>
                    </p>
                    <button type="button" id="edit-address-btn" class="btn btn-secondary btn-sm mt-2">Edit Address</button>
                <% } else { %>
                    <%# This part is less likely needed if checkout requires address, but keep for robustness %>
                    <p class="text-muted">No address found. Please add one below.</p>
                <% } %>
            </div>

            <%# Address Form %>
            <form action="/user/address/save" method="POST" id="address-form" class="address-form <%= (userAddress && userAddress.name) ? 'hidden' : '' %> form-submit-spinner">
                 <h3 class="h5"><%= (userAddress && userAddress.name) ? 'Edit Address' : 'Add Shipping Address' %></h3>
                 <input type="hidden" name="source" value="checkout">

                 <div class="form-group">
                     <label for="checkout-name-addr" class="form-label small">Full Name:</label>
                     <%# Added Placeholder %>
                     <input type="text" id="checkout-name-addr" name="name" class="form-control" value="<%= addressFormData?.name || userAddress?.name || '' %>" placeholder="Enter full name" required autocomplete="name">
                 </div>
                 <div class="form-group">
                     <label for="checkout-phone" class="form-label small">Phone Number:</label>
                     <%# Added Placeholder %>
                     <input type="tel" id="checkout-phone" name="phone" class="form-control" value="<%= addressFormData?.phone || userAddress?.phone || '' %>" placeholder="10-digit mobile number" required pattern="\d{10,15}" minlength="10" maxlength="15" title="Enter 10 to 15 digit phone number" autocomplete="tel">
                 </div>
                 <div class="form-group">
                    <label for="checkout-pincode" class="form-label small">Pincode:</label>
                    <%# Added Placeholder %>
                    <input type="text"
                           id="checkout-pincode"
                           name="pincode"
                           class="form-control pincode-input"
                           data-target-prefix="checkout"
                           value="<%= addressFormData?.pincode || userAddress?.pincode || '' %>"
                           placeholder="6-digit Pincode" required pattern="\d{6}" maxlength="6" inputmode="numeric"
                           title="Enter 6-digit Pincode" autocomplete="postal-code">
                    <small class="pincode-status text-muted"></small>
                </div>

                <%# --- Locality Dropdown --- %>
                <div class="form-group">
                    <label for="checkout-locality" class="form-label small">Locality / Post Office:</label>
                    <select id="checkout-locality"
                            name="locality"
                            class="form-control"
                            required
                            disabled
                            data-saved-value="<%= addressFormData?.locality || userAddress?.locality || '' %>">
                        <option value="" selected disabled>Enter Pincode First</option>
                        <%# Options will be populated by JavaScript %>
                    </select>
                    <small class="locality-status text-muted"></small>
                </div>
                <%# --- End: Locality Dropdown --- %>

                <%# Auto-filled Fields Container %>
                <div class="auto-filled-fields-container mb-2" id="checkout-auto-filled-fields"
                     style="<%= (addressFormData?.state || userAddress?.state) ? 'display: block;' : 'display: none;' %>">
                    <div class="form-group">
                       <label for="checkout-mandal" class="form-label small">Mandal / Taluk:</label>
                       <input type="text" id="checkout-mandal" class="form-control auto-filled-field" value="<%= addressFormData?.mandal || userAddress?.mandal || '' %>" readonly tabindex="-1">
                   </div>
                    <div class="form-group">
                       <label for="checkout-district" class="form-label small">District:</label>
                       <input type="text" id="checkout-district" class="form-control auto-filled-field" value="<%= addressFormData?.district || userAddress?.district || '' %>" readonly tabindex="-1">
                   </div>
                   <div class="form-group">
                       <label for="checkout-state" class="form-label small">State:</label>
                       <input type="text" id="checkout-state" class="form-control auto-filled-field" value="<%= addressFormData?.state || userAddress?.state || '' %>" readonly tabindex="-1">
                   </div>
                </div>

                <%# Hidden Inputs to Submit Derived Data %>
                <input type="hidden" id="checkout-mandal-hidden" name="mandal" value="<%= addressFormData?.mandal || userAddress?.mandal || '' %>">
                <input type="hidden" id="checkout-district-hidden" name="district" value="<%= addressFormData?.district || userAddress?.district || '' %>">
                <input type="hidden" id="checkout-state-hidden" name="state" value="<%= addressFormData?.state || userAddress?.state || '' %>">

                <div class="form-group">
                    <label for="checkout-cityVillage" class="form-label small">House No. / Building / Area:</label>
                    <%# Added Placeholder %>
                    <input type="text" id="checkout-cityVillage" name="cityVillage" class="form-control" value="<%= addressFormData?.cityVillage || userAddress?.cityVillage || '' %>" required autocomplete="address-line1" placeholder="E.g., #123, Green Apartments">
                </div>
                 <div class="form-group">
                    <label for="checkout-landmarkNearby" class="form-label small">Landmark (Optional):</label>
                    <%# Added Placeholder %>
                    <input type="text" id="checkout-landmarkNearby" name="landmarkNearby" class="form-control" value="<%= addressFormData?.landmarkNearby || userAddress?.landmarkNearby || '' %>" autocomplete="address-line2" placeholder="E.g., Near City Hospital">
                 </div>
                <button type="submit" class="btn btn-primary me-2">Save Address</button>
                 <button type="button" id="cancel-edit-btn" class="btn btn-secondary <%= (!userAddress || !userAddress.name) ? 'hidden' : '' %>">Cancel Edit</button>
             </form>
        </div>

         <div class="checkout-summary">
             <h2>Order Summary</h2>
             <div class="checkout-items">
                 <% items.forEach(item => { %>
                    <div class="checkout-item">
                         <a href="/products/<%= item.productId %>" class="checkout-item-image">
                            <img src="<%= item.imageUrl %>" alt="<%= item.name %>">
                        </a>
                        <div class="checkout-item-info">
                             <%= item.name %> (Qty: <%= item.quantity %>)
                        </div>
                        <div class="checkout-item-price">₹<%= item.itemTotal.toFixed(2) %></div>
                     </div>
                <% }) %>
            </div>
            <hr>
            <div class="checkout-totals">
                <p>Subtotal: <span>₹<%= subTotal.toFixed(2) %></span></p>
                 <p>Shipping: <span>FREE</span></p>
                <hr>
                 <p><strong>Total: <span>₹<%= totalAmount.toFixed(2) %></span></strong></p>
            </div>

            <div class="checkout-payment">
                <h3>Payment Method</h3>
                 <div class="payment-option selected">
                     <input type="radio" id="cod" name="paymentMethodValue" value="COD" checked disabled>
                     <label for="cod"><i class="fas fa-money-bill-wave"></i> Cash on Delivery (COD)</label>
                 </div>
            </div>

            <form action="/orders/place" method="POST" class="place-order-form form-submit-spinner">
                 <input type="hidden" name="paymentMethod" value="COD">
                 <%# Check for existing user address OR addressFormData (if redirected after error) %>
                 <button type="submit" class="btn btn-success btn-block btn-place-order" <%= (!userAddress || !userAddress.name) && !addressFormData ? 'disabled' : '' %>>
                    Place Order
                 </button>
                 <% if ((!userAddress || !userAddress.name) && !addressFormData) { %>
                    <p class="text-danger small mt-1">Please add/save your shipping address first.</p>
                 <% } %>
             </form>
         </div>
    </div>
</div>

<%- include('../partials/footer') %>

views/user/my-orders.ejs:
<%# views/user/my-orders.ejs %>
<%- include('../partials/header', { title: 'My Orders' }) %>

<div class="my-orders-container">
    <h1>My Orders</h1>

    <% if (orders.length > 0) { %>
        <div class="order-list">
            <% orders.forEach(order => { %>
                <div class="order-card status-<%= order.status.toLowerCase().replace(/ /g, '-') %> mb-3"> <%# Add mb-3 for spacing %>
                     <div class="order-header">
                         <div><strong>Order ID:</strong><br><%= order._id %></div>
                         <div><strong>Placed on:</strong><br><%= formatDateIST(order.orderDate) %></div>
                         <div><strong>Total:</strong><br>₹<%= order.totalAmount.toFixed(2) %></div>
                         <div><strong>Status:</strong><br><span class="status-badge status-<%= order.status.toLowerCase().replace(/ /g, '-') %>"><%= order.status %></span></div>
                     </div>
                    <div class="order-body">
                         <%# Simplified item display (text) %>
                         <p class="mb-1"><strong>Items:</strong></p>
                         <div class="order-items-list mb-2">
                            <% order.products.forEach((item, index) => { %>
                                <small><%= item.name || '[Product Name Missing]' %> (Qty: <%= item.quantity %>) <% if(index < order.products.length - 1) { %> | <% } %></small>
                            <% }) %>
                         </div>

                         <%# --- NEW: Display Product Images --- %>
                         <div class="order-items-images mt-2">
                            <% order.products.forEach(item => { %>
                                <%# Check if product was populated and has necessary info %>
                                <% if (item.productId && item.productId._id && item.imageUrl) { %>
                                    <a href="/products/<%= item.productId._id %>" title="View <%= item.name || 'Product' %>">
                                        <img src="<%= item.imageUrl %>"
                                             alt="<%= item.name || 'Product Image' %>"
                                             class="order-item-thumbnail">
                                    </a>
                                <% } else if (item.productId && item.productId._id) { %>
                                    <%# Fallback if image URL is missing but product exists %>
                                    <a href="/products/<%= item.productId._id %>" class="order-item-thumbnail-placeholder" title="View <%= item.name || 'Product' %>">[No Img]</a>
                                <% } else { %>
                                    <%# Very basic fallback if productId is missing entirely %>
                                    <span class="order-item-thumbnail-placeholder">[Item NA]</span>
                                <% } %>
                            <% }) %>
                         </div>
                         <%# --- End: Display Product Images --- %>

                        <div class="order-details mt-3"> <%# Add margin-top for spacing %>
                             <p class="mb-1"><strong>Shipping To:</strong> <%= order.shippingAddress.name %>, <%= order.shippingAddress.cityVillage %>, Pin: <%= order.shippingAddress.pincode %></p>
                             <% if (order.status === 'Delivered' && order.receivedByDate) { %>
                                <p class="text-success mb-1"><small><strong>Delivered On:</strong> <%= formatDateIST(order.receivedByDate) %></small></p>
                              <% } %>
                              <%# Display cancellation reason if present %>
                              <% if (order.status === 'Cancelled' && order.cancellationReason) { %>
                                <p class="text-danger mb-1"><small><strong>Reason:</strong> <%= order.cancellationReason %></small></p>
                              <% } %>

                              <%# Display Delivery OTP for Customer %>
                              <% if (order.showDeliveryOtp) { %>
                                <div class="delivery-otp-display mt-2 p-2 border rounded bg-light">
                                    <p class="mb-1">
                                        <strong>Delivery OTP:</strong>
                                        <strong class="delivery-otp-code ms-1"><%= order.orderOTP %></strong> <%# Display full OTP %>
                                    </p>
                                    <small class="text-muted d-block">Provide this code to the delivery person (Seller/Admin).</small>
                                    <% if (order.orderOTPExpires) { %>
                                        <small class="text-muted d-block">Expires: <%= formatDateIST(order.orderOTPExpires) %></small>
                                    <% } %>
                                </div>
                              <% } %>
                              <%# End: Display Delivery OTP %>
                         </div>
                    </div>
                     <div class="order-actions text-end p-2 border-top"> <%# Adjusted padding/border %>
                        <% if (order.isCancellable) { %>
                            <form action="/orders/cancel/<%= order._id %>" method="POST" onsubmit="return confirm('Are you sure you want to cancel this order?');" class="form-submit-spinner d-inline-block">
                                <button type="submit" class="btn btn-danger btn-sm">Cancel Order</button>
                             </form>
                         <% } else if (order.status === 'Pending' && !order.showDeliveryOtp && order.cancellationAllowedUntil && new Date(order.cancellationAllowedUntil).getTime() < Date.now()) { %>
                             <small class="text-muted">Cancellation window closed.</small>
                         <% } else if (order.status === 'Pending' && !order.showDeliveryOtp) { %>
                            <small class="text-muted">Processing...</small>
                        <% } else if (order.status === 'Pending' && order.showDeliveryOtp) { %>
                             <small class="text-info">Awaiting delivery confirmation...</small>
                         <% } else if (order.status === 'Delivered') { %>
                              <small class="text-success">Order Completed.</small>
                         <% } else if (order.status === 'Cancelled') { %>
                              <small class="text-danger">Order Cancelled.</small>
                         <% } %>
                     </div>
                </div>
            <% }) %>
        </div>
    <% } else { %>
        <p>You haven't placed any orders yet. <a href="/">Start Shopping!</a></p>
    <% } %>
</div>

<%- include('../partials/footer') %>

views/user/profile.ejs:
<%# views/user/profile.ejs %>
<%- include('../partials/header', { title: title }) %>

<div class="profile-container">
    <%# --- Combine Welcome and Name Edit --- %>
    <div class="profile-header mb-4 d-flex align-items-center justify-content-center flex-wrap">
        <h1 class="mb-0 me-3">My Profile</h1>
        <div class="d-flex align-items-center">
            <span id="saved-name-display" class="fs-5 me-2">Hi, <strong id="display-user-name"><%= user.name %></strong></span>
            <button type="button" id="edit-name-btn" class="btn btn-text btn-sm" title="Edit Name"><i class="fas fa-edit"></i></button>
            <form action="/user/profile/update-name" method="POST" id="name-form" class="hidden inline-form align-items-center ms-2 form-submit-spinner">
                <label for="name-input" class="visually-hidden">New Name:</label>
                 <%# Added Placeholder %>
                <input type="text" id="name-input" name="name" class="form-control form-control-sm me-2" value="<%= user.name %>" required minlength="2" placeholder="Enter new name">
                <button type="submit" class="btn btn-primary btn-sm me-1">Save</button>
                <button type="button" id="cancel-edit-name-btn" class="btn btn-secondary btn-sm">Cancel</button>
            </form>
        </div>
    </div>
    <p class="text-muted text-center small mb-3">Email: <strong><%= user.email %></strong></p>

    <%# --- My Orders Section --- %>
    <div class="profile-section orders-section mb-4">
        <h2>My Orders</h2>
        <div class="d-flex flex-wrap gap-2">
            <a href="/orders/my-orders" class="btn btn-secondary">
                <i class="fas fa-box"></i> View My Orders
            </a>
        </div>
    </div>

    <%# --- Conditional Dashboards Section --- %>
    <div class="profile-section dashboards-section mb-4">
        <h2>Dashboards</h2>
        <div class="d-flex flex-wrap gap-2">
            <% if (user.role === 'admin') { %>
                <a href="/admin/dashboard" class="btn btn-info"><i class="fas fa-user-shield"></i> Admin Dashboard</a>
            <% } %>
            <% if (user.role === 'seller') { %>
                <a href="/seller/dashboard" class="btn btn-success"><i class="fas fa-store"></i> Seller Dashboard</a>
            <% } %>
            <% if (user.role === 'user') { %>
                <p class="mb-0 align-self-center">Standard User Account</p>
            <% } %>
        </div>
    </div>

    <%# --- Address Management Section --- %>
    <div class="profile-section address-section mb-4">
        <h2>My Address</h2>
        <%# Display Saved Address %>
        <div id="saved-address-display" class="<%= (!user.address || !user.address.name) ? 'hidden' : '' %>">
            <% if (user.address && user.address.name) { %>
                <p class="mb-1"><strong><%= user.address.name %></strong></p>
                <p class="mb-1"><%= user.address.phone %></p>
                <p class="mb-1">
                    <%# Display House/Area first %>
                    <%= user.address.cityVillage ? user.address.cityVillage + ', ' : '' %>
                    <%# Landmark Optional %>
                    <%= user.address.landmarkNearby ? user.address.landmarkNearby + ', ' : '' %>
                    <%# Locality %>
                    <%= user.address.locality ? user.address.locality + ', ' : '' %>
                    <%# Derived Fields %>
                    <%= user.address.mandal ? user.address.mandal + ', ' : '' %>
                    <%= user.address.district ? user.address.district + ', ' : '' %>
                    <%= user.address.state ? user.address.state + ' - ' : '' %>
                    <%= user.address.pincode %>
                </p>
                <button type="button" id="edit-address-btn" class="btn btn-outline-secondary btn-sm mt-2">Edit Address</button>
            <% } else { %>
                <p class="text-muted">No address saved yet.</p>
                <button type="button" id="add-address-btn" class="btn btn-outline-primary btn-sm mt-2 hidden">Add Address</button>
            <% } %>
        </div>

        <%# Address Form %>
        <form action="/user/address/save" method="POST" id="address-form" class="address-form <%= (user.address && user.address.name) ? 'hidden' : '' %> form-submit-spinner mt-3">
            <h3 class="h5"><%= (user.address && user.address.name) ? 'Edit Address' : 'Add Address' %></h3>
            <input type="hidden" name="source" value="profile">

            <div class="form-group">
                <label for="profile-name-addr" class="form-label small">Full Name:</label>
                <%# Added Placeholder %>
                <input type="text" id="profile-name-addr" name="name" class="form-control" value="<%= addressFormData?.name || user.address?.name || '' %>" placeholder="Enter full name" required autocomplete="name">
            </div>
            <div class="form-group">
                <label for="profile-phone" class="form-label small">Phone Number:</label>
                 <%# Added Placeholder %>
                <input type="tel" id="profile-phone" name="phone" class="form-control" value="<%= addressFormData?.phone || user.address?.phone || '' %>" placeholder="10-digit mobile number" required pattern="\d{10,15}" minlength="10" maxlength="15" title="Enter 10 to 15 digit phone number" autocomplete="tel">
            </div>
            <div class="form-group">
                <label for="profile-pincode" class="form-label small">Pincode:</label>
                 <%# Added Placeholder %>
                <input type="text"
                       id="profile-pincode"
                       name="pincode"
                       class="form-control pincode-input"
                       data-target-prefix="profile"
                       value="<%= addressFormData?.pincode || user.address?.pincode || '' %>"
                       placeholder="6-digit Pincode" required pattern="\d{6}" maxlength="6" inputmode="numeric"
                       title="Enter 6-digit Pincode" autocomplete="postal-code">
                <small class="pincode-status text-muted"></small>
            </div>

            <%# --- Locality Dropdown --- %>
            <div class="form-group">
                <label for="profile-locality" class="form-label small">Locality / Post Office:</label>
                <select id="profile-locality"
                        name="locality"
                        class="form-control"
                        required
                        disabled
                        data-saved-value="<%= addressFormData?.locality || user.address?.locality || '' %>">
                    <option value="" selected disabled>Enter Pincode First</option>
                    <%# Options will be populated by JavaScript %>
                </select>
                <small class="locality-status text-muted"></small>
            </div>
            <%# --- End: Locality Dropdown --- %>

            <%# Auto-filled Fields Container %>
            <div class="auto-filled-fields-container mb-2" id="profile-auto-filled-fields"
                 style="<%= (addressFormData?.state || user.address?.state) ? 'display: block;' : 'display: none;' %>">
                <div class="form-group">
                    <label for="profile-mandal" class="form-label small">Mandal / Taluk:</label>
                    <input type="text" id="profile-mandal" class="form-control auto-filled-field" value="<%= addressFormData?.mandal || user.address?.mandal || '' %>" readonly tabindex="-1">
                </div>
                <div class="form-group">
                    <label for="profile-district" class="form-label small">District:</label>
                    <input type="text" id="profile-district" class="form-control auto-filled-field" value="<%= addressFormData?.district || user.address?.district || '' %>" readonly tabindex="-1">
                </div>
                <div class="form-group">
                    <label for="profile-state" class="form-label small">State:</label>
                    <input type="text" id="profile-state" class="form-control auto-filled-field" value="<%= addressFormData?.state || user.address?.state || '' %>" readonly tabindex="-1">
                </div>
            </div>

            <%# Hidden Inputs to Submit Derived Data %>
            <input type="hidden" id="profile-mandal-hidden" name="mandal" value="<%= addressFormData?.mandal || user.address?.mandal || '' %>">
            <input type="hidden" id="profile-district-hidden" name="district" value="<%= addressFormData?.district || user.address?.district || '' %>">
            <input type="hidden" id="profile-state-hidden" name="state" value="<%= addressFormData?.state || user.address?.state || '' %>">

            <div class="form-group">
                <label for="profile-cityVillage" class="form-label small">House No. / Building / Area:</label>
                 <%# Added Placeholder %>
                <input type="text" id="profile-cityVillage" name="cityVillage" class="form-control" value="<%= addressFormData?.cityVillage || user.address?.cityVillage || '' %>" required autocomplete="address-line1" placeholder="E.g., #123, Green Apartments">
            </div>
            <div class="form-group">
                <label for="profile-landmarkNearby" class="form-label small">Landmark (Optional):</label>
                 <%# Added Placeholder %>
                <input type="text" id="profile-landmarkNearby" name="landmarkNearby" class="form-control" value="<%= addressFormData?.landmarkNearby || user.address?.landmarkNearby || '' %>" autocomplete="address-line2" placeholder="E.g., Near City Hospital">
            </div>
            <button type="submit" class="btn btn-primary me-2">Save Address</button>
            <button type="button" id="cancel-edit-btn" class="btn btn-secondary <%= (!user.address || !user.address.name) ? 'hidden' : '' %>">Cancel Edit</button>
        </form>
    </div>

    <%# --- Logout Section --- %>
    <div class="profile-section logout-section mt-4 pt-3 border-top">
        <h2>Account Actions</h2>
        <form action="/auth/logout" method="POST" class="form-submit-spinner">
            <button type="submit" class="btn btn-danger"><i class="fas fa-sign-out-alt"></i> Logout</button>
        </form>
    </div>

</div>
<%- include('../partials/footer') %>

views/error.ejs:
<%- include('./partials/header', { title: 'Error' }) %>

<div class="error-container container">
    <h1>Error <%= typeof statusCode !== 'undefined' ? statusCode : '' %></h1>
    <p class="lead text-danger"><%= message %></p>

    <%# Use NODE_ENV from res.locals now %>
    <% if (NODE_ENV === 'development' && typeof stack !== 'undefined' && stack) { %>
        <details style="white-space: pre-wrap; margin-top: 20px; background: #f1f1f1; padding: 10px; border-radius: 5px; font-size: 0.8em;">
            <summary>Stack Trace (Development Mode)</summary>
            <code><%= stack %></code>
        </details>
    <% } %>

    <p style="margin-top: 20px;"><a href="/" class="btn btn-primary">Go back to Home</a></p>
</div>

<%- include('./partials/footer') %>

.env:
NODE_ENV=development
PORT=3000
MONGO_URI=mongodb+srv://ecommerce:ecommerce@cluster0.jcfuk.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
SESSION_SECRET=e6142a6d230d0445c9b050af41bfd1e53ece6270797e546fbdaa97af20f3b77e # Use a strong, random secret
SESSION_MAX_AGE=86400000 # 1 day in milliseconds

# Email Configuration
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USER=ayyappanallamothu4@gmail.com
MAIL_PASS=yxor nmot lxmq skyc # Use an App Password if using Gmail 2FA
MAIL_FROM='"Surya Ecom" <ayyappanallamothu4@gmail.com>' # Ensure format is correct

# --- NEW: Add your Gemini API Key ---
GEMINI_API_KEY=AIzaSyCX31vkQ9Qf7t-ytSeDZUGR8hK4XZUHQT0

server.js:
// server.js
require('dotenv').config();
const express = require('express');
const path = require('path');
const mongoose = require('mongoose');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const flash = require('connect-flash');
const methodOverride = require('method-override');

const connectDB = require('./config/database');
const mainRouter = require('./routes/index');
const { notFound, errorHandler } = require('./middleware/errorMiddleware');
const { categories: siteCategories } = require('./config/categories');

connectDB();

const app = express();


app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));


app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));
app.use(methodOverride('_method'));


app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    store: MongoStore.create({
        mongoUrl: process.env.MONGO_URI,
        collectionName: 'sessions'
    }),
    cookie: {
        maxAge: parseInt(process.env.SESSION_MAX_AGE || '86400000', 10),
        httpOnly: true
        // secure: process.env.NODE_ENV === 'production',
        // sameSite: 'lax'
    }
  })
);


app.use(flash());


// Middleware to set res.locals
app.use((req, res, next) => {

  // Flash messages
  res.locals.success_msg = req.flash('success_msg');
  res.locals.error_msg = req.flash('error_msg');
  res.locals.error = req.flash('error'); // For general errors if needed

  // Current user info
  res.locals.currentUser = req.session.user || null;

  // URL info
  res.locals.currentUrl = req.originalUrl;
  res.locals.fullUrl = `${req.protocol}://${req.get('host')}${req.originalUrl}`;

  // Cart info
  res.locals.cartItemCount = req.session.user?.cart?.reduce((count, item) => count + (item.quantity || 0), 0) || 0;

  // User Initials calculation
  let userInitials = '??';
  if (req.session.user && req.session.user.name) {
    try {
      const nameParts = req.session.user.name.trim().split(' ');
      if (nameParts.length > 1 && nameParts[0] && nameParts[1]) {
          userInitials = (nameParts[0][0] + nameParts[nameParts.length - 1][0]).toUpperCase();
      } else if (nameParts.length === 1 && nameParts[0].length >= 2) {
          userInitials = nameParts[0].substring(0, 2).toUpperCase();
      } else if (nameParts.length === 1 && nameParts[0].length === 1) {
           userInitials = (nameParts[0][0] + nameParts[0][0]).toUpperCase();
      }
       else if (req.session.user.email) {
            const emailPrefix = req.session.user.email.split('@')[0];
            if (emailPrefix.length >= 2) { userInitials = emailPrefix.substring(0, 2).toUpperCase(); }
            else if (emailPrefix.length === 1) { userInitials = emailPrefix.toUpperCase() + emailPrefix.toUpperCase(); }
       }
    } catch (e) {
      console.error("Error generating initials:", e);
       if (req.session.user.email) {
            const emailPrefix = req.session.user.email.split('@')[0];
            if (emailPrefix.length >= 2) { userInitials = emailPrefix.substring(0, 2).toUpperCase(); }
            else if (emailPrefix.length === 1) { userInitials = emailPrefix.toUpperCase() + emailPrefix.toUpperCase(); }
       }
    }
  } else if (req.session.user && req.session.user.email) {
        const emailPrefix = req.session.user.email.split('@')[0];
        if (emailPrefix.length >= 2) { userInitials = emailPrefix.substring(0, 2).toUpperCase(); }
        else if (emailPrefix.length === 1) { userInitials = emailPrefix.toUpperCase() + emailPrefix.toUpperCase(); }
  }
  res.locals.userInitials = userInitials;

  // Date Formatter Helper
  res.locals.formatDateIST = (dateInput) => {
      if (!dateInput) return 'N/A';
      try {
          const date = new Date(dateInput);
          if (isNaN(date.getTime())) { return 'Invalid Date'; }
          const options = { timeZone: 'Asia/Kolkata', year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: '2-digit', hour12: true };
          return date.toLocaleString('en-IN', options);
      } catch (error) {
          console.error("Error formatting date to IST:", error, "Input:", dateInput);
          return 'Date Error';
      }
  };

  // Site Defaults
  res.locals.defaultSiteName = 'miniapp';
  res.locals.NODE_ENV = process.env.NODE_ENV;
  res.locals.siteCategories = siteCategories;

  // **** ADDED: Handle addressFormData ****
  // Assign from session if exists, otherwise null. This makes it available to all templates.
  res.locals.addressFormData = req.session?.addressFormData || null;
  // Clean up session immediately after assigning to locals
  if (req.session?.addressFormData) {
      delete req.session.addressFormData;
  }
  // **** END: Handle addressFormData ****

  next(); // Proceed to the next middleware/route handler
});


// --- Routes ---
app.use('/', mainRouter);


// --- Error Handling ---
app.use(notFound);
app.use(errorHandler);


// --- Server Start ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running in ${process.env.NODE_ENV} mode on port ${PORT}`);
});