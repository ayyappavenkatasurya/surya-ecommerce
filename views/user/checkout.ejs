<%# views/user/checkout.ejs %>
<%- include('../partials/header', { title: 'Checkout' }) %>

<%# --- ADD RAZORPAY CHECKOUT SCRIPT --- %>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<div class="checkout-container">
    <h1>Checkout</h1>

    <div class="checkout-grid">
        <div class="checkout-address">
            <h2>Shipping Address</h2>
            <%# Display Saved Address %>
            <div class="saved-address <%= (!userAddress || !userAddress.name) ? 'hidden' : '' %>">
                <% if (userAddress && userAddress.name) { %>
                    <p class="mb-1"><strong><%= userAddress.name %></strong></p>
                    <p class="mb-1"><%= userAddress.phone %></p>
                    <p class="mb-1">
                        <%= userAddress.cityVillage ? userAddress.cityVillage + ', ' : '' %>
                        <%= userAddress.landmarkNearby ? userAddress.landmarkNearby + ', ' : '' %>
                        <%= userAddress.locality ? userAddress.locality + ', ' : '' %>
                        <%= userAddress.mandal ? userAddress.mandal + ', ' : '' %>
                        <%= userAddress.district ? userAddress.district + ', ' : '' %>
                        <%= userAddress.state ? userAddress.state + ' - ' : '' %>
                        <%= userAddress.pincode %>
                    </p>
                    <button type="button" id="edit-address-btn" class="btn btn-secondary btn-sm mt-2">Edit Address</button>
                <% } else { %>
                    <p class="text-muted">No address found. Please add one below.</p>
                <% } %>
            </div>

            <%# Address Form %>
            <form action="/user/address/save" method="POST" id="address-form" class="address-form <%= (userAddress && userAddress.name) ? 'hidden' : '' %> form-submit-spinner">
                 <h3 class="h5"><%= (userAddress && userAddress.name) ? 'Edit Address' : 'Add Shipping Address' %></h3>
                 <input type="hidden" name="source" value="checkout">
                 <div class="form-group">
                     <label for="checkout-name-addr" class="form-label small">Full Name:</label>
                     <input type="text" id="checkout-name-addr" name="name" class="form-control" value="<%= addressFormData?.name || userAddress?.name || '' %>" placeholder="Enter full name" required autocomplete="name">
                 </div>
                 <div class="form-group">
                     <label for="checkout-phone" class="form-label small">Phone Number:</label>
                     <input type="tel" id="checkout-phone" name="phone" class="form-control" value="<%= addressFormData?.phone || userAddress?.phone || '' %>" placeholder="10-digit mobile number" required pattern="\d{10,15}" minlength="10" maxlength="15" title="Enter 10 to 15 digit phone number" autocomplete="tel">
                 </div>
                 <div class="form-group">
                    <label for="checkout-pincode" class="form-label small">Pincode:</label>
                    <input type="text" id="checkout-pincode" name="pincode" class="form-control pincode-input" data-target-prefix="checkout" value="<%= addressFormData?.pincode || userAddress?.pincode || '' %>" placeholder="6-digit Pincode" required pattern="\d{6}" maxlength="6" inputmode="numeric" title="Enter 6-digit Pincode" autocomplete="postal-code">
                    <small class="pincode-status text-muted"></small>
                </div>
                <div class="form-group">
                    <label for="checkout-locality" class="form-label small">Locality / Post Office:</label>
                    <select id="checkout-locality" name="locality" class="form-control" required disabled data-saved-value="<%= addressFormData?.locality || userAddress?.locality || '' %>">
                        <option value="" selected disabled>Enter Pincode First</option>
                    </select>
                    <small class="locality-status text-muted"></small>
                </div>
                <div class="auto-filled-fields-container mb-2" id="checkout-auto-filled-fields" style="<%= (addressFormData?.state || userAddress?.state) ? 'display: block;' : 'display: none;' %>">
                    <div class="form-group">
                       <label for="checkout-mandal" class="form-label small">Mandal / Taluk:</label>
                       <input type="text" id="checkout-mandal" class="form-control auto-filled-field" value="<%= addressFormData?.mandal || userAddress?.mandal || '' %>" readonly tabindex="-1">
                   </div>
                    <div class="form-group">
                       <label for="checkout-district" class="form-label small">District:</label>
                       <input type="text" id="checkout-district" class="form-control auto-filled-field" value="<%= addressFormData?.district || userAddress?.district || '' %>" readonly tabindex="-1">
                   </div>
                   <div class="form-group">
                       <label for="checkout-state" class="form-label small">State:</label>
                       <input type="text" id="checkout-state" class="form-control auto-filled-field" value="<%= addressFormData?.state || userAddress?.state || '' %>" readonly tabindex="-1">
                   </div>
                </div>
                <input type="hidden" id="checkout-mandal-hidden" name="mandal" value="<%= addressFormData?.mandal || userAddress?.mandal || '' %>">
                <input type="hidden" id="checkout-district-hidden" name="district" value="<%= addressFormData?.district || userAddress?.district || '' %>">
                <input type="hidden" id="checkout-state-hidden" name="state" value="<%= addressFormData?.state || userAddress?.state || '' %>">
                <div class="form-group">
                    <label for="checkout-cityVillage" class="form-label small">House No. / Building / Area:</label>
                    <input type="text" id="checkout-cityVillage" name="cityVillage" class="form-control" value="<%= addressFormData?.cityVillage || userAddress?.cityVillage || '' %>" required autocomplete="address-line1" placeholder="E.g., #123, Green Apartments">
                </div>
                 <div class="form-group">
                    <label for="checkout-landmarkNearby" class="form-label small">Landmark (Optional):</label>
                    <input type="text" id="checkout-landmarkNearby" name="landmarkNearby" class="form-control" value="<%= addressFormData?.landmarkNearby || userAddress?.landmarkNearby || '' %>" autocomplete="address-line2" placeholder="E.g., Near City Hospital">
                 </div>
                <button type="submit" class="btn btn-primary me-2">Save Address</button>
                 <button type="button" id="cancel-edit-btn" class="btn btn-secondary <%= (!userAddress || !userAddress.name) ? 'hidden' : '' %>">Cancel Edit</button>
             </form>
        </div>

         <div class="checkout-summary">
             <h2>Order Summary</h2>
             <div class="checkout-items">
                 <% items.forEach(item => { %>
                    <div class="checkout-item">
                         <a href="/products/<%= item.productId %>" class="checkout-item-image">
                            <img src="<%= item.imageUrl %>" alt="<%= item.name %>">
                        </a>
                        <div class="checkout-item-info">
                             <%= item.name %> (Qty: <%= item.quantity %>)
                        </div>
                        <div class="checkout-item-price">₹<%= item.itemTotal.toFixed(2) %></div>
                     </div>
                <% }) %>
            </div>
            <hr>
            <div class="checkout-totals">
                <p>Subtotal: <span>₹<%= subTotal.toFixed(2) %></span></p>
                 <p>Shipping: <span>FREE</span></p>
                <hr>
                 <p><strong>Total: <span id="checkout-total-amount-display">₹<%= totalAmount.toFixed(2) %></span></strong></p> 
            </div>

            <div class="checkout-payment">
                <h3>Payment Method</h3>
                 <div class="payment-option"> 
                     <input type="radio" id="cod_payment" name="paymentMethod" value="COD" checked>
                     <label for="cod_payment"><i class="fas fa-money-bill-wave"></i> Cash on Delivery (COD)</label>
                 </div>
                 <% if (RAZORPAY_KEY_ID) { %> 
                 <div class="payment-option">
                    <input type="radio" id="razorpay_payment" name="paymentMethod" value="Razorpay">
                    <label for="razorpay_payment"><i class="fas fa-credit-card"></i> Online Payment (UPI, Cards, etc.)</label>
                </div>
                <% } else { %>
                    <p class="text-muted small mt-2">Online payment is currently unavailable.</p>
                <% } %>
            </div>
            
            <button type="button" id="btn-place-order" class="btn btn-success btn-block btn-place-order mt-3 form-submit-spinner"
                <%= (!userAddress || !userAddress.name) && !addressFormData ? 'disabled' : '' %>
                data-loading-text="<i class='fas fa-spinner fa-spin'></i> Processing..."
            >
                Place Order
            </button>
            <p id="place-order-error" class="text-danger small mt-1 hidden"></p>

            <% if ((!userAddress || !userAddress.name) && !addressFormData) { %>
                <p class="text-danger small mt-1">Please add/save your shipping address first.</p>
            <% } %>
         </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const placeOrderBtn = document.getElementById('btn-place-order');
    const placeOrderErrorP = document.getElementById('place-order-error');
    const originalButtonHtml = placeOrderBtn ? placeOrderBtn.innerHTML : 'Place Order';
    const loadingButtonHtml = placeOrderBtn ? placeOrderBtn.dataset.loadingText : '<i class="fas fa-spinner fa-spin"></i> Processing...';

    if (placeOrderBtn) {
        placeOrderBtn.addEventListener('click', async () => {
            const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
            if (!selectedPaymentMethod) {
                placeOrderErrorP.textContent = 'Please select a payment method.';
                placeOrderErrorP.classList.remove('hidden');
                return;
            }
            placeOrderErrorP.classList.add('hidden');
            placeOrderBtn.disabled = true;
            placeOrderBtn.innerHTML = loadingButtonHtml;

            if (selectedPaymentMethod.value === 'COD') {
                const codForm = document.createElement('form');
                codForm.method = 'POST';
                codForm.action = '/orders/place-cod'; 
                document.body.appendChild(codForm);
                codForm.submit();
            } else if (selectedPaymentMethod.value === 'Razorpay') {
                let internalOrderIdForRzp; // To store internal order ID for use in failure/dismissal
                try {
                    const response = await fetch('/orders/create-razorpay-order', { method: 'POST' });
                    const data = await response.json();

                    if (!response.ok || !data.success) {
                        throw new Error(data.message || `Failed to initiate payment (Status: ${response.status})`);
                    }
                    
                    internalOrderIdForRzp = data.orderId; // Store for later use

                    const options = {
                        key: data.keyId,
                        amount: data.amount, 
                        currency: data.currency,
                        name: "miniapp", 
                        description: `Order #${data.orderId}`,
                        order_id: data.razorpayOrderId,
                        handler: async function (razorpayResponse) {
                            placeOrderBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Verifying...';
                            try {
                                const verifyResponse = await fetch('/orders/verify-razorpay-payment', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        razorpay_payment_id: razorpayResponse.razorpay_payment_id,
                                        razorpay_order_id: razorpayResponse.razorpay_order_id,
                                        razorpay_signature: razorpayResponse.razorpay_signature,
                                        internal_order_id: data.orderId 
                                    })
                                });
                                const verifyData = await verifyResponse.json();
                                if (verifyResponse.ok && verifyData.success) {
                                    window.location.href = `/orders/my-orders?payment=success&order_id=${verifyData.orderId || data.orderId}`;
                                } else {
                                    throw new Error(verifyData.message || "Payment verification failed.");
                                }
                            } catch (verifyError) {
                                console.error("Razorpay verification error:", verifyError);
                                placeOrderErrorP.textContent = `Payment verification failed: ${verifyError.message}. Please contact support.`;
                                placeOrderErrorP.classList.remove('hidden');
                                placeOrderBtn.disabled = false;
                                placeOrderBtn.innerHTML = originalButtonHtml;
                            }
                        },
                        prefill: {
                            name: data.userName,
                            email: data.userEmail,
                            contact: data.userPhone
                        },
                        notes: {
                            internal_order_id: data.orderId // For easier reference in Razorpay dashboard
                        },
                        theme: {
                            color: "#007bff" 
                        },
                        modal: {
                            ondismiss: function(){
                                console.log('Checkout form closed by user for order:', internalOrderIdForRzp);
                                placeOrderErrorP.textContent = 'Payment cancelled. You can try again or select COD.';
                                placeOrderErrorP.classList.remove('hidden');
                                placeOrderBtn.disabled = false;
                                placeOrderBtn.innerHTML = originalButtonHtml;
                                // No backend call on dismiss here, order remains 'PaymentPending'
                                // User can attempt to cancel it from "My Orders" or admin can clean it up.
                            }
                        }
                    };
                    const rzp1 = new Razorpay(options);
                    rzp1.on('payment.failed', async function (response){ // Made async
                        console.error("Razorpay payment failed on client:", response.error);
                        let readableError = `Payment Failed.`;
                        if (response.error.description) readableError += ` ${response.error.description}`;
                        if (response.error.reason) readableError += ` (Reason: ${response.error.reason})`;

                        placeOrderErrorP.textContent = readableError;
                        placeOrderErrorP.classList.remove('hidden');
                        
                        // Update internal order to PaymentFailed via backend
                        if (internalOrderIdForRzp) {
                            try {
                                const failResponse = await fetch(`/orders/payment-failed/${internalOrderIdForRzp}`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.error?.metadata?.payment_id,
                                        razorpay_order_id: response.error?.metadata?.order_id,
                                        reason: `Client-side failure: ${response.error.description || response.error.reason || 'Unknown'}`
                                    })
                                });
                                const failData = await failResponse.json();
                                if (failResponse.ok && failData.success) {
                                    console.log(`Order ${internalOrderIdForRzp} marked as PaymentFailed via backend.`);
                                } else {
                                    console.error("Failed to mark order as PaymentFailed via backend:", failData.message);
                                }
                            } catch (backendFailError) {
                                console.error("Error calling backend to mark PaymentFailed:", backendFailError);
                            }
                        }

                        placeOrderBtn.disabled = false;
                        placeOrderBtn.innerHTML = originalButtonHtml;
                    });
                    rzp1.open();

                } catch (error) {
                    console.error("Razorpay order creation error:", error);
                    placeOrderErrorP.textContent = `Error: ${error.message}. Please try COD or contact support.`;
                    placeOrderErrorP.classList.remove('hidden');
                    placeOrderBtn.disabled = false;
                    placeOrderBtn.innerHTML = originalButtonHtml;
                }
            }
        });
    }

    // Handle address form validation enabling/disabling place order button
    const addressForm = document.getElementById('address-form');
    if (addressForm) {
        const inputs = addressForm.querySelectorAll('input[required], select[required]');
        const checkFormValidityAndToggleButton = () => {
            if (placeOrderBtn) {
                const isFormVisible = !addressForm.classList.contains('hidden');
                const isSavedAddressVisible = document.querySelector('.saved-address:not(.hidden)') !== null;
                let allValid = true;
                if (isFormVisible) {
                     inputs.forEach(input => { if (!input.value.trim()) allValid = false; });
                }
                // Enable if saved address is visible OR form is visible and valid.
                // Disable if form is visible and not valid.
                if (isSavedAddressVisible) {
                    placeOrderBtn.disabled = false;
                } else if (isFormVisible && allValid) {
                     placeOrderBtn.disabled = false;
                } else if (isFormVisible && !allValid) {
                    placeOrderBtn.disabled = true;
                }
                // If neither saved address nor form is visible (initial state with no address)
                // it might be already disabled by EJS - this primarily handles dynamic changes.
            }
        };

        inputs.forEach(input => {
            input.addEventListener('input', checkFormValidityAndToggleButton);
            input.addEventListener('change', checkFormValidityAndToggleButton); // For select
        });

        // Check on initial load (after JS fills pincode potentially)
        // Ensure this check runs *after* any potential auto-population of address from pincode
        const pincodeInput = document.getElementById('checkout-pincode');
        const localitySelect = document.getElementById('checkout-locality');

        const observer = new MutationObserver((mutationsList, obs) => {
            for(const mutation of mutationsList) {
                if (mutation.type === 'childList' || mutation.type === 'attributes') {
                    // Specifically check if locality has a value after population or form fields change
                    if (localitySelect && localitySelect.value !== "") {
                         checkFormValidityAndToggleButton();
                    }
                }
            }
        });
        if(pincodeInput) observer.observe(pincodeInput.closest('.checkout-address'), { childList: true, subtree: true, attributes: true });


        // Trigger initial check if address form is initially visible & filled by server
        if (!addressForm.classList.contains('hidden') && document.getElementById('checkout-name-addr').value) {
            checkFormValidityAndToggleButton();
        } else if (document.querySelector('.saved-address:not(.hidden)')) { // If saved address visible
             if(placeOrderBtn) placeOrderBtn.disabled = false;
        }
    }
});
</script>

<%- include('../partials/footer') %>